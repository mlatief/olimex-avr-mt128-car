
car1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000192  00800100  00001c50  00001ce4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c50  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002f  00800292  00800292  00001e76  2**0
                  ALLOC
  3 .debug_aranges 00000220  00000000  00000000  00001e76  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000004f0  00000000  00000000  00002096  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002f32  00000000  00000000  00002586  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001833  00000000  00000000  000054b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001be6  00000000  00000000  00006ceb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000390  00000000  00000000  000088d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000061b  00000000  00000000  00008c64  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000e90  00000000  00000000  0000927f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f8  00000000  00000000  0000a10f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 a8 00 	jmp	0x150	; 0x150 <__vector_9>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 67 00 	jmp	0xce	; 0xce <__vector_12>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	12 e0       	ldi	r17, 0x02	; 2
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e0 e5       	ldi	r30, 0x50	; 80
      a0:	fc e1       	ldi	r31, 0x1C	; 28
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a2 39       	cpi	r26, 0x92	; 146
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	12 e0       	ldi	r17, 0x02	; 2
      b4:	a2 e9       	ldi	r26, 0x92	; 146
      b6:	b2 e0       	ldi	r27, 0x02	; 2
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a1 3c       	cpi	r26, 0xC1	; 193
      be:	b1 07       	cpc	r27, r17
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 52 04 	call	0x8a4	; 0x8a4 <main>
      c6:	0c 94 26 0e 	jmp	0x1c4c	; 0x1c4c <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <__vector_12>:
		/* lcd-näytön alustaminen */
		lcd_init();
        
}

ISR(TIMER1_COMPA_vect) {
      ce:	1f 92       	push	r1
      d0:	0f 92       	push	r0
      d2:	0f b6       	in	r0, 0x3f	; 63
      d4:	0f 92       	push	r0
      d6:	0b b6       	in	r0, 0x3b	; 59
      d8:	0f 92       	push	r0
      da:	11 24       	eor	r1, r1
      dc:	8f 93       	push	r24
      de:	9f 93       	push	r25
      e0:	ef 93       	push	r30
      e2:	ff 93       	push	r31

	/* vaihdetaan kaiutin pinnien tilat XOR operaatiolla */
 	PORTE ^= (1 << PE4) | (1 << PE5); 
      e4:	e3 e2       	ldi	r30, 0x23	; 35
      e6:	f0 e0       	ldi	r31, 0x00	; 0
      e8:	80 81       	ld	r24, Z
      ea:	90 e3       	ldi	r25, 0x30	; 48
      ec:	89 27       	eor	r24, r25
      ee:	80 83       	st	Z, r24
}
      f0:	ff 91       	pop	r31
      f2:	ef 91       	pop	r30
      f4:	9f 91       	pop	r25
      f6:	8f 91       	pop	r24
      f8:	0f 90       	pop	r0
      fa:	0b be       	out	0x3b, r0	; 59
      fc:	0f 90       	pop	r0
      fe:	0f be       	out	0x3f, r0	; 63
     100:	0f 90       	pop	r0
     102:	1f 90       	pop	r1
     104:	18 95       	reti

00000106 <get_buttons>:
int jump_down = 0;
/* Read user inputs: Right, Left and Jump! for now */
void get_buttons(void)
{
    // Button 1 moves the car to Right Lane
    if(!(PINA & 0b00000001))
     106:	c8 99       	sbic	0x19, 0	; 25
     108:	04 c0       	rjmp	.+8      	; 0x112 <get_buttons+0xc>
    {
        car_pos = RIGHTLANE;
     10a:	81 e0       	ldi	r24, 0x01	; 1
     10c:	80 93 c0 02 	sts	0x02C0, r24
     110:	05 c0       	rjmp	.+10     	; 0x11c <get_buttons+0x16>
    }
    // Mutually exclusive checking, so only one button takes precedency
    else if(!(PINA & 0b00010000))
     112:	cc 99       	sbic	0x19, 4	; 25
     114:	03 c0       	rjmp	.+6      	; 0x11c <get_buttons+0x16>
    {
        // Button 5 moves the car to Left Lane
        car_pos = LEFTLANE;
     116:	82 e0       	ldi	r24, 0x02	; 2
     118:	80 93 c0 02 	sts	0x02C0, r24
    }
    
    // Jump when button released after it was pressed, to avoid Flying Car!
    if(!(PINA & 0b00000100))
     11c:	ca 99       	sbic	0x19, 2	; 25
     11e:	07 c0       	rjmp	.+14     	; 0x12e <get_buttons+0x28>
    {
        jump_down = 1;
     120:	81 e0       	ldi	r24, 0x01	; 1
     122:	90 e0       	ldi	r25, 0x00	; 0
     124:	90 93 93 02 	sts	0x0293, r25
     128:	80 93 92 02 	sts	0x0292, r24
     12c:	08 95       	ret
    }
    else
    {
        if(jump_down){
     12e:	80 91 92 02 	lds	r24, 0x0292
     132:	90 91 93 02 	lds	r25, 0x0293
     136:	89 2b       	or	r24, r25
     138:	51 f0       	breq	.+20     	; 0x14e <get_buttons+0x48>
            car_jump = 1;
     13a:	81 e0       	ldi	r24, 0x01	; 1
     13c:	90 e0       	ldi	r25, 0x00	; 0
     13e:	90 93 95 02 	sts	0x0295, r25
     142:	80 93 94 02 	sts	0x0294, r24
            jump_down = 0;
     146:	10 92 93 02 	sts	0x0293, r1
     14a:	10 92 92 02 	sts	0x0292, r1
     14e:	08 95       	ret

00000150 <__vector_9>:
	/* vaihdetaan kaiutin pinnien tilat XOR operaatiolla */
 	PORTE ^= (1 << PE4) | (1 << PE5); 
}

/* Special Timer and Interrupt Handler for more responsive Inputs */
ISR(TIMER2_COMP_vect) {
     150:	1f 92       	push	r1
     152:	0f 92       	push	r0
     154:	0f b6       	in	r0, 0x3f	; 63
     156:	0f 92       	push	r0
     158:	0b b6       	in	r0, 0x3b	; 59
     15a:	0f 92       	push	r0
     15c:	11 24       	eor	r1, r1
     15e:	2f 93       	push	r18
     160:	3f 93       	push	r19
     162:	4f 93       	push	r20
     164:	5f 93       	push	r21
     166:	6f 93       	push	r22
     168:	7f 93       	push	r23
     16a:	8f 93       	push	r24
     16c:	9f 93       	push	r25
     16e:	af 93       	push	r26
     170:	bf 93       	push	r27
     172:	ef 93       	push	r30
     174:	ff 93       	push	r31

    get_buttons();
     176:	0e 94 83 00 	call	0x106	; 0x106 <get_buttons>
}
     17a:	ff 91       	pop	r31
     17c:	ef 91       	pop	r30
     17e:	bf 91       	pop	r27
     180:	af 91       	pop	r26
     182:	9f 91       	pop	r25
     184:	8f 91       	pop	r24
     186:	7f 91       	pop	r23
     188:	6f 91       	pop	r22
     18a:	5f 91       	pop	r21
     18c:	4f 91       	pop	r20
     18e:	3f 91       	pop	r19
     190:	2f 91       	pop	r18
     192:	0f 90       	pop	r0
     194:	0b be       	out	0x3b, r0	; 59
     196:	0f 90       	pop	r0
     198:	0f be       	out	0x3f, r0	; 63
     19a:	0f 90       	pop	r0
     19c:	1f 90       	pop	r1
     19e:	18 95       	reti

000001a0 <draw_road>:
    }
}


void draw_road(void)
{
     1a0:	2f 92       	push	r2
     1a2:	3f 92       	push	r3
     1a4:	4f 92       	push	r4
     1a6:	5f 92       	push	r5
     1a8:	6f 92       	push	r6
     1aa:	7f 92       	push	r7
     1ac:	8f 92       	push	r8
     1ae:	9f 92       	push	r9
     1b0:	af 92       	push	r10
     1b2:	bf 92       	push	r11
     1b4:	cf 92       	push	r12
     1b6:	df 92       	push	r13
     1b8:	ef 92       	push	r14
     1ba:	ff 92       	push	r15
     1bc:	0f 93       	push	r16
     1be:	1f 93       	push	r17
     1c0:	df 93       	push	r29
     1c2:	cf 93       	push	r28
     1c4:	00 d0       	rcall	.+0      	; 0x1c6 <draw_road+0x26>
     1c6:	cd b7       	in	r28, 0x3d	; 61
     1c8:	de b7       	in	r29, 0x3e	; 62
    char score_lines[2];
    
    // Get the Higher and Lower order bytes of the score
    long score_sec = score/1000;
     1ca:	60 91 96 02 	lds	r22, 0x0296
     1ce:	70 91 97 02 	lds	r23, 0x0297
     1d2:	80 91 98 02 	lds	r24, 0x0298
     1d6:	90 91 99 02 	lds	r25, 0x0299
     1da:	28 ee       	ldi	r18, 0xE8	; 232
     1dc:	33 e0       	ldi	r19, 0x03	; 3
     1de:	40 e0       	ldi	r20, 0x00	; 0
     1e0:	50 e0       	ldi	r21, 0x00	; 0
     1e2:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <__divmodsi4>
     1e6:	12 2f       	mov	r17, r18
     1e8:	03 2f       	mov	r16, r19
     1ea:	f4 2e       	mov	r15, r20
     1ec:	e5 2e       	mov	r14, r21
    score_lines[1] = score_sec%10;
     1ee:	62 2f       	mov	r22, r18
     1f0:	73 2f       	mov	r23, r19
     1f2:	84 2f       	mov	r24, r20
     1f4:	95 2f       	mov	r25, r21
     1f6:	2a e0       	ldi	r18, 0x0A	; 10
     1f8:	30 e0       	ldi	r19, 0x00	; 0
     1fa:	40 e0       	ldi	r20, 0x00	; 0
     1fc:	50 e0       	ldi	r21, 0x00	; 0
     1fe:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <__divmodsi4>
     202:	6a 83       	std	Y+2, r22	; 0x02
    score_lines[0] = (score_sec/10)%10;
     204:	61 2f       	mov	r22, r17
     206:	70 2f       	mov	r23, r16
     208:	8f 2d       	mov	r24, r15
     20a:	9e 2d       	mov	r25, r14
     20c:	2a e0       	ldi	r18, 0x0A	; 10
     20e:	30 e0       	ldi	r19, 0x00	; 0
     210:	40 e0       	ldi	r20, 0x00	; 0
     212:	50 e0       	ldi	r21, 0x00	; 0
     214:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <__divmodsi4>
     218:	ca 01       	movw	r24, r20
     21a:	b9 01       	movw	r22, r18
     21c:	2a e0       	ldi	r18, 0x0A	; 10
     21e:	30 e0       	ldi	r19, 0x00	; 0
     220:	40 e0       	ldi	r20, 0x00	; 0
     222:	50 e0       	ldi	r21, 0x00	; 0
     224:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <__divmodsi4>
     228:	69 83       	std	Y+1, r22	; 0x01
     22a:	88 24       	eor	r8, r8
     22c:	99 24       	eor	r9, r9
    
    //Loop through the lanes
    for (int i = 1; i <= 2; i++) {
        // Print the score byte;
        line_buffer[0] = score_lines[i-1] + '0';
     22e:	0f 2e       	mov	r0, r31
     230:	fe e9       	ldi	r31, 0x9E	; 158
     232:	6f 2e       	mov	r6, r31
     234:	f2 e0       	ldi	r31, 0x02	; 2
     236:	7f 2e       	mov	r7, r31
     238:	f0 2d       	mov	r31, r0
                }
            }
        }
        else
        {
            line_buffer[ROADLEN] = BLANK;
     23a:	0f 2e       	mov	r0, r31
     23c:	fd ea       	ldi	r31, 0xAD	; 173
     23e:	2f 2e       	mov	r2, r31
     240:	f2 e0       	ldi	r31, 0x02	; 2
     242:	3f 2e       	mov	r3, r31
     244:	f0 2d       	mov	r31, r0
		for (int j = 0; j < ROADLEN - 1; j++) {
			int obs = road[(j + road_index)%ROADLEN];
			
            // Here we do bitwise AND between obstacle pattern and lane
            // Use the fact that obstacle patterns are: 1 (B01) right lane, 2 (B10) left lane and 3 (B11) both lanes
            line_buffer[ROADLEN - j - 1] = (obs & i) ? GLYPH_OBSTACLE : BLANK;
     246:	0f 2e       	mov	r0, r31
     248:	ff ea       	ldi	r31, 0xAF	; 175
     24a:	af 2e       	mov	r10, r31
     24c:	f2 e0       	ldi	r31, 0x02	; 2
     24e:	bf 2e       	mov	r11, r31
     250:	f0 2d       	mov	r31, r0
     252:	0f 2e       	mov	r0, r31
     254:	f3 e0       	ldi	r31, 0x03	; 3
     256:	4f 2e       	mov	r4, r31
     258:	f0 2d       	mov	r31, r0
     25a:	55 24       	eor	r5, r5
     25c:	68 94       	set
     25e:	55 f8       	bld	r5, 5
    }
}


void draw_road(void)
{
     260:	64 01       	movw	r12, r8
     262:	08 94       	sec
     264:	c1 1c       	adc	r12, r1
     266:	d1 1c       	adc	r13, r1
     268:	76 01       	movw	r14, r12
    score_lines[0] = (score_sec/10)%10;
    
    //Loop through the lanes
    for (int i = 1; i <= 2; i++) {
        // Print the score byte;
        line_buffer[0] = score_lines[i-1] + '0';
     26a:	e1 e0       	ldi	r30, 0x01	; 1
     26c:	f0 e0       	ldi	r31, 0x00	; 0
     26e:	ec 0f       	add	r30, r28
     270:	fd 1f       	adc	r31, r29
     272:	e8 0d       	add	r30, r8
     274:	f9 1d       	adc	r31, r9
     276:	80 81       	ld	r24, Z
     278:	80 5d       	subi	r24, 0xD0	; 208
     27a:	f3 01       	movw	r30, r6
     27c:	80 83       	st	Z, r24

        // Print the car, car jump or the crash symbol;
        if(car_pos == i)
     27e:	80 91 c0 02 	lds	r24, 0x02C0
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	8c 15       	cp	r24, r12
     286:	9d 05       	cpc	r25, r13
     288:	c1 f4       	brne	.+48     	; 0x2ba <draw_road+0x11a>
        {
            if (crash)
     28a:	80 91 9c 02 	lds	r24, 0x029C
     28e:	90 91 9d 02 	lds	r25, 0x029D
     292:	89 2b       	or	r24, r25
     294:	21 f0       	breq	.+8      	; 0x29e <draw_road+0xfe>
            {
                line_buffer[ROADLEN] = GLYPH_CRASH;
     296:	84 e0       	ldi	r24, 0x04	; 4
     298:	f1 01       	movw	r30, r2
     29a:	80 83       	st	Z, r24
     29c:	3e c0       	rjmp	.+124    	; 0x31a <draw_road+0x17a>
            }
            else
            {
                if(car_jump)
     29e:	80 91 94 02 	lds	r24, 0x0294
     2a2:	90 91 95 02 	lds	r25, 0x0295
     2a6:	89 2b       	or	r24, r25
     2a8:	21 f0       	breq	.+8      	; 0x2b2 <draw_road+0x112>
                {
                    line_buffer[ROADLEN] = GLYPH_CAR_JUMP;
     2aa:	82 e0       	ldi	r24, 0x02	; 2
     2ac:	f1 01       	movw	r30, r2
     2ae:	80 83       	st	Z, r24
     2b0:	34 c0       	rjmp	.+104    	; 0x31a <draw_road+0x17a>
                }
                else
                {
                    line_buffer[ROADLEN] = GLYPH_CAR;
     2b2:	81 e0       	ldi	r24, 0x01	; 1
     2b4:	f1 01       	movw	r30, r2
     2b6:	80 83       	st	Z, r24
     2b8:	30 c0       	rjmp	.+96     	; 0x31a <draw_road+0x17a>
                }
            }
        }
        else
        {
            line_buffer[ROADLEN] = BLANK;
     2ba:	80 e2       	ldi	r24, 0x20	; 32
     2bc:	f1 01       	movw	r30, r2
     2be:	80 83       	st	Z, r24
     2c0:	2c c0       	rjmp	.+88     	; 0x31a <draw_road+0x17a>
		for (int j = 0; j < ROADLEN - 1; j++) {
			int obs = road[(j + road_index)%ROADLEN];
			
            // Here we do bitwise AND between obstacle pattern and lane
            // Use the fact that obstacle patterns are: 1 (B01) right lane, 2 (B10) left lane and 3 (B11) both lanes
            line_buffer[ROADLEN - j - 1] = (obs & i) ? GLYPH_OBSTACLE : BLANK;
     2c2:	c8 01       	movw	r24, r16
     2c4:	6f e0       	ldi	r22, 0x0F	; 15
     2c6:	70 e0       	ldi	r23, 0x00	; 0
     2c8:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <__divmodhi4>
     2cc:	f5 01       	movw	r30, r10
     2ce:	e8 0f       	add	r30, r24
     2d0:	f9 1f       	adc	r31, r25
     2d2:	80 81       	ld	r24, Z
     2d4:	90 e0       	ldi	r25, 0x00	; 0
     2d6:	8e 21       	and	r24, r14
     2d8:	9f 21       	and	r25, r15
     2da:	89 2b       	or	r24, r25
     2dc:	11 f4       	brne	.+4      	; 0x2e2 <draw_road+0x142>
     2de:	85 2d       	mov	r24, r5
     2e0:	01 c0       	rjmp	.+2      	; 0x2e4 <draw_road+0x144>
     2e2:	84 2d       	mov	r24, r4
     2e4:	f9 01       	movw	r30, r18
     2e6:	80 83       	st	Z, r24
     2e8:	0f 5f       	subi	r16, 0xFF	; 255
     2ea:	1f 4f       	sbci	r17, 0xFF	; 255
     2ec:	21 50       	subi	r18, 0x01	; 1
     2ee:	30 40       	sbci	r19, 0x00	; 0
            line_buffer[ROADLEN] = BLANK;
        }


        // Print the obstacles
		for (int j = 0; j < ROADLEN - 1; j++) {
     2f0:	26 15       	cp	r18, r6
     2f2:	37 05       	cpc	r19, r7
     2f4:	31 f7       	brne	.-52     	; 0x2c2 <draw_road+0x122>
            // Use the fact that obstacle patterns are: 1 (B01) right lane, 2 (B10) left lane and 3 (B11) both lanes
            line_buffer[ROADLEN - j - 1] = (obs & i) ? GLYPH_OBSTACLE : BLANK;
		}
        
        // Null-terminate in order for lcd_print() to function properly
        line_buffer[ROADLEN+1] = 0;
     2f6:	ee ea       	ldi	r30, 0xAE	; 174
     2f8:	f2 e0       	ldi	r31, 0x02	; 2
     2fa:	10 82       	st	Z, r1
        
        // Position the cursor in place
		lcd_set_cursor(0, i-1);
     2fc:	80 e0       	ldi	r24, 0x00	; 0
     2fe:	90 e0       	ldi	r25, 0x00	; 0
     300:	b4 01       	movw	r22, r8
     302:	0e 94 13 05 	call	0xa26	; 0xa26 <lcd_set_cursor>
        
        // Actually print the line
		lcd_print(line_buffer);
     306:	8e e9       	ldi	r24, 0x9E	; 158
     308:	92 e0       	ldi	r25, 0x02	; 2
     30a:	0e 94 4e 05 	call	0xa9c	; 0xa9c <lcd_print>
    long score_sec = score/1000;
    score_lines[1] = score_sec%10;
    score_lines[0] = (score_sec/10)%10;
    
    //Loop through the lanes
    for (int i = 1; i <= 2; i++) {
     30e:	f2 e0       	ldi	r31, 0x02	; 2
     310:	cf 16       	cp	r12, r31
     312:	d1 04       	cpc	r13, r1
     314:	49 f0       	breq	.+18     	; 0x328 <draw_road+0x188>
     316:	46 01       	movw	r8, r12
     318:	a3 cf       	rjmp	.-186    	; 0x260 <draw_road+0xc0>
		lcd_set_cursor(0, i-1);
        
        // Actually print the line
		lcd_print(line_buffer);
	}    
}
     31a:	00 91 be 02 	lds	r16, 0x02BE
     31e:	10 91 bf 02 	lds	r17, 0x02BF
     322:	2c ea       	ldi	r18, 0xAC	; 172
     324:	32 e0       	ldi	r19, 0x02	; 2
     326:	cd cf       	rjmp	.-102    	; 0x2c2 <draw_road+0x122>
     328:	0f 90       	pop	r0
     32a:	0f 90       	pop	r0
     32c:	cf 91       	pop	r28
     32e:	df 91       	pop	r29
     330:	1f 91       	pop	r17
     332:	0f 91       	pop	r16
     334:	ff 90       	pop	r15
     336:	ef 90       	pop	r14
     338:	df 90       	pop	r13
     33a:	cf 90       	pop	r12
     33c:	bf 90       	pop	r11
     33e:	af 90       	pop	r10
     340:	9f 90       	pop	r9
     342:	8f 90       	pop	r8
     344:	7f 90       	pop	r7
     346:	6f 90       	pop	r6
     348:	5f 90       	pop	r5
     34a:	4f 90       	pop	r4
     34c:	3f 90       	pop	r3
     34e:	2f 90       	pop	r2
     350:	08 95       	ret

00000352 <show_intro>:
    
    lcd_write_ctrl(LCD_CLEAR);
}

void show_intro(void)
{
     352:	df 93       	push	r29
     354:	cf 93       	push	r28
     356:	cd b7       	in	r28, 0x3d	; 61
     358:	de b7       	in	r29, 0x3e	; 62
     35a:	a2 97       	sbiw	r28, 0x22	; 34
     35c:	0f b6       	in	r0, 0x3f	; 63
     35e:	f8 94       	cli
     360:	de bf       	out	0x3e, r29	; 62
     362:	0f be       	out	0x3f, r0	; 63
     364:	cd bf       	out	0x3d, r28	; 61
    char welcome_1[] = "Avoid  Obstacles";
     366:	de 01       	movw	r26, r28
     368:	11 96       	adiw	r26, 0x01	; 1
     36a:	e0 e0       	ldi	r30, 0x00	; 0
     36c:	f1 e0       	ldi	r31, 0x01	; 1
     36e:	81 e1       	ldi	r24, 0x11	; 17
     370:	01 90       	ld	r0, Z+
     372:	0d 92       	st	X+, r0
     374:	81 50       	subi	r24, 0x01	; 1
     376:	e1 f7       	brne	.-8      	; 0x370 <show_intro+0x1e>
    char welcome_2[] = ">Jump to Start!<";
     378:	de 01       	movw	r26, r28
     37a:	52 96       	adiw	r26, 0x12	; 18
     37c:	e1 e1       	ldi	r30, 0x11	; 17
     37e:	f1 e0       	ldi	r31, 0x01	; 1
     380:	81 e1       	ldi	r24, 0x11	; 17
     382:	01 90       	ld	r0, Z+
     384:	0d 92       	st	X+, r0
     386:	81 50       	subi	r24, 0x01	; 1
     388:	e1 f7       	brne	.-8      	; 0x382 <show_intro+0x30>
    
    lcd_print(welcome_1);
     38a:	ce 01       	movw	r24, r28
     38c:	01 96       	adiw	r24, 0x01	; 1
     38e:	0e 94 4e 05 	call	0xa9c	; 0xa9c <lcd_print>
    lcd_set_cursor(0,1);
     392:	80 e0       	ldi	r24, 0x00	; 0
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	61 e0       	ldi	r22, 0x01	; 1
     398:	70 e0       	ldi	r23, 0x00	; 0
     39a:	0e 94 13 05 	call	0xa26	; 0xa26 <lcd_set_cursor>
    lcd_print(welcome_2);
     39e:	ce 01       	movw	r24, r28
     3a0:	42 96       	adiw	r24, 0x12	; 18
     3a2:	0e 94 4e 05 	call	0xa9c	; 0xa9c <lcd_print>
    //delay_msec(2000);
    
    //lcd_write_ctrl(LCD_CLEAR);
}
     3a6:	a2 96       	adiw	r28, 0x22	; 34
     3a8:	0f b6       	in	r0, 0x3f	; 63
     3aa:	f8 94       	cli
     3ac:	de bf       	out	0x3e, r29	; 62
     3ae:	0f be       	out	0x3f, r0	; 63
     3b0:	cd bf       	out	0x3d, r28	; 61
     3b2:	cf 91       	pop	r28
     3b4:	df 91       	pop	r29
     3b6:	08 95       	ret

000003b8 <show_game_over>:
}


// Draw crash glyph and print Game Over!
void show_game_over(void)
{
     3b8:	af 92       	push	r10
     3ba:	bf 92       	push	r11
     3bc:	cf 92       	push	r12
     3be:	df 92       	push	r13
     3c0:	ef 92       	push	r14
     3c2:	ff 92       	push	r15
     3c4:	0f 93       	push	r16
     3c6:	1f 93       	push	r17
     3c8:	df 93       	push	r29
     3ca:	cf 93       	push	r28
     3cc:	cd b7       	in	r28, 0x3d	; 61
     3ce:	de b7       	in	r29, 0x3e	; 62
     3d0:	6c 97       	sbiw	r28, 0x1c	; 28
     3d2:	0f b6       	in	r0, 0x3f	; 63
     3d4:	f8 94       	cli
     3d6:	de bf       	out	0x3e, r29	; 62
     3d8:	0f be       	out	0x3f, r0	; 63
     3da:	cd bf       	out	0x3d, r28	; 61
    char game_over_1[] = " Score: nnn  "; // indices: 7,8,9 to write the score digits, 11 for HScore Symbol
     3dc:	de 01       	movw	r26, r28
     3de:	11 96       	adiw	r26, 0x01	; 1
     3e0:	e2 e2       	ldi	r30, 0x22	; 34
     3e2:	f1 e0       	ldi	r31, 0x01	; 1
     3e4:	8e e0       	ldi	r24, 0x0E	; 14
     3e6:	01 90       	ld	r0, Z+
     3e8:	0d 92       	st	X+, r0
     3ea:	81 50       	subi	r24, 0x01	; 1
     3ec:	e1 f7       	brne	.-8      	; 0x3e6 <show_game_over+0x2e>
    char game_over_2[] = " Highest: nnn"; // indices: 9,10,11 to write the high score digits
     3ee:	de 01       	movw	r26, r28
     3f0:	1f 96       	adiw	r26, 0x0f	; 15
     3f2:	e0 e3       	ldi	r30, 0x30	; 48
     3f4:	f1 e0       	ldi	r31, 0x01	; 1
     3f6:	8e e0       	ldi	r24, 0x0E	; 14
     3f8:	01 90       	ld	r0, Z+
     3fa:	0d 92       	st	X+, r0
     3fc:	81 50       	subi	r24, 0x01	; 1
     3fe:	e1 f7       	brne	.-8      	; 0x3f8 <show_game_over+0x40>
    
    long hscore = eeprom_read_dword((uint32_t*)SCORE_ADDR);
     400:	84 e0       	ldi	r24, 0x04	; 4
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <__eerd_dword_m128>
     408:	37 2f       	mov	r19, r23
     40a:	48 2f       	mov	r20, r24
     40c:	59 2f       	mov	r21, r25
     40e:	86 2f       	mov	r24, r22
     410:	93 2f       	mov	r25, r19
     412:	a4 2f       	mov	r26, r20
     414:	b5 2f       	mov	r27, r21
     416:	5c 01       	movw	r10, r24
     418:	6d 01       	movw	r12, r26
    if(hscore < score)
     41a:	40 91 96 02 	lds	r20, 0x0296
     41e:	50 91 97 02 	lds	r21, 0x0297
     422:	60 91 98 02 	lds	r22, 0x0298
     426:	70 91 99 02 	lds	r23, 0x0299
     42a:	a4 16       	cp	r10, r20
     42c:	b5 06       	cpc	r11, r21
     42e:	c6 06       	cpc	r12, r22
     430:	d7 06       	cpc	r13, r23
     432:	34 f4       	brge	.+12     	; 0x440 <show_game_over+0x88>
    {
        eeprom_write_dword((uint32_t*)SCORE_ADDR, score);
     434:	84 e0       	ldi	r24, 0x04	; 4
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <__eewr_dword_m128>
        game_over_1[12] = GLYPH_HSCORE;
     43c:	85 e0       	ldi	r24, 0x05	; 5
     43e:	8d 87       	std	Y+13, r24	; 0x0d
    }
    
    long score_sec = score/1000; // Score in seconds
     440:	60 91 96 02 	lds	r22, 0x0296
     444:	70 91 97 02 	lds	r23, 0x0297
     448:	80 91 98 02 	lds	r24, 0x0298
     44c:	90 91 99 02 	lds	r25, 0x0299
     450:	28 ee       	ldi	r18, 0xE8	; 232
     452:	33 e0       	ldi	r19, 0x03	; 3
     454:	40 e0       	ldi	r20, 0x00	; 0
     456:	50 e0       	ldi	r21, 0x00	; 0
     458:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <__divmodsi4>
     45c:	12 2f       	mov	r17, r18
     45e:	03 2f       	mov	r16, r19
     460:	f4 2e       	mov	r15, r20
     462:	e5 2e       	mov	r14, r21
    long hscore_sec = hscore/1000; // High Score in seconds
     464:	c6 01       	movw	r24, r12
     466:	b5 01       	movw	r22, r10
     468:	28 ee       	ldi	r18, 0xE8	; 232
     46a:	33 e0       	ldi	r19, 0x03	; 3
     46c:	40 e0       	ldi	r20, 0x00	; 0
     46e:	50 e0       	ldi	r21, 0x00	; 0
     470:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <__divmodsi4>
     474:	d2 2e       	mov	r13, r18
     476:	c3 2e       	mov	r12, r19
     478:	b4 2e       	mov	r11, r20
     47a:	a5 2e       	mov	r10, r21

    game_over_1[10] = score_sec%10 + '0';  score_sec /= 10;
     47c:	61 2f       	mov	r22, r17
     47e:	70 2f       	mov	r23, r16
     480:	8f 2d       	mov	r24, r15
     482:	9e 2d       	mov	r25, r14
     484:	2a e0       	ldi	r18, 0x0A	; 10
     486:	30 e0       	ldi	r19, 0x00	; 0
     488:	40 e0       	ldi	r20, 0x00	; 0
     48a:	50 e0       	ldi	r21, 0x00	; 0
     48c:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <__divmodsi4>
     490:	60 5d       	subi	r22, 0xD0	; 208
     492:	6b 87       	std	Y+11, r22	; 0x0b
     494:	61 2f       	mov	r22, r17
     496:	70 2f       	mov	r23, r16
     498:	8f 2d       	mov	r24, r15
     49a:	9e 2d       	mov	r25, r14
     49c:	2a e0       	ldi	r18, 0x0A	; 10
     49e:	30 e0       	ldi	r19, 0x00	; 0
     4a0:	40 e0       	ldi	r20, 0x00	; 0
     4a2:	50 e0       	ldi	r21, 0x00	; 0
     4a4:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <__divmodsi4>
     4a8:	12 2f       	mov	r17, r18
     4aa:	03 2f       	mov	r16, r19
     4ac:	f4 2e       	mov	r15, r20
     4ae:	e5 2e       	mov	r14, r21
    game_over_1[9] = score_sec%10 + '0';  score_sec /= 10;
     4b0:	62 2f       	mov	r22, r18
     4b2:	73 2f       	mov	r23, r19
     4b4:	84 2f       	mov	r24, r20
     4b6:	95 2f       	mov	r25, r21
     4b8:	2a e0       	ldi	r18, 0x0A	; 10
     4ba:	30 e0       	ldi	r19, 0x00	; 0
     4bc:	40 e0       	ldi	r20, 0x00	; 0
     4be:	50 e0       	ldi	r21, 0x00	; 0
     4c0:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <__divmodsi4>
     4c4:	60 5d       	subi	r22, 0xD0	; 208
     4c6:	6a 87       	std	Y+10, r22	; 0x0a
    game_over_1[8] = score_sec%10 + '0';
     4c8:	61 2f       	mov	r22, r17
     4ca:	70 2f       	mov	r23, r16
     4cc:	8f 2d       	mov	r24, r15
     4ce:	9e 2d       	mov	r25, r14
     4d0:	2a e0       	ldi	r18, 0x0A	; 10
     4d2:	30 e0       	ldi	r19, 0x00	; 0
     4d4:	40 e0       	ldi	r20, 0x00	; 0
     4d6:	50 e0       	ldi	r21, 0x00	; 0
     4d8:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <__divmodsi4>
     4dc:	ca 01       	movw	r24, r20
     4de:	b9 01       	movw	r22, r18
     4e0:	2a e0       	ldi	r18, 0x0A	; 10
     4e2:	30 e0       	ldi	r19, 0x00	; 0
     4e4:	40 e0       	ldi	r20, 0x00	; 0
     4e6:	50 e0       	ldi	r21, 0x00	; 0
     4e8:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <__divmodsi4>
     4ec:	60 5d       	subi	r22, 0xD0	; 208
     4ee:	69 87       	std	Y+9, r22	; 0x09

    game_over_2[12] = hscore_sec%10 + '0';  hscore_sec /= 10;
     4f0:	6d 2d       	mov	r22, r13
     4f2:	7c 2d       	mov	r23, r12
     4f4:	8b 2d       	mov	r24, r11
     4f6:	9a 2d       	mov	r25, r10
     4f8:	2a e0       	ldi	r18, 0x0A	; 10
     4fa:	30 e0       	ldi	r19, 0x00	; 0
     4fc:	40 e0       	ldi	r20, 0x00	; 0
     4fe:	50 e0       	ldi	r21, 0x00	; 0
     500:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <__divmodsi4>
     504:	60 5d       	subi	r22, 0xD0	; 208
     506:	6b 8f       	std	Y+27, r22	; 0x1b
     508:	6d 2d       	mov	r22, r13
     50a:	7c 2d       	mov	r23, r12
     50c:	8b 2d       	mov	r24, r11
     50e:	9a 2d       	mov	r25, r10
     510:	2a e0       	ldi	r18, 0x0A	; 10
     512:	30 e0       	ldi	r19, 0x00	; 0
     514:	40 e0       	ldi	r20, 0x00	; 0
     516:	50 e0       	ldi	r21, 0x00	; 0
     518:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <__divmodsi4>
     51c:	12 2f       	mov	r17, r18
     51e:	03 2f       	mov	r16, r19
     520:	f4 2e       	mov	r15, r20
     522:	e5 2e       	mov	r14, r21
    game_over_2[11] = hscore_sec%10 + '0';  hscore_sec /= 10;
     524:	62 2f       	mov	r22, r18
     526:	73 2f       	mov	r23, r19
     528:	84 2f       	mov	r24, r20
     52a:	95 2f       	mov	r25, r21
     52c:	2a e0       	ldi	r18, 0x0A	; 10
     52e:	30 e0       	ldi	r19, 0x00	; 0
     530:	40 e0       	ldi	r20, 0x00	; 0
     532:	50 e0       	ldi	r21, 0x00	; 0
     534:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <__divmodsi4>
     538:	60 5d       	subi	r22, 0xD0	; 208
     53a:	6a 8f       	std	Y+26, r22	; 0x1a
    game_over_2[10] = hscore_sec%10 + '0';
     53c:	61 2f       	mov	r22, r17
     53e:	70 2f       	mov	r23, r16
     540:	8f 2d       	mov	r24, r15
     542:	9e 2d       	mov	r25, r14
     544:	2a e0       	ldi	r18, 0x0A	; 10
     546:	30 e0       	ldi	r19, 0x00	; 0
     548:	40 e0       	ldi	r20, 0x00	; 0
     54a:	50 e0       	ldi	r21, 0x00	; 0
     54c:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <__divmodsi4>
     550:	ca 01       	movw	r24, r20
     552:	b9 01       	movw	r22, r18
     554:	2a e0       	ldi	r18, 0x0A	; 10
     556:	30 e0       	ldi	r19, 0x00	; 0
     558:	40 e0       	ldi	r20, 0x00	; 0
     55a:	50 e0       	ldi	r21, 0x00	; 0
     55c:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <__divmodsi4>
     560:	60 5d       	subi	r22, 0xD0	; 208
     562:	69 8f       	std	Y+25, r22	; 0x19
    
    road_index = (road_index + 1) % ROADLEN;
     564:	80 91 be 02 	lds	r24, 0x02BE
     568:	90 91 bf 02 	lds	r25, 0x02BF
     56c:	01 96       	adiw	r24, 0x01	; 1
     56e:	6f e0       	ldi	r22, 0x0F	; 15
     570:	70 e0       	ldi	r23, 0x00	; 0
     572:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <__divmodhi4>
     576:	90 93 bf 02 	sts	0x02BF, r25
     57a:	80 93 be 02 	sts	0x02BE, r24
    draw_road();
     57e:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <draw_road>
 
	lcd_set_cursor(1, 0);
     582:	81 e0       	ldi	r24, 0x01	; 1
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	60 e0       	ldi	r22, 0x00	; 0
     588:	70 e0       	ldi	r23, 0x00	; 0
     58a:	0e 94 13 05 	call	0xa26	; 0xa26 <lcd_set_cursor>
    lcd_print(game_over_1);
     58e:	ce 01       	movw	r24, r28
     590:	01 96       	adiw	r24, 0x01	; 1
     592:	0e 94 4e 05 	call	0xa9c	; 0xa9c <lcd_print>
	lcd_set_cursor(1, 1);
     596:	81 e0       	ldi	r24, 0x01	; 1
     598:	90 e0       	ldi	r25, 0x00	; 0
     59a:	61 e0       	ldi	r22, 0x01	; 1
     59c:	70 e0       	ldi	r23, 0x00	; 0
     59e:	0e 94 13 05 	call	0xa26	; 0xa26 <lcd_set_cursor>
    lcd_print(game_over_2);
     5a2:	ce 01       	movw	r24, r28
     5a4:	0f 96       	adiw	r24, 0x0f	; 15
     5a6:	0e 94 4e 05 	call	0xa9c	; 0xa9c <lcd_print>
}
     5aa:	6c 96       	adiw	r28, 0x1c	; 28
     5ac:	0f b6       	in	r0, 0x3f	; 63
     5ae:	f8 94       	cli
     5b0:	de bf       	out	0x3e, r29	; 62
     5b2:	0f be       	out	0x3f, r0	; 63
     5b4:	cd bf       	out	0x3d, r28	; 61
     5b6:	cf 91       	pop	r28
     5b8:	df 91       	pop	r29
     5ba:	1f 91       	pop	r17
     5bc:	0f 91       	pop	r16
     5be:	ff 90       	pop	r15
     5c0:	ef 90       	pop	r14
     5c2:	df 90       	pop	r13
     5c4:	cf 90       	pop	r12
     5c6:	bf 90       	pop	r11
     5c8:	af 90       	pop	r10
     5ca:	08 95       	ret

000005cc <game_loop>:
    }    
}

/* Main game loop generating obstacles, drawing the road and checking for crash*/
void game_loop(void)
{
     5cc:	cf 92       	push	r12
     5ce:	df 92       	push	r13
     5d0:	ef 92       	push	r14
     5d2:	ff 92       	push	r15
     5d4:	0f 93       	push	r16
     5d6:	1f 93       	push	r17
     5d8:	cf 93       	push	r28
     5da:	df 93       	push	r29
        
        /*if(!crash){
        }*/
        // Check if car_pos is the same as an Obstacle ( or two lanes obstacles )
        if(car_jump==0)
            crash = (car_pos == road[road_index]) || (road[road_index] == BOTHLANES) ;
     5dc:	cf ea       	ldi	r28, 0xAF	; 175
     5de:	d2 e0       	ldi	r29, 0x02	; 2
     5e0:	ee 24       	eor	r14, r14
     5e2:	ff 24       	eor	r15, r15
     5e4:	cc 24       	eor	r12, r12
     5e6:	dd 24       	eor	r13, r13
     5e8:	c3 94       	inc	r12
        {
            // Put new random obstacle, but first make sure obstacles are avoidable
            // So, check if previous position had an obstacle if so don't put new obstacles
            int prev_obstacle;
            if(road_index==0)
                prev_obstacle = road[ROADLEN-1];
     5ea:	0d eb       	ldi	r16, 0xBD	; 189
     5ec:	12 e0       	ldi	r17, 0x02	; 2
    while (1) {
        
        /*if(!crash){
        }*/
        // Check if car_pos is the same as an Obstacle ( or two lanes obstacles )
        if(car_jump==0)
     5ee:	80 91 94 02 	lds	r24, 0x0294
     5f2:	90 91 95 02 	lds	r25, 0x0295
     5f6:	89 2b       	or	r24, r25
     5f8:	e1 f4       	brne	.+56     	; 0x632 <game_loop+0x66>
            crash = (car_pos == road[road_index]) || (road[road_index] == BOTHLANES) ;
     5fa:	80 91 be 02 	lds	r24, 0x02BE
     5fe:	90 91 bf 02 	lds	r25, 0x02BF
     602:	fe 01       	movw	r30, r28
     604:	e8 0f       	add	r30, r24
     606:	f9 1f       	adc	r31, r25
     608:	e0 81       	ld	r30, Z
     60a:	80 91 c0 02 	lds	r24, 0x02C0
     60e:	e8 17       	cp	r30, r24
     610:	21 f4       	brne	.+8      	; 0x61a <game_loop+0x4e>
     612:	c6 01       	movw	r24, r12
     614:	2c 2d       	mov	r18, r12
     616:	89 2f       	mov	r24, r25
     618:	08 c0       	rjmp	.+16     	; 0x62a <game_loop+0x5e>
     61a:	c7 01       	movw	r24, r14
     61c:	2e 2d       	mov	r18, r14
     61e:	89 2f       	mov	r24, r25
     620:	e3 30       	cpi	r30, 0x03	; 3
     622:	19 f4       	brne	.+6      	; 0x62a <game_loop+0x5e>
     624:	c6 01       	movw	r24, r12
     626:	2c 2d       	mov	r18, r12
     628:	89 2f       	mov	r24, r25
     62a:	20 93 9c 02 	sts	0x029C, r18
     62e:	80 93 9d 02 	sts	0x029D, r24

        if(crash){
     632:	80 91 9c 02 	lds	r24, 0x029C
     636:	90 91 9d 02 	lds	r25, 0x029D
     63a:	89 2b       	or	r24, r25
     63c:	09 f0       	breq	.+2      	; 0x640 <game_loop+0x74>
     63e:	7b c0       	rjmp	.+246    	; 0x736 <game_loop+0x16a>
        else
        {
            // Put new random obstacle, but first make sure obstacles are avoidable
            // So, check if previous position had an obstacle if so don't put new obstacles
            int prev_obstacle;
            if(road_index==0)
     640:	20 91 be 02 	lds	r18, 0x02BE
     644:	30 91 bf 02 	lds	r19, 0x02BF
     648:	21 15       	cp	r18, r1
     64a:	31 05       	cpc	r19, r1
     64c:	21 f4       	brne	.+8      	; 0x656 <game_loop+0x8a>
                prev_obstacle = road[ROADLEN-1];
     64e:	f8 01       	movw	r30, r16
     650:	80 81       	ld	r24, Z
     652:	90 e0       	ldi	r25, 0x00	; 0
     654:	0b c0       	rjmp	.+22     	; 0x66c <game_loop+0xa0>
            else
                prev_obstacle = road[(road_index-1)%ROADLEN];
     656:	c9 01       	movw	r24, r18
     658:	01 97       	sbiw	r24, 0x01	; 1
     65a:	6f e0       	ldi	r22, 0x0F	; 15
     65c:	70 e0       	ldi	r23, 0x00	; 0
     65e:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <__divmodhi4>
     662:	fe 01       	movw	r30, r28
     664:	e8 0f       	add	r30, r24
     666:	f9 1f       	adc	r31, r25
     668:	80 81       	ld	r24, Z
     66a:	90 e0       	ldi	r25, 0x00	; 0
            
            // By default there is no obstacle!
            road[road_index] = 0;
     66c:	fe 01       	movw	r30, r28
     66e:	e2 0f       	add	r30, r18
     670:	f3 1f       	adc	r31, r19
     672:	10 82       	st	Z, r1

            if(prev_obstacle==0){
     674:	89 2b       	or	r24, r25
     676:	91 f4       	brne	.+36     	; 0x69c <game_loop+0xd0>
                int new_obstacle = rrand(MAXOBSTACLES) + 1; // Get random pattern of obstacles (1,2,3 or otherwise)
     678:	8f e0       	ldi	r24, 0x0F	; 15
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	0e 94 e6 05 	call	0xbcc	; 0xbcc <rrand>
     680:	9c 01       	movw	r18, r24
     682:	2f 5f       	subi	r18, 0xFF	; 255
     684:	3f 4f       	sbci	r19, 0xFF	; 255
                if(new_obstacle<=3){
     686:	24 30       	cpi	r18, 0x04	; 4
     688:	31 05       	cpc	r19, r1
     68a:	44 f4       	brge	.+16     	; 0x69c <game_loop+0xd0>
                    road[road_index] = new_obstacle; // Set the pattern of the new obstacle
     68c:	80 91 be 02 	lds	r24, 0x02BE
     690:	90 91 bf 02 	lds	r25, 0x02BF
     694:	fe 01       	movw	r30, r28
     696:	e8 0f       	add	r30, r24
     698:	f9 1f       	adc	r31, r25
     69a:	20 83       	st	Z, r18
                }
            }
            
            road_index = (road_index + 1) % ROADLEN;            
     69c:	80 91 be 02 	lds	r24, 0x02BE
     6a0:	90 91 bf 02 	lds	r25, 0x02BF
     6a4:	01 96       	adiw	r24, 0x01	; 1
     6a6:	6f e0       	ldi	r22, 0x0F	; 15
     6a8:	70 e0       	ldi	r23, 0x00	; 0
     6aa:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <__divmodhi4>
     6ae:	90 93 bf 02 	sts	0x02BF, r25
     6b2:	80 93 be 02 	sts	0x02BE, r24
            draw_road();
     6b6:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <draw_road>
            
            if(car_jump)
     6ba:	80 91 94 02 	lds	r24, 0x0294
     6be:	90 91 95 02 	lds	r25, 0x0295
     6c2:	00 97       	sbiw	r24, 0x00	; 0
     6c4:	49 f0       	breq	.+18     	; 0x6d8 <game_loop+0x10c>
            {
                car_jump = (car_jump+1)%CARJUMPSTEPS;
     6c6:	01 96       	adiw	r24, 0x01	; 1
     6c8:	64 e0       	ldi	r22, 0x04	; 4
     6ca:	70 e0       	ldi	r23, 0x00	; 0
     6cc:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <__divmodhi4>
     6d0:	90 93 95 02 	sts	0x0295, r25
     6d4:	80 93 94 02 	sts	0x0294, r24
            }
            
            delay_msec(step_duration);
     6d8:	80 91 9a 02 	lds	r24, 0x029A
     6dc:	90 91 9b 02 	lds	r25, 0x029B
     6e0:	0e 94 6d 05 	call	0xada	; 0xada <delay_msec>
            if (step_duration > MINSTEPDURATION) {
     6e4:	80 91 9a 02 	lds	r24, 0x029A
     6e8:	90 91 9b 02 	lds	r25, 0x029B
     6ec:	87 39       	cpi	r24, 0x97	; 151
     6ee:	91 05       	cpc	r25, r1
     6f0:	2c f0       	brlt	.+10     	; 0x6fc <game_loop+0x130>
                step_duration--; 
     6f2:	01 97       	sbiw	r24, 0x01	; 1
     6f4:	90 93 9b 02 	sts	0x029B, r25
     6f8:	80 93 9a 02 	sts	0x029A, r24
            }
            score += step_duration;
     6fc:	20 91 9a 02 	lds	r18, 0x029A
     700:	30 91 9b 02 	lds	r19, 0x029B
     704:	44 27       	eor	r20, r20
     706:	37 fd       	sbrc	r19, 7
     708:	40 95       	com	r20
     70a:	54 2f       	mov	r21, r20
     70c:	80 91 96 02 	lds	r24, 0x0296
     710:	90 91 97 02 	lds	r25, 0x0297
     714:	a0 91 98 02 	lds	r26, 0x0298
     718:	b0 91 99 02 	lds	r27, 0x0299
     71c:	82 0f       	add	r24, r18
     71e:	93 1f       	adc	r25, r19
     720:	a4 1f       	adc	r26, r20
     722:	b5 1f       	adc	r27, r21
     724:	80 93 96 02 	sts	0x0296, r24
     728:	90 93 97 02 	sts	0x0297, r25
     72c:	a0 93 98 02 	sts	0x0298, r26
     730:	b0 93 99 02 	sts	0x0299, r27
     734:	5c cf       	rjmp	.-328    	; 0x5ee <game_loop+0x22>

        }
    }
}
     736:	df 91       	pop	r29
     738:	cf 91       	pop	r28
     73a:	1f 91       	pop	r17
     73c:	0f 91       	pop	r16
     73e:	ff 90       	pop	r15
     740:	ef 90       	pop	r14
     742:	df 90       	pop	r13
     744:	cf 90       	pop	r12
     746:	08 95       	ret

00000748 <wait_car_jump>:
// Wait until proper Jump button press/release
void wait_car_jump(void)
{
    while (1) 
    {
        delay_msec(50);
     748:	82 e3       	ldi	r24, 0x32	; 50
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	0e 94 6d 05 	call	0xada	; 0xada <delay_msec>
        if(car_jump) {
     750:	80 91 94 02 	lds	r24, 0x0294
     754:	90 91 95 02 	lds	r25, 0x0295
     758:	89 2b       	or	r24, r25
     75a:	b1 f3       	breq	.-20     	; 0x748 <wait_car_jump>
            car_jump = 0;
     75c:	10 92 95 02 	sts	0x0295, r1
     760:	10 92 94 02 	sts	0x0294, r1
            return;
        }
    }    
}
     764:	08 95       	ret

00000766 <reset_state>:
}

// Reset game state and clear previous display
void reset_state()
{
    int seed = TCNT1;
     766:	8c b5       	in	r24, 0x2c	; 44
     768:	9d b5       	in	r25, 0x2d	; 45
    srand(seed);
     76a:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <srand>
    
    car_pos = RIGHTLANE; // Initially in the right lane
     76e:	81 e0       	ldi	r24, 0x01	; 1
     770:	80 93 c0 02 	sts	0x02C0, r24
    step_duration = MAXSTEPDURATION; // Start from the slowest step speed ( maximum duration )
     774:	88 e5       	ldi	r24, 0x58	; 88
     776:	92 e0       	ldi	r25, 0x02	; 2
     778:	90 93 9b 02 	sts	0x029B, r25
     77c:	80 93 9a 02 	sts	0x029A, r24
     780:	ef ea       	ldi	r30, 0xAF	; 175
     782:	f2 e0       	ldi	r31, 0x02	; 2
    
    for(int i=0; i<ROADLEN;i++)
     784:	8e eb       	ldi	r24, 0xBE	; 190
     786:	92 e0       	ldi	r25, 0x02	; 2
    {
        road[i] = 0;
     788:	11 92       	st	Z+, r1
    srand(seed);
    
    car_pos = RIGHTLANE; // Initially in the right lane
    step_duration = MAXSTEPDURATION; // Start from the slowest step speed ( maximum duration )
    
    for(int i=0; i<ROADLEN;i++)
     78a:	e8 17       	cp	r30, r24
     78c:	f9 07       	cpc	r31, r25
     78e:	e1 f7       	brne	.-8      	; 0x788 <reset_state+0x22>
    {
        road[i] = 0;
    }
    
    line_buffer[ROADLEN+1] = '\0';
     790:	10 92 ae 02 	sts	0x02AE, r1
    car_jump = 0;
     794:	10 92 95 02 	sts	0x0295, r1
     798:	10 92 94 02 	sts	0x0294, r1
    crash = 0;
     79c:	10 92 9d 02 	sts	0x029D, r1
     7a0:	10 92 9c 02 	sts	0x029C, r1
    
    road_index = 0;
     7a4:	10 92 bf 02 	sts	0x02BF, r1
     7a8:	10 92 be 02 	sts	0x02BE, r1
    score = 0 ;
     7ac:	10 92 96 02 	sts	0x0296, r1
     7b0:	10 92 97 02 	sts	0x0297, r1
     7b4:	10 92 98 02 	sts	0x0298, r1
     7b8:	10 92 99 02 	sts	0x0299, r1
    
    lcd_write_ctrl(LCD_CLEAR);
     7bc:	81 e0       	ldi	r24, 0x01	; 1
     7be:	90 e0       	ldi	r25, 0x00	; 0
     7c0:	60 e0       	ldi	r22, 0x00	; 0
     7c2:	70 e0       	ldi	r23, 0x00	; 0
     7c4:	0e 94 b5 04 	call	0x96a	; 0x96a <lcd_write>
}
     7c8:	08 95       	ret

000007ca <setup>:
    }

}

void setup(void)
{
     7ca:	0f 93       	push	r16
     7cc:	1f 93       	push	r17
     7ce:	cf 93       	push	r28
     7d0:	df 93       	push	r29
     7d2:	0a e5       	ldi	r16, 0x5A	; 90
     7d4:	11 e0       	ldi	r17, 0x01	; 1
     7d6:	c0 e0       	ldi	r28, 0x00	; 0
     7d8:	d0 e0       	ldi	r29, 0x00	; 0
    for (int i = 0; i < NGLYPHS; i++) {
        lcd_create_glyph(i + 1, glyphs[i]);	// create glyphs
     7da:	21 96       	adiw	r28, 0x01	; 1
     7dc:	ce 01       	movw	r24, r28
     7de:	b8 01       	movw	r22, r16
     7e0:	0e 94 28 05 	call	0xa50	; 0xa50 <lcd_create_glyph>
     7e4:	08 5f       	subi	r16, 0xF8	; 248
     7e6:	1f 4f       	sbci	r17, 0xFF	; 255

}

void setup(void)
{
    for (int i = 0; i < NGLYPHS; i++) {
     7e8:	c5 30       	cpi	r28, 0x05	; 5
     7ea:	d1 05       	cpc	r29, r1
     7ec:	b1 f7       	brne	.-20     	; 0x7da <setup+0x10>
        lcd_create_glyph(i + 1, glyphs[i]);	// create glyphs
    }
    
    lcd_write_ctrl(LCD_ON);
     7ee:	8c e0       	ldi	r24, 0x0C	; 12
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	60 e0       	ldi	r22, 0x00	; 0
     7f4:	70 e0       	ldi	r23, 0x00	; 0
     7f6:	0e 94 b5 04 	call	0x96a	; 0x96a <lcd_write>
    lcd_write_ctrl(LCD_CLEAR);
     7fa:	81 e0       	ldi	r24, 0x01	; 1
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	60 e0       	ldi	r22, 0x00	; 0
     800:	70 e0       	ldi	r23, 0x00	; 0
     802:	0e 94 b5 04 	call	0x96a	; 0x96a <lcd_write>
    
}
     806:	df 91       	pop	r29
     808:	cf 91       	pop	r28
     80a:	1f 91       	pop	r17
     80c:	0f 91       	pop	r16
     80e:	08 95       	ret

00000810 <init>:


void init(void) {

   		/* estetään kaikki keskeytykset */
		cli();
     810:	f8 94       	cli

        /* kaiutin pinnit ulostuloksi */
        DDRE  |=  (1 << PE4) | (1 << PE5);
     812:	e2 e2       	ldi	r30, 0x22	; 34
     814:	f0 e0       	ldi	r31, 0x00	; 0
     816:	80 81       	ld	r24, Z
     818:	80 63       	ori	r24, 0x30	; 48
     81a:	80 83       	st	Z, r24
        /* pinni PE4 nollataan */
        PORTE &= ~(1 << PE4);
     81c:	e3 e2       	ldi	r30, 0x23	; 35
     81e:	f0 e0       	ldi	r31, 0x00	; 0
     820:	80 81       	ld	r24, Z
     822:	8f 7e       	andi	r24, 0xEF	; 239
     824:	80 83       	st	Z, r24
        /* pinni PE5 asetetaan */
        PORTE |=  (1 << PE5);   
     826:	80 81       	ld	r24, Z
     828:	80 62       	ori	r24, 0x20	; 32
     82a:	80 83       	st	Z, r24
        
		/* set Timer1 to CTC mode */
        TCCR1A &= ~( (1 << WGM11) | (1 << WGM10) );
     82c:	ef e4       	ldi	r30, 0x4F	; 79
     82e:	f0 e0       	ldi	r31, 0x00	; 0
     830:	80 81       	ld	r24, Z
     832:	8c 7f       	andi	r24, 0xFC	; 252
     834:	80 83       	st	Z, r24
        TCCR1B |=    (1 << WGM12);
     836:	ee e4       	ldi	r30, 0x4E	; 78
     838:	f0 e0       	ldi	r31, 0x00	; 0
     83a:	80 81       	ld	r24, Z
     83c:	88 60       	ori	r24, 0x08	; 8
     83e:	80 83       	st	Z, r24
        TCCR1B &=   ~(1 << WGM13);
     840:	80 81       	ld	r24, Z
     842:	8f 7e       	andi	r24, 0xEF	; 239
     844:	80 83       	st	Z, r24
		/* Set Timer1 prescaler (16 000 000 / 1024) = 15625 Hz */
        TCCR1B |= (1 << CS12) | (1 << CS10);
     846:	80 81       	ld	r24, Z
     848:	85 60       	ori	r24, 0x05	; 5
     84a:	80 83       	st	Z, r24

        /* set OCR1A register value to 0x003e (62 ~ 15625/250) (corresponds to ~250hz) */
		/* set OCR1A register value to 0x0013 (19 ~ 15625/800) (corresponds to ~800hz) */
        /* OCR1AH = 0x00; */
        /* OCR1AL = 0x3e; //62 */
        OCR1AH = 0x00;
     84c:	1b bc       	out	0x2b, r1	; 43
        OCR1AL = 0x13; //19
     84e:	83 e1       	ldi	r24, 0x13	; 19
     850:	8a bd       	out	0x2a, r24	; 42

		/* enable/disable Output Compare A Match Interrupt for Timer 1*/
        //TIMSK |= (1 << OCIE1A);
        TIMSK &= ~(1 << OCIE1A);
     852:	a7 e5       	ldi	r26, 0x57	; 87
     854:	b0 e0       	ldi	r27, 0x00	; 0
     856:	8c 91       	ld	r24, X
     858:	8f 7e       	andi	r24, 0xEF	; 239
     85a:	8c 93       	st	X, r24

        
		/* set Timer2 to CTC mode, and normal port operation */
        TCCR2 &= ~( (1 << WGM20) | (1 << COM21) | (1 << COM20));
     85c:	e5 e4       	ldi	r30, 0x45	; 69
     85e:	f0 e0       	ldi	r31, 0x00	; 0
     860:	80 81       	ld	r24, Z
     862:	8f 78       	andi	r24, 0x8F	; 143
     864:	80 83       	st	Z, r24
        TCCR2 |=  (1 << WGM21);
     866:	80 81       	ld	r24, Z
     868:	88 60       	ori	r24, 0x08	; 8
     86a:	80 83       	st	Z, r24
        /* Set Timer2 prescaler (16 000 000 / 1024) = 15625 Hz */
        TCCR2 |= (1 << CS22) | (1 << CS20);
     86c:	80 81       	ld	r24, Z
     86e:	85 60       	ori	r24, 0x05	; 5
     870:	80 83       	st	Z, r24
        TCCR2 &= ~(1<< CS21);
     872:	80 81       	ld	r24, Z
     874:	8d 7f       	andi	r24, 0xFD	; 253
     876:	80 83       	st	Z, r24
        /* set OCR2 register value to 0x003e (62 ~ 15625/250) (corresponds to ~250hz) */
        OCR2 = 0x3e; //62
     878:	8e e3       	ldi	r24, 0x3E	; 62
     87a:	83 bd       	out	0x23, r24	; 35
        
		/* enable Output Compare Match Interrupt for Timer 2*/
        TIMSK |= (1 << OCIE2);
     87c:	8c 91       	ld	r24, X
     87e:	80 68       	ori	r24, 0x80	; 128
     880:	8c 93       	st	X, r24
        
		/* näppäin pinnit sisääntuloksi */
		DDRA &= ~(1 << PA0);
     882:	ea e3       	ldi	r30, 0x3A	; 58
     884:	f0 e0       	ldi	r31, 0x00	; 0
     886:	80 81       	ld	r24, Z
     888:	8e 7f       	andi	r24, 0xFE	; 254
     88a:	80 83       	st	Z, r24
		DDRA &= ~(1 << PA2);
     88c:	80 81       	ld	r24, Z
     88e:	8b 7f       	andi	r24, 0xFB	; 251
     890:	80 83       	st	Z, r24
		DDRA &= ~(1 << PA4);
     892:	80 81       	ld	r24, Z
     894:	8f 7e       	andi	r24, 0xEF	; 239
     896:	80 83       	st	Z, r24

		/* rele/led pinni ulostuloksi */
		DDRA |= (1 << PA6);
     898:	80 81       	ld	r24, Z
     89a:	80 64       	ori	r24, 0x40	; 64
     89c:	80 83       	st	Z, r24

		/* lcd-näytön alustaminen */
		lcd_init();
     89e:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <lcd_init>
        
}
     8a2:	08 95       	ret

000008a4 <main>:
    lcd_print(game_over_2);
}

int main(void) 
{
    init();
     8a4:	0e 94 08 04 	call	0x810	; 0x810 <init>
    sei();
     8a8:	78 94       	sei
    
    setup();
     8aa:	0e 94 e5 03 	call	0x7ca	; 0x7ca <setup>
    
    // Basic state machine (0) Intro -> (1) Wait to Start -> (2) Game Loop -> (3) Game Over
    //                                   ^_____________________________________|
    // (0)
    show_intro();
     8ae:	0e 94 a9 01 	call	0x352	; 0x352 <show_intro>
    
    // Stepping through the states
    while(1)
    {
        // (1)
        wait_car_jump();
     8b2:	0e 94 a4 03 	call	0x748	; 0x748 <wait_car_jump>
        
        reset_state();
     8b6:	0e 94 b3 03 	call	0x766	; 0x766 <reset_state>
        
        // (2)
        game_loop();
     8ba:	0e 94 e6 02 	call	0x5cc	; 0x5cc <game_loop>
        
        // (3)
        show_game_over();
     8be:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <show_game_over>
     8c2:	f7 cf       	rjmp	.-18     	; 0x8b2 <main+0xe>

000008c4 <pulse>:
static int
pulse(void)
{
  int v;

  PORTC |= 4;                /* EN = 1 */
     8c4:	e5 e3       	ldi	r30, 0x35	; 53
     8c6:	f0 e0       	ldi	r31, 0x00	; 0
     8c8:	80 81       	ld	r24, Z
     8ca:	84 60       	ori	r24, 0x04	; 4
     8cc:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     8ce:	80 e9       	ldi	r24, 0x90	; 144
     8d0:	91 e0       	ldi	r25, 0x01	; 1
     8d2:	01 97       	sbiw	r24, 0x01	; 1
     8d4:	f1 f7       	brne	.-4      	; 0x8d2 <pulse+0xe>
  _delay_ms(0.1);            /* short delay */
  v = PINC>>4;               /* read data bus */
     8d6:	83 b3       	in	r24, 0x13	; 19
  PORTC &= ~4;               /* EN = 0 */
     8d8:	90 81       	ld	r25, Z
     8da:	9b 7f       	andi	r25, 0xFB	; 251
     8dc:	90 83       	st	Z, r25

  return v;
}
     8de:	82 95       	swap	r24
     8e0:	8f 70       	andi	r24, 0x0F	; 15
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	08 95       	ret

000008e6 <read_nibble>:
}

static int
read_nibble(int rs)
{
  DDRC = 0x0F;               /* set data pins to input */
     8e6:	9f e0       	ldi	r25, 0x0F	; 15
     8e8:	94 bb       	out	0x14, r25	; 20
  PORTC = rs|2;              /* set register */
     8ea:	82 60       	ori	r24, 0x02	; 2
     8ec:	85 bb       	out	0x15, r24	; 21
  return pulse();            /* read pulse */
     8ee:	0e 94 62 04 	call	0x8c4	; 0x8c4 <pulse>
}
     8f2:	08 95       	ret

000008f4 <read_byte>:
}

/* read a byte without waiting for the busy flag. */
static int
read_byte(int rs)
{
     8f4:	ef 92       	push	r14
     8f6:	ff 92       	push	r15
     8f8:	0f 93       	push	r16
     8fa:	1f 93       	push	r17
     8fc:	7c 01       	movw	r14, r24
  int v;
  
  v = read_nibble(rs)<<4;
     8fe:	0e 94 73 04 	call	0x8e6	; 0x8e6 <read_nibble>
     902:	8c 01       	movw	r16, r24
     904:	02 95       	swap	r16
     906:	12 95       	swap	r17
     908:	10 7f       	andi	r17, 0xF0	; 240
     90a:	10 27       	eor	r17, r16
     90c:	00 7f       	andi	r16, 0xF0	; 240
     90e:	10 27       	eor	r17, r16
  v|= read_nibble(rs);
     910:	c7 01       	movw	r24, r14
     912:	0e 94 73 04 	call	0x8e6	; 0x8e6 <read_nibble>
     916:	08 2b       	or	r16, r24
     918:	19 2b       	or	r17, r25

  return v;
}
     91a:	80 2f       	mov	r24, r16
     91c:	91 2f       	mov	r25, r17
     91e:	1f 91       	pop	r17
     920:	0f 91       	pop	r16
     922:	ff 90       	pop	r15
     924:	ef 90       	pop	r14
     926:	08 95       	ret

00000928 <write_nibble>:
}

static void
write_nibble(int v, int rs)
{
  DDRC = 0xFF;               /* set data pins to output */
     928:	2f ef       	ldi	r18, 0xFF	; 255
     92a:	24 bb       	out	0x14, r18	; 20
  PORTC = rs|((v&0xF)<<4);   /* set register and data */
     92c:	82 95       	swap	r24
     92e:	92 95       	swap	r25
     930:	90 7f       	andi	r25, 0xF0	; 240
     932:	98 27       	eor	r25, r24
     934:	80 7f       	andi	r24, 0xF0	; 240
     936:	98 27       	eor	r25, r24
     938:	68 2b       	or	r22, r24
     93a:	65 bb       	out	0x15, r22	; 21
  pulse();                   /* write pulse */
     93c:	0e 94 62 04 	call	0x8c4	; 0x8c4 <pulse>
}
     940:	08 95       	ret

00000942 <wait>:

/* wait until the busy flag is clear. */
void
wait(void)
{
  while (read_byte(0)&0x80)
     942:	80 e0       	ldi	r24, 0x00	; 0
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <read_byte>
     94a:	88 23       	and	r24, r24
     94c:	d4 f3       	brlt	.-12     	; 0x942 <wait>
    ;
}
     94e:	08 95       	ret

00000950 <lcd_read>:
}

/* read a byte from lcd register rs. */
int
lcd_read(int rs)
{
     950:	0f 93       	push	r16
     952:	1f 93       	push	r17
  int v;
  
  v = read_byte(rs);
     954:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <read_byte>
     958:	18 2f       	mov	r17, r24
     95a:	09 2f       	mov	r16, r25
  wait();
     95c:	0e 94 a1 04 	call	0x942	; 0x942 <wait>

  return v;
}
     960:	81 2f       	mov	r24, r17
     962:	90 2f       	mov	r25, r16
     964:	1f 91       	pop	r17
     966:	0f 91       	pop	r16
     968:	08 95       	ret

0000096a <lcd_write>:
}

/* write a byte into register rs (0 = control, 1 = data). */
void
lcd_write(int v, int rs)
{
     96a:	ef 92       	push	r14
     96c:	ff 92       	push	r15
     96e:	0f 93       	push	r16
     970:	1f 93       	push	r17
     972:	8c 01       	movw	r16, r24
     974:	7b 01       	movw	r14, r22
  write_nibble(v>>4,rs);     /* first the high nibble */
     976:	95 95       	asr	r25
     978:	87 95       	ror	r24
     97a:	95 95       	asr	r25
     97c:	87 95       	ror	r24
     97e:	95 95       	asr	r25
     980:	87 95       	ror	r24
     982:	95 95       	asr	r25
     984:	87 95       	ror	r24
     986:	0e 94 94 04 	call	0x928	; 0x928 <write_nibble>
  write_nibble(v,rs);        /* and then the low */
     98a:	c8 01       	movw	r24, r16
     98c:	b7 01       	movw	r22, r14
     98e:	0e 94 94 04 	call	0x928	; 0x928 <write_nibble>
  wait();
     992:	0e 94 a1 04 	call	0x942	; 0x942 <wait>
}
     996:	1f 91       	pop	r17
     998:	0f 91       	pop	r16
     99a:	ff 90       	pop	r15
     99c:	ef 90       	pop	r14
     99e:	08 95       	ret

000009a0 <lcd_init>:


/* initialize lcd (see HD44780 datasheet) */
void
lcd_init(void)
{
     9a0:	0f 93       	push	r16
     9a2:	1f 93       	push	r17
	/* set interface to be 4 bits long */
  write_nibble(3,0); _delay_ms(5);
     9a4:	83 e0       	ldi	r24, 0x03	; 3
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	60 e0       	ldi	r22, 0x00	; 0
     9aa:	70 e0       	ldi	r23, 0x00	; 0
     9ac:	0e 94 94 04 	call	0x928	; 0x928 <write_nibble>
     9b0:	00 e2       	ldi	r16, 0x20	; 32
     9b2:	1e e4       	ldi	r17, 0x4E	; 78
     9b4:	c8 01       	movw	r24, r16
     9b6:	01 97       	sbiw	r24, 0x01	; 1
     9b8:	f1 f7       	brne	.-4      	; 0x9b6 <lcd_init+0x16>
  write_nibble(3,0); _delay_ms(5);
     9ba:	83 e0       	ldi	r24, 0x03	; 3
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	60 e0       	ldi	r22, 0x00	; 0
     9c0:	70 e0       	ldi	r23, 0x00	; 0
     9c2:	0e 94 94 04 	call	0x928	; 0x928 <write_nibble>
     9c6:	c8 01       	movw	r24, r16
     9c8:	01 97       	sbiw	r24, 0x01	; 1
     9ca:	f1 f7       	brne	.-4      	; 0x9c8 <lcd_init+0x28>
  write_nibble(3,0); _delay_ms(5);
     9cc:	83 e0       	ldi	r24, 0x03	; 3
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	60 e0       	ldi	r22, 0x00	; 0
     9d2:	70 e0       	ldi	r23, 0x00	; 0
     9d4:	0e 94 94 04 	call	0x928	; 0x928 <write_nibble>
     9d8:	c8 01       	movw	r24, r16
     9da:	01 97       	sbiw	r24, 0x01	; 1
     9dc:	f1 f7       	brne	.-4      	; 0x9da <lcd_init+0x3a>
  write_nibble(2,0); _delay_ms(5);
     9de:	82 e0       	ldi	r24, 0x02	; 2
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	60 e0       	ldi	r22, 0x00	; 0
     9e4:	70 e0       	ldi	r23, 0x00	; 0
     9e6:	0e 94 94 04 	call	0x928	; 0x928 <write_nibble>
     9ea:	c8 01       	movw	r24, r16
     9ec:	01 97       	sbiw	r24, 0x01	; 1
     9ee:	f1 f7       	brne	.-4      	; 0x9ec <lcd_init+0x4c>

	/* function set: set number of lines (bit 3) and font (bit 2) */
  lcd_write_ctrl(LCD_FUNCTION|0x0C);
     9f0:	8c e2       	ldi	r24, 0x2C	; 44
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	60 e0       	ldi	r22, 0x00	; 0
     9f6:	70 e0       	ldi	r23, 0x00	; 0
     9f8:	0e 94 b5 04 	call	0x96a	; 0x96a <lcd_write>
  lcd_write_ctrl(LCD_OFF);
     9fc:	88 e0       	ldi	r24, 0x08	; 8
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	60 e0       	ldi	r22, 0x00	; 0
     a02:	70 e0       	ldi	r23, 0x00	; 0
     a04:	0e 94 b5 04 	call	0x96a	; 0x96a <lcd_write>
  lcd_write_ctrl(LCD_CLEAR);
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	60 e0       	ldi	r22, 0x00	; 0
     a0e:	70 e0       	ldi	r23, 0x00	; 0
     a10:	0e 94 b5 04 	call	0x96a	; 0x96a <lcd_write>
	/* entry mode set: increment DDRAM pointer when a character is written */
  lcd_write_ctrl(LCD_MODE|0x02);
     a14:	86 e0       	ldi	r24, 0x06	; 6
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	60 e0       	ldi	r22, 0x00	; 0
     a1a:	70 e0       	ldi	r23, 0x00	; 0
     a1c:	0e 94 b5 04 	call	0x96a	; 0x96a <lcd_write>
}
     a20:	1f 91       	pop	r17
     a22:	0f 91       	pop	r16
     a24:	08 95       	ret

00000a26 <lcd_set_cursor>:


/* Set the cursor (by setting DDRAM address) */
void
lcd_set_cursor(unsigned int col, unsigned int row)
{
     a26:	ac 01       	movw	r20, r24
    if(row > NUMROWS-1) row = NUMROWS - 1;
    char _row_offset = _row_offsets[row];
    
    lcd_write_ctrl(LCD_DDRAM | (col + _row_offset));
     a28:	86 2f       	mov	r24, r22
     a2a:	97 2f       	mov	r25, r23
     a2c:	00 97       	sbiw	r24, 0x00	; 0
     a2e:	11 f0       	breq	.+4      	; 0xa34 <lcd_set_cursor+0xe>
     a30:	81 e0       	ldi	r24, 0x01	; 1
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	fc 01       	movw	r30, r24
     a36:	ec 57       	subi	r30, 0x7C	; 124
     a38:	fe 4f       	sbci	r31, 0xFE	; 254
     a3a:	80 81       	ld	r24, Z
     a3c:	9a 01       	movw	r18, r20
     a3e:	28 0f       	add	r18, r24
     a40:	31 1d       	adc	r19, r1
     a42:	c9 01       	movw	r24, r18
     a44:	80 68       	ori	r24, 0x80	; 128
     a46:	60 e0       	ldi	r22, 0x00	; 0
     a48:	70 e0       	ldi	r23, 0x00	; 0
     a4a:	0e 94 b5 04 	call	0x96a	; 0x96a <lcd_write>
     a4e:	08 95       	ret

00000a50 <lcd_create_glyph>:
const unsigned int NUMROWS = 2;
/* First character position mapping to DDRAM address for each LCD row */
char _row_offsets[]= {0x00, 0x40};

/* Write new character to CGRAM */
void lcd_create_glyph(int loc, const char* charmap){
     a50:	0f 93       	push	r16
     a52:	1f 93       	push	r17
     a54:	cf 93       	push	r28
     a56:	df 93       	push	r29
     a58:	8b 01       	movw	r16, r22
    // Using 5 x 8 character maps, then only 8 characters allowed
    loc &=  0x07;
    
    // Send Set CGRAM address instruction
    lcd_write_ctrl( LCD_CGRAM | (loc<<3) );
     a5a:	87 70       	andi	r24, 0x07	; 7
     a5c:	90 70       	andi	r25, 0x00	; 0
     a5e:	88 0f       	add	r24, r24
     a60:	99 1f       	adc	r25, r25
     a62:	88 0f       	add	r24, r24
     a64:	99 1f       	adc	r25, r25
     a66:	88 0f       	add	r24, r24
     a68:	99 1f       	adc	r25, r25
     a6a:	80 64       	ori	r24, 0x40	; 64
     a6c:	60 e0       	ldi	r22, 0x00	; 0
     a6e:	70 e0       	ldi	r23, 0x00	; 0
     a70:	0e 94 b5 04 	call	0x96a	; 0x96a <lcd_write>
     a74:	c0 e0       	ldi	r28, 0x00	; 0
     a76:	d0 e0       	ldi	r29, 0x00	; 0
    
    // Address Counter automatically increment, 
    // so we start sending the character row by row
    for(int i=0; i<8; i++){
        lcd_write_data( charmap[i] );
     a78:	f8 01       	movw	r30, r16
     a7a:	ec 0f       	add	r30, r28
     a7c:	fd 1f       	adc	r31, r29
     a7e:	80 81       	ld	r24, Z
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	61 e0       	ldi	r22, 0x01	; 1
     a84:	70 e0       	ldi	r23, 0x00	; 0
     a86:	0e 94 b5 04 	call	0x96a	; 0x96a <lcd_write>
    // Send Set CGRAM address instruction
    lcd_write_ctrl( LCD_CGRAM | (loc<<3) );
    
    // Address Counter automatically increment, 
    // so we start sending the character row by row
    for(int i=0; i<8; i++){
     a8a:	21 96       	adiw	r28, 0x01	; 1
     a8c:	c8 30       	cpi	r28, 0x08	; 8
     a8e:	d1 05       	cpc	r29, r1
     a90:	99 f7       	brne	.-26     	; 0xa78 <lcd_create_glyph+0x28>
        lcd_write_data( charmap[i] );
    }
}
     a92:	df 91       	pop	r29
     a94:	cf 91       	pop	r28
     a96:	1f 91       	pop	r17
     a98:	0f 91       	pop	r16
     a9a:	08 95       	ret

00000a9c <lcd_print>:

/* Print a null-terminated string to the LCD from the current position */
void
lcd_print(const char* buffer){
     a9c:	0f 93       	push	r16
     a9e:	1f 93       	push	r17
     aa0:	cf 93       	push	r28
     aa2:	df 93       	push	r29
     aa4:	8c 01       	movw	r16, r24
    unsigned int size = strlen(buffer);
     aa6:	a8 2f       	mov	r26, r24
     aa8:	b1 2f       	mov	r27, r17
     aaa:	fd 01       	movw	r30, r26
     aac:	01 90       	ld	r0, Z+
     aae:	00 20       	and	r0, r0
     ab0:	e9 f7       	brne	.-6      	; 0xaac <lcd_print+0x10>
     ab2:	31 97       	sbiw	r30, 0x01	; 1
     ab4:	ef 01       	movw	r28, r30
     ab6:	ca 1b       	sub	r28, r26
     ab8:	db 0b       	sbc	r29, r27
    while(size--){
     aba:	51 f0       	breq	.+20     	; 0xad0 <lcd_print+0x34>
        lcd_write_data( *buffer++ );
     abc:	f8 01       	movw	r30, r16
     abe:	81 91       	ld	r24, Z+
     ac0:	8f 01       	movw	r16, r30
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	61 e0       	ldi	r22, 0x01	; 1
     ac6:	70 e0       	ldi	r23, 0x00	; 0
     ac8:	0e 94 b5 04 	call	0x96a	; 0x96a <lcd_write>
     acc:	21 97       	sbiw	r28, 0x01	; 1

/* Print a null-terminated string to the LCD from the current position */
void
lcd_print(const char* buffer){
    unsigned int size = strlen(buffer);
    while(size--){
     ace:	b1 f7       	brne	.-20     	; 0xabc <lcd_print+0x20>
        lcd_write_data( *buffer++ );
    }
}
     ad0:	df 91       	pop	r29
     ad2:	cf 91       	pop	r28
     ad4:	1f 91       	pop	r17
     ad6:	0f 91       	pop	r16
     ad8:	08 95       	ret

00000ada <delay_msec>:
#include <stdlib.h>

/* Implement more flexible but less acurate delay since maximum delay of provided _delay_ms is 262.14 ms / F_CPU in MHz*/
/* The provided delay is chunked into 100ms delays hopefully not hitting _delay_ms limit */
void delay_msec(int ms)
{
     ada:	af 92       	push	r10
     adc:	bf 92       	push	r11
     ade:	cf 92       	push	r12
     ae0:	df 92       	push	r13
     ae2:	ef 92       	push	r14
     ae4:	ff 92       	push	r15
     ae6:	0f 93       	push	r16
     ae8:	1f 93       	push	r17
     aea:	8c 01       	movw	r16, r24
    int s = ms/100;
     aec:	64 e6       	ldi	r22, 0x64	; 100
     aee:	70 e0       	ldi	r23, 0x00	; 0
     af0:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <__divmodhi4>
     af4:	86 2f       	mov	r24, r22
     af6:	97 2f       	mov	r25, r23
     af8:	dc 01       	movw	r26, r24
    int rem = ms - 100*s;
    for(;s>0;s--){
     afa:	1a 16       	cp	r1, r26
     afc:	1b 06       	cpc	r1, r27
     afe:	8c f4       	brge	.+34     	; 0xb22 <delay_msec+0x48>
     b00:	bd 01       	movw	r22, r26
     b02:	e8 ee       	ldi	r30, 0xE8	; 232
     b04:	f3 e0       	ldi	r31, 0x03	; 3
     b06:	40 e9       	ldi	r20, 0x90	; 144
     b08:	51 e0       	ldi	r21, 0x01	; 1
     b0a:	9f 01       	movw	r18, r30
     b0c:	ca 01       	movw	r24, r20
     b0e:	01 97       	sbiw	r24, 0x01	; 1
     b10:	f1 f7       	brne	.-4      	; 0xb0e <delay_msec+0x34>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b12:	21 50       	subi	r18, 0x01	; 1
     b14:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b16:	d1 f7       	brne	.-12     	; 0xb0c <delay_msec+0x32>
     b18:	61 50       	subi	r22, 0x01	; 1
     b1a:	70 40       	sbci	r23, 0x00	; 0
     b1c:	16 16       	cp	r1, r22
     b1e:	17 06       	cpc	r1, r23
     b20:	a4 f3       	brlt	.-24     	; 0xb0a <delay_msec+0x30>
        _delay_ms(100);
    }
    
    _delay_ms(rem); 
     b22:	8c e9       	ldi	r24, 0x9C	; 156
     b24:	9f ef       	ldi	r25, 0xFF	; 255
     b26:	a8 9f       	mul	r26, r24
     b28:	b0 01       	movw	r22, r0
     b2a:	a9 9f       	mul	r26, r25
     b2c:	70 0d       	add	r23, r0
     b2e:	b8 9f       	mul	r27, r24
     b30:	70 0d       	add	r23, r0
     b32:	11 24       	eor	r1, r1
     b34:	60 0f       	add	r22, r16
     b36:	71 1f       	adc	r23, r17
     b38:	88 27       	eor	r24, r24
     b3a:	77 fd       	sbrc	r23, 7
     b3c:	80 95       	com	r24
     b3e:	98 2f       	mov	r25, r24
     b40:	0e 94 2a 0a 	call	0x1454	; 0x1454 <__floatsisf>
     b44:	5b 01       	movw	r10, r22
     b46:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b48:	20 e0       	ldi	r18, 0x00	; 0
     b4a:	30 e0       	ldi	r19, 0x00	; 0
     b4c:	4a e7       	ldi	r20, 0x7A	; 122
     b4e:	55 e4       	ldi	r21, 0x45	; 69
     b50:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <__mulsf3>
     b54:	7b 01       	movw	r14, r22
     b56:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     b58:	20 e0       	ldi	r18, 0x00	; 0
     b5a:	30 e0       	ldi	r19, 0x00	; 0
     b5c:	40 e8       	ldi	r20, 0x80	; 128
     b5e:	5f e3       	ldi	r21, 0x3F	; 63
     b60:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <__ltsf2>
     b64:	88 23       	and	r24, r24
     b66:	1c f4       	brge	.+6      	; 0xb6e <delay_msec+0x94>
     b68:	61 e0       	ldi	r22, 0x01	; 1
     b6a:	70 e0       	ldi	r23, 0x00	; 0
     b6c:	23 c0       	rjmp	.+70     	; 0xbb4 <delay_msec+0xda>
		__ticks = 1;
	else if (__tmp > 65535)
     b6e:	c8 01       	movw	r24, r16
     b70:	b7 01       	movw	r22, r14
     b72:	20 e0       	ldi	r18, 0x00	; 0
     b74:	3f ef       	ldi	r19, 0xFF	; 255
     b76:	4f e7       	ldi	r20, 0x7F	; 127
     b78:	57 e4       	ldi	r21, 0x47	; 71
     b7a:	0e 94 9a 09 	call	0x1334	; 0x1334 <__gtsf2>
     b7e:	18 16       	cp	r1, r24
     b80:	ac f4       	brge	.+42     	; 0xbac <delay_msec+0xd2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b82:	c6 01       	movw	r24, r12
     b84:	b5 01       	movw	r22, r10
     b86:	20 e0       	ldi	r18, 0x00	; 0
     b88:	30 e0       	ldi	r19, 0x00	; 0
     b8a:	40 e2       	ldi	r20, 0x20	; 32
     b8c:	51 e4       	ldi	r21, 0x41	; 65
     b8e:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <__mulsf3>
     b92:	0e 94 1e 06 	call	0xc3c	; 0xc3c <__fixunssfsi>
     b96:	cb 01       	movw	r24, r22
		while(__ticks)
     b98:	67 2b       	or	r22, r23
     b9a:	79 f0       	breq	.+30     	; 0xbba <delay_msec+0xe0>
     b9c:	20 e9       	ldi	r18, 0x90	; 144
     b9e:	31 e0       	ldi	r19, 0x01	; 1
     ba0:	f9 01       	movw	r30, r18
     ba2:	31 97       	sbiw	r30, 0x01	; 1
     ba4:	f1 f7       	brne	.-4      	; 0xba2 <delay_msec+0xc8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ba6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ba8:	d9 f7       	brne	.-10     	; 0xba0 <delay_msec+0xc6>
     baa:	07 c0       	rjmp	.+14     	; 0xbba <delay_msec+0xe0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     bac:	c8 01       	movw	r24, r16
     bae:	b7 01       	movw	r22, r14
     bb0:	0e 94 1e 06 	call	0xc3c	; 0xc3c <__fixunssfsi>
     bb4:	cb 01       	movw	r24, r22
     bb6:	01 97       	sbiw	r24, 0x01	; 1
     bb8:	f1 f7       	brne	.-4      	; 0xbb6 <delay_msec+0xdc>
}
     bba:	1f 91       	pop	r17
     bbc:	0f 91       	pop	r16
     bbe:	ff 90       	pop	r15
     bc0:	ef 90       	pop	r14
     bc2:	df 90       	pop	r13
     bc4:	cf 90       	pop	r12
     bc6:	bf 90       	pop	r11
     bc8:	af 90       	pop	r10
     bca:	08 95       	ret

00000bcc <rrand>:



int rrand(int max)
{
     bcc:	af 92       	push	r10
     bce:	bf 92       	push	r11
     bd0:	cf 92       	push	r12
     bd2:	df 92       	push	r13
     bd4:	ef 92       	push	r14
     bd6:	ff 92       	push	r15
     bd8:	0f 93       	push	r16
     bda:	1f 93       	push	r17
     bdc:	7c 01       	movw	r14, r24
    int r = (rand() * 1.0 / RAND_MAX) * max;
     bde:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <rand>
     be2:	aa 27       	eor	r26, r26
     be4:	97 fd       	sbrc	r25, 7
     be6:	a0 95       	com	r26
     be8:	ba 2f       	mov	r27, r26
     bea:	bc 01       	movw	r22, r24
     bec:	cd 01       	movw	r24, r26
     bee:	0e 94 2a 0a 	call	0x1454	; 0x1454 <__floatsisf>
     bf2:	20 e0       	ldi	r18, 0x00	; 0
     bf4:	3e ef       	ldi	r19, 0xFE	; 254
     bf6:	4f ef       	ldi	r20, 0xFF	; 255
     bf8:	56 e4       	ldi	r21, 0x46	; 70
     bfa:	0e 94 ee 08 	call	0x11dc	; 0x11dc <__divsf3>
     bfe:	5b 01       	movw	r10, r22
     c00:	6c 01       	movw	r12, r24
     c02:	00 27       	eor	r16, r16
     c04:	f7 fc       	sbrc	r15, 7
     c06:	00 95       	com	r16
     c08:	10 2f       	mov	r17, r16
     c0a:	c8 01       	movw	r24, r16
     c0c:	b7 01       	movw	r22, r14
     c0e:	0e 94 2a 0a 	call	0x1454	; 0x1454 <__floatsisf>
     c12:	9b 01       	movw	r18, r22
     c14:	ac 01       	movw	r20, r24
     c16:	c6 01       	movw	r24, r12
     c18:	b5 01       	movw	r22, r10
     c1a:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <__mulsf3>
     c1e:	0e 94 88 0a 	call	0x1510	; 0x1510 <__fixsfsi>
     c22:	9b 01       	movw	r18, r22
     c24:	ac 01       	movw	r20, r24
    return r;
}
     c26:	86 2f       	mov	r24, r22
     c28:	93 2f       	mov	r25, r19
     c2a:	1f 91       	pop	r17
     c2c:	0f 91       	pop	r16
     c2e:	ff 90       	pop	r15
     c30:	ef 90       	pop	r14
     c32:	df 90       	pop	r13
     c34:	cf 90       	pop	r12
     c36:	bf 90       	pop	r11
     c38:	af 90       	pop	r10
     c3a:	08 95       	ret

00000c3c <__fixunssfsi>:
     c3c:	ef 92       	push	r14
     c3e:	ff 92       	push	r15
     c40:	0f 93       	push	r16
     c42:	1f 93       	push	r17
     c44:	7b 01       	movw	r14, r22
     c46:	8c 01       	movw	r16, r24
     c48:	20 e0       	ldi	r18, 0x00	; 0
     c4a:	30 e0       	ldi	r19, 0x00	; 0
     c4c:	40 e0       	ldi	r20, 0x00	; 0
     c4e:	5f e4       	ldi	r21, 0x4F	; 79
     c50:	0e 94 ca 09 	call	0x1394	; 0x1394 <__gesf2>
     c54:	88 23       	and	r24, r24
     c56:	8c f0       	brlt	.+34     	; 0xc7a <__fixunssfsi+0x3e>
     c58:	c8 01       	movw	r24, r16
     c5a:	b7 01       	movw	r22, r14
     c5c:	20 e0       	ldi	r18, 0x00	; 0
     c5e:	30 e0       	ldi	r19, 0x00	; 0
     c60:	40 e0       	ldi	r20, 0x00	; 0
     c62:	5f e4       	ldi	r21, 0x4F	; 79
     c64:	0e 94 96 07 	call	0xf2c	; 0xf2c <__subsf3>
     c68:	0e 94 88 0a 	call	0x1510	; 0x1510 <__fixsfsi>
     c6c:	9b 01       	movw	r18, r22
     c6e:	ac 01       	movw	r20, r24
     c70:	20 50       	subi	r18, 0x00	; 0
     c72:	30 40       	sbci	r19, 0x00	; 0
     c74:	40 40       	sbci	r20, 0x00	; 0
     c76:	50 48       	sbci	r21, 0x80	; 128
     c78:	06 c0       	rjmp	.+12     	; 0xc86 <__fixunssfsi+0x4a>
     c7a:	c8 01       	movw	r24, r16
     c7c:	b7 01       	movw	r22, r14
     c7e:	0e 94 88 0a 	call	0x1510	; 0x1510 <__fixsfsi>
     c82:	9b 01       	movw	r18, r22
     c84:	ac 01       	movw	r20, r24
     c86:	b9 01       	movw	r22, r18
     c88:	ca 01       	movw	r24, r20
     c8a:	1f 91       	pop	r17
     c8c:	0f 91       	pop	r16
     c8e:	ff 90       	pop	r15
     c90:	ef 90       	pop	r14
     c92:	08 95       	ret

00000c94 <_fpadd_parts>:
     c94:	a0 e0       	ldi	r26, 0x00	; 0
     c96:	b0 e0       	ldi	r27, 0x00	; 0
     c98:	e0 e5       	ldi	r30, 0x50	; 80
     c9a:	f6 e0       	ldi	r31, 0x06	; 6
     c9c:	0c 94 35 0d 	jmp	0x1a6a	; 0x1a6a <__prologue_saves__>
     ca0:	dc 01       	movw	r26, r24
     ca2:	2b 01       	movw	r4, r22
     ca4:	fa 01       	movw	r30, r20
     ca6:	9c 91       	ld	r25, X
     ca8:	92 30       	cpi	r25, 0x02	; 2
     caa:	08 f4       	brcc	.+2      	; 0xcae <_fpadd_parts+0x1a>
     cac:	39 c1       	rjmp	.+626    	; 0xf20 <_fpadd_parts+0x28c>
     cae:	eb 01       	movw	r28, r22
     cb0:	88 81       	ld	r24, Y
     cb2:	82 30       	cpi	r24, 0x02	; 2
     cb4:	08 f4       	brcc	.+2      	; 0xcb8 <_fpadd_parts+0x24>
     cb6:	33 c1       	rjmp	.+614    	; 0xf1e <_fpadd_parts+0x28a>
     cb8:	94 30       	cpi	r25, 0x04	; 4
     cba:	69 f4       	brne	.+26     	; 0xcd6 <_fpadd_parts+0x42>
     cbc:	84 30       	cpi	r24, 0x04	; 4
     cbe:	09 f0       	breq	.+2      	; 0xcc2 <_fpadd_parts+0x2e>
     cc0:	2f c1       	rjmp	.+606    	; 0xf20 <_fpadd_parts+0x28c>
     cc2:	11 96       	adiw	r26, 0x01	; 1
     cc4:	9c 91       	ld	r25, X
     cc6:	11 97       	sbiw	r26, 0x01	; 1
     cc8:	89 81       	ldd	r24, Y+1	; 0x01
     cca:	98 17       	cp	r25, r24
     ccc:	09 f4       	brne	.+2      	; 0xcd0 <_fpadd_parts+0x3c>
     cce:	28 c1       	rjmp	.+592    	; 0xf20 <_fpadd_parts+0x28c>
     cd0:	a6 e8       	ldi	r26, 0x86	; 134
     cd2:	b1 e0       	ldi	r27, 0x01	; 1
     cd4:	25 c1       	rjmp	.+586    	; 0xf20 <_fpadd_parts+0x28c>
     cd6:	84 30       	cpi	r24, 0x04	; 4
     cd8:	09 f4       	brne	.+2      	; 0xcdc <_fpadd_parts+0x48>
     cda:	21 c1       	rjmp	.+578    	; 0xf1e <_fpadd_parts+0x28a>
     cdc:	82 30       	cpi	r24, 0x02	; 2
     cde:	a9 f4       	brne	.+42     	; 0xd0a <_fpadd_parts+0x76>
     ce0:	92 30       	cpi	r25, 0x02	; 2
     ce2:	09 f0       	breq	.+2      	; 0xce6 <_fpadd_parts+0x52>
     ce4:	1d c1       	rjmp	.+570    	; 0xf20 <_fpadd_parts+0x28c>
     ce6:	9a 01       	movw	r18, r20
     ce8:	ad 01       	movw	r20, r26
     cea:	88 e0       	ldi	r24, 0x08	; 8
     cec:	ea 01       	movw	r28, r20
     cee:	09 90       	ld	r0, Y+
     cf0:	ae 01       	movw	r20, r28
     cf2:	e9 01       	movw	r28, r18
     cf4:	09 92       	st	Y+, r0
     cf6:	9e 01       	movw	r18, r28
     cf8:	81 50       	subi	r24, 0x01	; 1
     cfa:	c1 f7       	brne	.-16     	; 0xcec <_fpadd_parts+0x58>
     cfc:	e2 01       	movw	r28, r4
     cfe:	89 81       	ldd	r24, Y+1	; 0x01
     d00:	11 96       	adiw	r26, 0x01	; 1
     d02:	9c 91       	ld	r25, X
     d04:	89 23       	and	r24, r25
     d06:	81 83       	std	Z+1, r24	; 0x01
     d08:	08 c1       	rjmp	.+528    	; 0xf1a <_fpadd_parts+0x286>
     d0a:	92 30       	cpi	r25, 0x02	; 2
     d0c:	09 f4       	brne	.+2      	; 0xd10 <_fpadd_parts+0x7c>
     d0e:	07 c1       	rjmp	.+526    	; 0xf1e <_fpadd_parts+0x28a>
     d10:	12 96       	adiw	r26, 0x02	; 2
     d12:	2d 90       	ld	r2, X+
     d14:	3c 90       	ld	r3, X
     d16:	13 97       	sbiw	r26, 0x03	; 3
     d18:	eb 01       	movw	r28, r22
     d1a:	8a 81       	ldd	r24, Y+2	; 0x02
     d1c:	9b 81       	ldd	r25, Y+3	; 0x03
     d1e:	14 96       	adiw	r26, 0x04	; 4
     d20:	ad 90       	ld	r10, X+
     d22:	bd 90       	ld	r11, X+
     d24:	cd 90       	ld	r12, X+
     d26:	dc 90       	ld	r13, X
     d28:	17 97       	sbiw	r26, 0x07	; 7
     d2a:	ec 80       	ldd	r14, Y+4	; 0x04
     d2c:	fd 80       	ldd	r15, Y+5	; 0x05
     d2e:	0e 81       	ldd	r16, Y+6	; 0x06
     d30:	1f 81       	ldd	r17, Y+7	; 0x07
     d32:	91 01       	movw	r18, r2
     d34:	28 1b       	sub	r18, r24
     d36:	39 0b       	sbc	r19, r25
     d38:	b9 01       	movw	r22, r18
     d3a:	37 ff       	sbrs	r19, 7
     d3c:	04 c0       	rjmp	.+8      	; 0xd46 <_fpadd_parts+0xb2>
     d3e:	66 27       	eor	r22, r22
     d40:	77 27       	eor	r23, r23
     d42:	62 1b       	sub	r22, r18
     d44:	73 0b       	sbc	r23, r19
     d46:	60 32       	cpi	r22, 0x20	; 32
     d48:	71 05       	cpc	r23, r1
     d4a:	0c f0       	brlt	.+2      	; 0xd4e <_fpadd_parts+0xba>
     d4c:	61 c0       	rjmp	.+194    	; 0xe10 <_fpadd_parts+0x17c>
     d4e:	12 16       	cp	r1, r18
     d50:	13 06       	cpc	r1, r19
     d52:	6c f5       	brge	.+90     	; 0xdae <_fpadd_parts+0x11a>
     d54:	37 01       	movw	r6, r14
     d56:	48 01       	movw	r8, r16
     d58:	06 2e       	mov	r0, r22
     d5a:	04 c0       	rjmp	.+8      	; 0xd64 <_fpadd_parts+0xd0>
     d5c:	96 94       	lsr	r9
     d5e:	87 94       	ror	r8
     d60:	77 94       	ror	r7
     d62:	67 94       	ror	r6
     d64:	0a 94       	dec	r0
     d66:	d2 f7       	brpl	.-12     	; 0xd5c <_fpadd_parts+0xc8>
     d68:	21 e0       	ldi	r18, 0x01	; 1
     d6a:	30 e0       	ldi	r19, 0x00	; 0
     d6c:	40 e0       	ldi	r20, 0x00	; 0
     d6e:	50 e0       	ldi	r21, 0x00	; 0
     d70:	04 c0       	rjmp	.+8      	; 0xd7a <_fpadd_parts+0xe6>
     d72:	22 0f       	add	r18, r18
     d74:	33 1f       	adc	r19, r19
     d76:	44 1f       	adc	r20, r20
     d78:	55 1f       	adc	r21, r21
     d7a:	6a 95       	dec	r22
     d7c:	d2 f7       	brpl	.-12     	; 0xd72 <_fpadd_parts+0xde>
     d7e:	21 50       	subi	r18, 0x01	; 1
     d80:	30 40       	sbci	r19, 0x00	; 0
     d82:	40 40       	sbci	r20, 0x00	; 0
     d84:	50 40       	sbci	r21, 0x00	; 0
     d86:	2e 21       	and	r18, r14
     d88:	3f 21       	and	r19, r15
     d8a:	40 23       	and	r20, r16
     d8c:	51 23       	and	r21, r17
     d8e:	21 15       	cp	r18, r1
     d90:	31 05       	cpc	r19, r1
     d92:	41 05       	cpc	r20, r1
     d94:	51 05       	cpc	r21, r1
     d96:	21 f0       	breq	.+8      	; 0xda0 <_fpadd_parts+0x10c>
     d98:	21 e0       	ldi	r18, 0x01	; 1
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	40 e0       	ldi	r20, 0x00	; 0
     d9e:	50 e0       	ldi	r21, 0x00	; 0
     da0:	79 01       	movw	r14, r18
     da2:	8a 01       	movw	r16, r20
     da4:	e6 28       	or	r14, r6
     da6:	f7 28       	or	r15, r7
     da8:	08 29       	or	r16, r8
     daa:	19 29       	or	r17, r9
     dac:	3c c0       	rjmp	.+120    	; 0xe26 <_fpadd_parts+0x192>
     dae:	23 2b       	or	r18, r19
     db0:	d1 f1       	breq	.+116    	; 0xe26 <_fpadd_parts+0x192>
     db2:	26 0e       	add	r2, r22
     db4:	37 1e       	adc	r3, r23
     db6:	35 01       	movw	r6, r10
     db8:	46 01       	movw	r8, r12
     dba:	06 2e       	mov	r0, r22
     dbc:	04 c0       	rjmp	.+8      	; 0xdc6 <_fpadd_parts+0x132>
     dbe:	96 94       	lsr	r9
     dc0:	87 94       	ror	r8
     dc2:	77 94       	ror	r7
     dc4:	67 94       	ror	r6
     dc6:	0a 94       	dec	r0
     dc8:	d2 f7       	brpl	.-12     	; 0xdbe <_fpadd_parts+0x12a>
     dca:	21 e0       	ldi	r18, 0x01	; 1
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	40 e0       	ldi	r20, 0x00	; 0
     dd0:	50 e0       	ldi	r21, 0x00	; 0
     dd2:	04 c0       	rjmp	.+8      	; 0xddc <_fpadd_parts+0x148>
     dd4:	22 0f       	add	r18, r18
     dd6:	33 1f       	adc	r19, r19
     dd8:	44 1f       	adc	r20, r20
     dda:	55 1f       	adc	r21, r21
     ddc:	6a 95       	dec	r22
     dde:	d2 f7       	brpl	.-12     	; 0xdd4 <_fpadd_parts+0x140>
     de0:	21 50       	subi	r18, 0x01	; 1
     de2:	30 40       	sbci	r19, 0x00	; 0
     de4:	40 40       	sbci	r20, 0x00	; 0
     de6:	50 40       	sbci	r21, 0x00	; 0
     de8:	2a 21       	and	r18, r10
     dea:	3b 21       	and	r19, r11
     dec:	4c 21       	and	r20, r12
     dee:	5d 21       	and	r21, r13
     df0:	21 15       	cp	r18, r1
     df2:	31 05       	cpc	r19, r1
     df4:	41 05       	cpc	r20, r1
     df6:	51 05       	cpc	r21, r1
     df8:	21 f0       	breq	.+8      	; 0xe02 <_fpadd_parts+0x16e>
     dfa:	21 e0       	ldi	r18, 0x01	; 1
     dfc:	30 e0       	ldi	r19, 0x00	; 0
     dfe:	40 e0       	ldi	r20, 0x00	; 0
     e00:	50 e0       	ldi	r21, 0x00	; 0
     e02:	59 01       	movw	r10, r18
     e04:	6a 01       	movw	r12, r20
     e06:	a6 28       	or	r10, r6
     e08:	b7 28       	or	r11, r7
     e0a:	c8 28       	or	r12, r8
     e0c:	d9 28       	or	r13, r9
     e0e:	0b c0       	rjmp	.+22     	; 0xe26 <_fpadd_parts+0x192>
     e10:	82 15       	cp	r24, r2
     e12:	93 05       	cpc	r25, r3
     e14:	2c f0       	brlt	.+10     	; 0xe20 <_fpadd_parts+0x18c>
     e16:	1c 01       	movw	r2, r24
     e18:	aa 24       	eor	r10, r10
     e1a:	bb 24       	eor	r11, r11
     e1c:	65 01       	movw	r12, r10
     e1e:	03 c0       	rjmp	.+6      	; 0xe26 <_fpadd_parts+0x192>
     e20:	ee 24       	eor	r14, r14
     e22:	ff 24       	eor	r15, r15
     e24:	87 01       	movw	r16, r14
     e26:	11 96       	adiw	r26, 0x01	; 1
     e28:	9c 91       	ld	r25, X
     e2a:	d2 01       	movw	r26, r4
     e2c:	11 96       	adiw	r26, 0x01	; 1
     e2e:	8c 91       	ld	r24, X
     e30:	98 17       	cp	r25, r24
     e32:	09 f4       	brne	.+2      	; 0xe36 <_fpadd_parts+0x1a2>
     e34:	45 c0       	rjmp	.+138    	; 0xec0 <_fpadd_parts+0x22c>
     e36:	99 23       	and	r25, r25
     e38:	39 f0       	breq	.+14     	; 0xe48 <_fpadd_parts+0x1b4>
     e3a:	a8 01       	movw	r20, r16
     e3c:	97 01       	movw	r18, r14
     e3e:	2a 19       	sub	r18, r10
     e40:	3b 09       	sbc	r19, r11
     e42:	4c 09       	sbc	r20, r12
     e44:	5d 09       	sbc	r21, r13
     e46:	06 c0       	rjmp	.+12     	; 0xe54 <_fpadd_parts+0x1c0>
     e48:	a6 01       	movw	r20, r12
     e4a:	95 01       	movw	r18, r10
     e4c:	2e 19       	sub	r18, r14
     e4e:	3f 09       	sbc	r19, r15
     e50:	40 0b       	sbc	r20, r16
     e52:	51 0b       	sbc	r21, r17
     e54:	57 fd       	sbrc	r21, 7
     e56:	08 c0       	rjmp	.+16     	; 0xe68 <_fpadd_parts+0x1d4>
     e58:	11 82       	std	Z+1, r1	; 0x01
     e5a:	33 82       	std	Z+3, r3	; 0x03
     e5c:	22 82       	std	Z+2, r2	; 0x02
     e5e:	24 83       	std	Z+4, r18	; 0x04
     e60:	35 83       	std	Z+5, r19	; 0x05
     e62:	46 83       	std	Z+6, r20	; 0x06
     e64:	57 83       	std	Z+7, r21	; 0x07
     e66:	1d c0       	rjmp	.+58     	; 0xea2 <_fpadd_parts+0x20e>
     e68:	81 e0       	ldi	r24, 0x01	; 1
     e6a:	81 83       	std	Z+1, r24	; 0x01
     e6c:	33 82       	std	Z+3, r3	; 0x03
     e6e:	22 82       	std	Z+2, r2	; 0x02
     e70:	88 27       	eor	r24, r24
     e72:	99 27       	eor	r25, r25
     e74:	dc 01       	movw	r26, r24
     e76:	82 1b       	sub	r24, r18
     e78:	93 0b       	sbc	r25, r19
     e7a:	a4 0b       	sbc	r26, r20
     e7c:	b5 0b       	sbc	r27, r21
     e7e:	84 83       	std	Z+4, r24	; 0x04
     e80:	95 83       	std	Z+5, r25	; 0x05
     e82:	a6 83       	std	Z+6, r26	; 0x06
     e84:	b7 83       	std	Z+7, r27	; 0x07
     e86:	0d c0       	rjmp	.+26     	; 0xea2 <_fpadd_parts+0x20e>
     e88:	22 0f       	add	r18, r18
     e8a:	33 1f       	adc	r19, r19
     e8c:	44 1f       	adc	r20, r20
     e8e:	55 1f       	adc	r21, r21
     e90:	24 83       	std	Z+4, r18	; 0x04
     e92:	35 83       	std	Z+5, r19	; 0x05
     e94:	46 83       	std	Z+6, r20	; 0x06
     e96:	57 83       	std	Z+7, r21	; 0x07
     e98:	82 81       	ldd	r24, Z+2	; 0x02
     e9a:	93 81       	ldd	r25, Z+3	; 0x03
     e9c:	01 97       	sbiw	r24, 0x01	; 1
     e9e:	93 83       	std	Z+3, r25	; 0x03
     ea0:	82 83       	std	Z+2, r24	; 0x02
     ea2:	24 81       	ldd	r18, Z+4	; 0x04
     ea4:	35 81       	ldd	r19, Z+5	; 0x05
     ea6:	46 81       	ldd	r20, Z+6	; 0x06
     ea8:	57 81       	ldd	r21, Z+7	; 0x07
     eaa:	da 01       	movw	r26, r20
     eac:	c9 01       	movw	r24, r18
     eae:	01 97       	sbiw	r24, 0x01	; 1
     eb0:	a1 09       	sbc	r26, r1
     eb2:	b1 09       	sbc	r27, r1
     eb4:	8f 5f       	subi	r24, 0xFF	; 255
     eb6:	9f 4f       	sbci	r25, 0xFF	; 255
     eb8:	af 4f       	sbci	r26, 0xFF	; 255
     eba:	bf 43       	sbci	r27, 0x3F	; 63
     ebc:	28 f3       	brcs	.-54     	; 0xe88 <_fpadd_parts+0x1f4>
     ebe:	0b c0       	rjmp	.+22     	; 0xed6 <_fpadd_parts+0x242>
     ec0:	91 83       	std	Z+1, r25	; 0x01
     ec2:	33 82       	std	Z+3, r3	; 0x03
     ec4:	22 82       	std	Z+2, r2	; 0x02
     ec6:	ea 0c       	add	r14, r10
     ec8:	fb 1c       	adc	r15, r11
     eca:	0c 1d       	adc	r16, r12
     ecc:	1d 1d       	adc	r17, r13
     ece:	e4 82       	std	Z+4, r14	; 0x04
     ed0:	f5 82       	std	Z+5, r15	; 0x05
     ed2:	06 83       	std	Z+6, r16	; 0x06
     ed4:	17 83       	std	Z+7, r17	; 0x07
     ed6:	83 e0       	ldi	r24, 0x03	; 3
     ed8:	80 83       	st	Z, r24
     eda:	24 81       	ldd	r18, Z+4	; 0x04
     edc:	35 81       	ldd	r19, Z+5	; 0x05
     ede:	46 81       	ldd	r20, Z+6	; 0x06
     ee0:	57 81       	ldd	r21, Z+7	; 0x07
     ee2:	57 ff       	sbrs	r21, 7
     ee4:	1a c0       	rjmp	.+52     	; 0xf1a <_fpadd_parts+0x286>
     ee6:	c9 01       	movw	r24, r18
     ee8:	aa 27       	eor	r26, r26
     eea:	97 fd       	sbrc	r25, 7
     eec:	a0 95       	com	r26
     eee:	ba 2f       	mov	r27, r26
     ef0:	81 70       	andi	r24, 0x01	; 1
     ef2:	90 70       	andi	r25, 0x00	; 0
     ef4:	a0 70       	andi	r26, 0x00	; 0
     ef6:	b0 70       	andi	r27, 0x00	; 0
     ef8:	56 95       	lsr	r21
     efa:	47 95       	ror	r20
     efc:	37 95       	ror	r19
     efe:	27 95       	ror	r18
     f00:	82 2b       	or	r24, r18
     f02:	93 2b       	or	r25, r19
     f04:	a4 2b       	or	r26, r20
     f06:	b5 2b       	or	r27, r21
     f08:	84 83       	std	Z+4, r24	; 0x04
     f0a:	95 83       	std	Z+5, r25	; 0x05
     f0c:	a6 83       	std	Z+6, r26	; 0x06
     f0e:	b7 83       	std	Z+7, r27	; 0x07
     f10:	82 81       	ldd	r24, Z+2	; 0x02
     f12:	93 81       	ldd	r25, Z+3	; 0x03
     f14:	01 96       	adiw	r24, 0x01	; 1
     f16:	93 83       	std	Z+3, r25	; 0x03
     f18:	82 83       	std	Z+2, r24	; 0x02
     f1a:	df 01       	movw	r26, r30
     f1c:	01 c0       	rjmp	.+2      	; 0xf20 <_fpadd_parts+0x28c>
     f1e:	d2 01       	movw	r26, r4
     f20:	cd 01       	movw	r24, r26
     f22:	cd b7       	in	r28, 0x3d	; 61
     f24:	de b7       	in	r29, 0x3e	; 62
     f26:	e2 e1       	ldi	r30, 0x12	; 18
     f28:	0c 94 51 0d 	jmp	0x1aa2	; 0x1aa2 <__epilogue_restores__>

00000f2c <__subsf3>:
     f2c:	a0 e2       	ldi	r26, 0x20	; 32
     f2e:	b0 e0       	ldi	r27, 0x00	; 0
     f30:	ec e9       	ldi	r30, 0x9C	; 156
     f32:	f7 e0       	ldi	r31, 0x07	; 7
     f34:	0c 94 41 0d 	jmp	0x1a82	; 0x1a82 <__prologue_saves__+0x18>
     f38:	69 83       	std	Y+1, r22	; 0x01
     f3a:	7a 83       	std	Y+2, r23	; 0x02
     f3c:	8b 83       	std	Y+3, r24	; 0x03
     f3e:	9c 83       	std	Y+4, r25	; 0x04
     f40:	2d 83       	std	Y+5, r18	; 0x05
     f42:	3e 83       	std	Y+6, r19	; 0x06
     f44:	4f 83       	std	Y+7, r20	; 0x07
     f46:	58 87       	std	Y+8, r21	; 0x08
     f48:	e9 e0       	ldi	r30, 0x09	; 9
     f4a:	ee 2e       	mov	r14, r30
     f4c:	f1 2c       	mov	r15, r1
     f4e:	ec 0e       	add	r14, r28
     f50:	fd 1e       	adc	r15, r29
     f52:	ce 01       	movw	r24, r28
     f54:	01 96       	adiw	r24, 0x01	; 1
     f56:	b7 01       	movw	r22, r14
     f58:	0e 94 00 0c 	call	0x1800	; 0x1800 <__unpack_f>
     f5c:	8e 01       	movw	r16, r28
     f5e:	0f 5e       	subi	r16, 0xEF	; 239
     f60:	1f 4f       	sbci	r17, 0xFF	; 255
     f62:	ce 01       	movw	r24, r28
     f64:	05 96       	adiw	r24, 0x05	; 5
     f66:	b8 01       	movw	r22, r16
     f68:	0e 94 00 0c 	call	0x1800	; 0x1800 <__unpack_f>
     f6c:	8a 89       	ldd	r24, Y+18	; 0x12
     f6e:	91 e0       	ldi	r25, 0x01	; 1
     f70:	89 27       	eor	r24, r25
     f72:	8a 8b       	std	Y+18, r24	; 0x12
     f74:	c7 01       	movw	r24, r14
     f76:	b8 01       	movw	r22, r16
     f78:	ae 01       	movw	r20, r28
     f7a:	47 5e       	subi	r20, 0xE7	; 231
     f7c:	5f 4f       	sbci	r21, 0xFF	; 255
     f7e:	0e 94 4a 06 	call	0xc94	; 0xc94 <_fpadd_parts>
     f82:	0e 94 2b 0b 	call	0x1656	; 0x1656 <__pack_f>
     f86:	a0 96       	adiw	r28, 0x20	; 32
     f88:	e6 e0       	ldi	r30, 0x06	; 6
     f8a:	0c 94 5d 0d 	jmp	0x1aba	; 0x1aba <__epilogue_restores__+0x18>

00000f8e <__addsf3>:
     f8e:	a0 e2       	ldi	r26, 0x20	; 32
     f90:	b0 e0       	ldi	r27, 0x00	; 0
     f92:	ed ec       	ldi	r30, 0xCD	; 205
     f94:	f7 e0       	ldi	r31, 0x07	; 7
     f96:	0c 94 41 0d 	jmp	0x1a82	; 0x1a82 <__prologue_saves__+0x18>
     f9a:	69 83       	std	Y+1, r22	; 0x01
     f9c:	7a 83       	std	Y+2, r23	; 0x02
     f9e:	8b 83       	std	Y+3, r24	; 0x03
     fa0:	9c 83       	std	Y+4, r25	; 0x04
     fa2:	2d 83       	std	Y+5, r18	; 0x05
     fa4:	3e 83       	std	Y+6, r19	; 0x06
     fa6:	4f 83       	std	Y+7, r20	; 0x07
     fa8:	58 87       	std	Y+8, r21	; 0x08
     faa:	f9 e0       	ldi	r31, 0x09	; 9
     fac:	ef 2e       	mov	r14, r31
     fae:	f1 2c       	mov	r15, r1
     fb0:	ec 0e       	add	r14, r28
     fb2:	fd 1e       	adc	r15, r29
     fb4:	ce 01       	movw	r24, r28
     fb6:	01 96       	adiw	r24, 0x01	; 1
     fb8:	b7 01       	movw	r22, r14
     fba:	0e 94 00 0c 	call	0x1800	; 0x1800 <__unpack_f>
     fbe:	8e 01       	movw	r16, r28
     fc0:	0f 5e       	subi	r16, 0xEF	; 239
     fc2:	1f 4f       	sbci	r17, 0xFF	; 255
     fc4:	ce 01       	movw	r24, r28
     fc6:	05 96       	adiw	r24, 0x05	; 5
     fc8:	b8 01       	movw	r22, r16
     fca:	0e 94 00 0c 	call	0x1800	; 0x1800 <__unpack_f>
     fce:	c7 01       	movw	r24, r14
     fd0:	b8 01       	movw	r22, r16
     fd2:	ae 01       	movw	r20, r28
     fd4:	47 5e       	subi	r20, 0xE7	; 231
     fd6:	5f 4f       	sbci	r21, 0xFF	; 255
     fd8:	0e 94 4a 06 	call	0xc94	; 0xc94 <_fpadd_parts>
     fdc:	0e 94 2b 0b 	call	0x1656	; 0x1656 <__pack_f>
     fe0:	a0 96       	adiw	r28, 0x20	; 32
     fe2:	e6 e0       	ldi	r30, 0x06	; 6
     fe4:	0c 94 5d 0d 	jmp	0x1aba	; 0x1aba <__epilogue_restores__+0x18>

00000fe8 <__mulsf3>:
     fe8:	a0 e2       	ldi	r26, 0x20	; 32
     fea:	b0 e0       	ldi	r27, 0x00	; 0
     fec:	ea ef       	ldi	r30, 0xFA	; 250
     fee:	f7 e0       	ldi	r31, 0x07	; 7
     ff0:	0c 94 35 0d 	jmp	0x1a6a	; 0x1a6a <__prologue_saves__>
     ff4:	69 83       	std	Y+1, r22	; 0x01
     ff6:	7a 83       	std	Y+2, r23	; 0x02
     ff8:	8b 83       	std	Y+3, r24	; 0x03
     ffa:	9c 83       	std	Y+4, r25	; 0x04
     ffc:	2d 83       	std	Y+5, r18	; 0x05
     ffe:	3e 83       	std	Y+6, r19	; 0x06
    1000:	4f 83       	std	Y+7, r20	; 0x07
    1002:	58 87       	std	Y+8, r21	; 0x08
    1004:	ce 01       	movw	r24, r28
    1006:	01 96       	adiw	r24, 0x01	; 1
    1008:	be 01       	movw	r22, r28
    100a:	67 5f       	subi	r22, 0xF7	; 247
    100c:	7f 4f       	sbci	r23, 0xFF	; 255
    100e:	0e 94 00 0c 	call	0x1800	; 0x1800 <__unpack_f>
    1012:	ce 01       	movw	r24, r28
    1014:	05 96       	adiw	r24, 0x05	; 5
    1016:	be 01       	movw	r22, r28
    1018:	6f 5e       	subi	r22, 0xEF	; 239
    101a:	7f 4f       	sbci	r23, 0xFF	; 255
    101c:	0e 94 00 0c 	call	0x1800	; 0x1800 <__unpack_f>
    1020:	99 85       	ldd	r25, Y+9	; 0x09
    1022:	92 30       	cpi	r25, 0x02	; 2
    1024:	88 f0       	brcs	.+34     	; 0x1048 <__mulsf3+0x60>
    1026:	89 89       	ldd	r24, Y+17	; 0x11
    1028:	82 30       	cpi	r24, 0x02	; 2
    102a:	c8 f0       	brcs	.+50     	; 0x105e <__mulsf3+0x76>
    102c:	94 30       	cpi	r25, 0x04	; 4
    102e:	19 f4       	brne	.+6      	; 0x1036 <__mulsf3+0x4e>
    1030:	82 30       	cpi	r24, 0x02	; 2
    1032:	51 f4       	brne	.+20     	; 0x1048 <__mulsf3+0x60>
    1034:	04 c0       	rjmp	.+8      	; 0x103e <__mulsf3+0x56>
    1036:	84 30       	cpi	r24, 0x04	; 4
    1038:	29 f4       	brne	.+10     	; 0x1044 <__mulsf3+0x5c>
    103a:	92 30       	cpi	r25, 0x02	; 2
    103c:	81 f4       	brne	.+32     	; 0x105e <__mulsf3+0x76>
    103e:	86 e8       	ldi	r24, 0x86	; 134
    1040:	91 e0       	ldi	r25, 0x01	; 1
    1042:	c6 c0       	rjmp	.+396    	; 0x11d0 <__stack+0xd1>
    1044:	92 30       	cpi	r25, 0x02	; 2
    1046:	49 f4       	brne	.+18     	; 0x105a <__mulsf3+0x72>
    1048:	20 e0       	ldi	r18, 0x00	; 0
    104a:	9a 85       	ldd	r25, Y+10	; 0x0a
    104c:	8a 89       	ldd	r24, Y+18	; 0x12
    104e:	98 13       	cpse	r25, r24
    1050:	21 e0       	ldi	r18, 0x01	; 1
    1052:	2a 87       	std	Y+10, r18	; 0x0a
    1054:	ce 01       	movw	r24, r28
    1056:	09 96       	adiw	r24, 0x09	; 9
    1058:	bb c0       	rjmp	.+374    	; 0x11d0 <__stack+0xd1>
    105a:	82 30       	cpi	r24, 0x02	; 2
    105c:	49 f4       	brne	.+18     	; 0x1070 <__mulsf3+0x88>
    105e:	20 e0       	ldi	r18, 0x00	; 0
    1060:	9a 85       	ldd	r25, Y+10	; 0x0a
    1062:	8a 89       	ldd	r24, Y+18	; 0x12
    1064:	98 13       	cpse	r25, r24
    1066:	21 e0       	ldi	r18, 0x01	; 1
    1068:	2a 8b       	std	Y+18, r18	; 0x12
    106a:	ce 01       	movw	r24, r28
    106c:	41 96       	adiw	r24, 0x11	; 17
    106e:	b0 c0       	rjmp	.+352    	; 0x11d0 <__stack+0xd1>
    1070:	2d 84       	ldd	r2, Y+13	; 0x0d
    1072:	3e 84       	ldd	r3, Y+14	; 0x0e
    1074:	4f 84       	ldd	r4, Y+15	; 0x0f
    1076:	58 88       	ldd	r5, Y+16	; 0x10
    1078:	6d 88       	ldd	r6, Y+21	; 0x15
    107a:	7e 88       	ldd	r7, Y+22	; 0x16
    107c:	8f 88       	ldd	r8, Y+23	; 0x17
    107e:	98 8c       	ldd	r9, Y+24	; 0x18
    1080:	ee 24       	eor	r14, r14
    1082:	ff 24       	eor	r15, r15
    1084:	87 01       	movw	r16, r14
    1086:	aa 24       	eor	r10, r10
    1088:	bb 24       	eor	r11, r11
    108a:	65 01       	movw	r12, r10
    108c:	40 e0       	ldi	r20, 0x00	; 0
    108e:	50 e0       	ldi	r21, 0x00	; 0
    1090:	60 e0       	ldi	r22, 0x00	; 0
    1092:	70 e0       	ldi	r23, 0x00	; 0
    1094:	e0 e0       	ldi	r30, 0x00	; 0
    1096:	f0 e0       	ldi	r31, 0x00	; 0
    1098:	c1 01       	movw	r24, r2
    109a:	81 70       	andi	r24, 0x01	; 1
    109c:	90 70       	andi	r25, 0x00	; 0
    109e:	89 2b       	or	r24, r25
    10a0:	e9 f0       	breq	.+58     	; 0x10dc <__mulsf3+0xf4>
    10a2:	e6 0c       	add	r14, r6
    10a4:	f7 1c       	adc	r15, r7
    10a6:	08 1d       	adc	r16, r8
    10a8:	19 1d       	adc	r17, r9
    10aa:	9a 01       	movw	r18, r20
    10ac:	ab 01       	movw	r20, r22
    10ae:	2a 0d       	add	r18, r10
    10b0:	3b 1d       	adc	r19, r11
    10b2:	4c 1d       	adc	r20, r12
    10b4:	5d 1d       	adc	r21, r13
    10b6:	80 e0       	ldi	r24, 0x00	; 0
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	a0 e0       	ldi	r26, 0x00	; 0
    10bc:	b0 e0       	ldi	r27, 0x00	; 0
    10be:	e6 14       	cp	r14, r6
    10c0:	f7 04       	cpc	r15, r7
    10c2:	08 05       	cpc	r16, r8
    10c4:	19 05       	cpc	r17, r9
    10c6:	20 f4       	brcc	.+8      	; 0x10d0 <__mulsf3+0xe8>
    10c8:	81 e0       	ldi	r24, 0x01	; 1
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	a0 e0       	ldi	r26, 0x00	; 0
    10ce:	b0 e0       	ldi	r27, 0x00	; 0
    10d0:	ba 01       	movw	r22, r20
    10d2:	a9 01       	movw	r20, r18
    10d4:	48 0f       	add	r20, r24
    10d6:	59 1f       	adc	r21, r25
    10d8:	6a 1f       	adc	r22, r26
    10da:	7b 1f       	adc	r23, r27
    10dc:	aa 0c       	add	r10, r10
    10de:	bb 1c       	adc	r11, r11
    10e0:	cc 1c       	adc	r12, r12
    10e2:	dd 1c       	adc	r13, r13
    10e4:	97 fe       	sbrs	r9, 7
    10e6:	08 c0       	rjmp	.+16     	; 0x10f8 <__mulsf3+0x110>
    10e8:	81 e0       	ldi	r24, 0x01	; 1
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	a0 e0       	ldi	r26, 0x00	; 0
    10ee:	b0 e0       	ldi	r27, 0x00	; 0
    10f0:	a8 2a       	or	r10, r24
    10f2:	b9 2a       	or	r11, r25
    10f4:	ca 2a       	or	r12, r26
    10f6:	db 2a       	or	r13, r27
    10f8:	31 96       	adiw	r30, 0x01	; 1
    10fa:	e0 32       	cpi	r30, 0x20	; 32
    10fc:	f1 05       	cpc	r31, r1
    10fe:	49 f0       	breq	.+18     	; 0x1112 <__stack+0x13>
    1100:	66 0c       	add	r6, r6
    1102:	77 1c       	adc	r7, r7
    1104:	88 1c       	adc	r8, r8
    1106:	99 1c       	adc	r9, r9
    1108:	56 94       	lsr	r5
    110a:	47 94       	ror	r4
    110c:	37 94       	ror	r3
    110e:	27 94       	ror	r2
    1110:	c3 cf       	rjmp	.-122    	; 0x1098 <__mulsf3+0xb0>
    1112:	fa 85       	ldd	r31, Y+10	; 0x0a
    1114:	ea 89       	ldd	r30, Y+18	; 0x12
    1116:	2b 89       	ldd	r18, Y+19	; 0x13
    1118:	3c 89       	ldd	r19, Y+20	; 0x14
    111a:	8b 85       	ldd	r24, Y+11	; 0x0b
    111c:	9c 85       	ldd	r25, Y+12	; 0x0c
    111e:	28 0f       	add	r18, r24
    1120:	39 1f       	adc	r19, r25
    1122:	2e 5f       	subi	r18, 0xFE	; 254
    1124:	3f 4f       	sbci	r19, 0xFF	; 255
    1126:	17 c0       	rjmp	.+46     	; 0x1156 <__stack+0x57>
    1128:	ca 01       	movw	r24, r20
    112a:	81 70       	andi	r24, 0x01	; 1
    112c:	90 70       	andi	r25, 0x00	; 0
    112e:	89 2b       	or	r24, r25
    1130:	61 f0       	breq	.+24     	; 0x114a <__stack+0x4b>
    1132:	16 95       	lsr	r17
    1134:	07 95       	ror	r16
    1136:	f7 94       	ror	r15
    1138:	e7 94       	ror	r14
    113a:	80 e0       	ldi	r24, 0x00	; 0
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	a0 e0       	ldi	r26, 0x00	; 0
    1140:	b0 e8       	ldi	r27, 0x80	; 128
    1142:	e8 2a       	or	r14, r24
    1144:	f9 2a       	or	r15, r25
    1146:	0a 2b       	or	r16, r26
    1148:	1b 2b       	or	r17, r27
    114a:	76 95       	lsr	r23
    114c:	67 95       	ror	r22
    114e:	57 95       	ror	r21
    1150:	47 95       	ror	r20
    1152:	2f 5f       	subi	r18, 0xFF	; 255
    1154:	3f 4f       	sbci	r19, 0xFF	; 255
    1156:	77 fd       	sbrc	r23, 7
    1158:	e7 cf       	rjmp	.-50     	; 0x1128 <__stack+0x29>
    115a:	0c c0       	rjmp	.+24     	; 0x1174 <__stack+0x75>
    115c:	44 0f       	add	r20, r20
    115e:	55 1f       	adc	r21, r21
    1160:	66 1f       	adc	r22, r22
    1162:	77 1f       	adc	r23, r23
    1164:	17 fd       	sbrc	r17, 7
    1166:	41 60       	ori	r20, 0x01	; 1
    1168:	ee 0c       	add	r14, r14
    116a:	ff 1c       	adc	r15, r15
    116c:	00 1f       	adc	r16, r16
    116e:	11 1f       	adc	r17, r17
    1170:	21 50       	subi	r18, 0x01	; 1
    1172:	30 40       	sbci	r19, 0x00	; 0
    1174:	40 30       	cpi	r20, 0x00	; 0
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	59 07       	cpc	r21, r25
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	69 07       	cpc	r22, r25
    117e:	90 e4       	ldi	r25, 0x40	; 64
    1180:	79 07       	cpc	r23, r25
    1182:	60 f3       	brcs	.-40     	; 0x115c <__stack+0x5d>
    1184:	2b 8f       	std	Y+27, r18	; 0x1b
    1186:	3c 8f       	std	Y+28, r19	; 0x1c
    1188:	db 01       	movw	r26, r22
    118a:	ca 01       	movw	r24, r20
    118c:	8f 77       	andi	r24, 0x7F	; 127
    118e:	90 70       	andi	r25, 0x00	; 0
    1190:	a0 70       	andi	r26, 0x00	; 0
    1192:	b0 70       	andi	r27, 0x00	; 0
    1194:	80 34       	cpi	r24, 0x40	; 64
    1196:	91 05       	cpc	r25, r1
    1198:	a1 05       	cpc	r26, r1
    119a:	b1 05       	cpc	r27, r1
    119c:	61 f4       	brne	.+24     	; 0x11b6 <__stack+0xb7>
    119e:	47 fd       	sbrc	r20, 7
    11a0:	0a c0       	rjmp	.+20     	; 0x11b6 <__stack+0xb7>
    11a2:	e1 14       	cp	r14, r1
    11a4:	f1 04       	cpc	r15, r1
    11a6:	01 05       	cpc	r16, r1
    11a8:	11 05       	cpc	r17, r1
    11aa:	29 f0       	breq	.+10     	; 0x11b6 <__stack+0xb7>
    11ac:	40 5c       	subi	r20, 0xC0	; 192
    11ae:	5f 4f       	sbci	r21, 0xFF	; 255
    11b0:	6f 4f       	sbci	r22, 0xFF	; 255
    11b2:	7f 4f       	sbci	r23, 0xFF	; 255
    11b4:	40 78       	andi	r20, 0x80	; 128
    11b6:	1a 8e       	std	Y+26, r1	; 0x1a
    11b8:	fe 17       	cp	r31, r30
    11ba:	11 f0       	breq	.+4      	; 0x11c0 <__stack+0xc1>
    11bc:	81 e0       	ldi	r24, 0x01	; 1
    11be:	8a 8f       	std	Y+26, r24	; 0x1a
    11c0:	4d 8f       	std	Y+29, r20	; 0x1d
    11c2:	5e 8f       	std	Y+30, r21	; 0x1e
    11c4:	6f 8f       	std	Y+31, r22	; 0x1f
    11c6:	78 a3       	std	Y+32, r23	; 0x20
    11c8:	83 e0       	ldi	r24, 0x03	; 3
    11ca:	89 8f       	std	Y+25, r24	; 0x19
    11cc:	ce 01       	movw	r24, r28
    11ce:	49 96       	adiw	r24, 0x19	; 25
    11d0:	0e 94 2b 0b 	call	0x1656	; 0x1656 <__pack_f>
    11d4:	a0 96       	adiw	r28, 0x20	; 32
    11d6:	e2 e1       	ldi	r30, 0x12	; 18
    11d8:	0c 94 51 0d 	jmp	0x1aa2	; 0x1aa2 <__epilogue_restores__>

000011dc <__divsf3>:
    11dc:	a8 e1       	ldi	r26, 0x18	; 24
    11de:	b0 e0       	ldi	r27, 0x00	; 0
    11e0:	e4 ef       	ldi	r30, 0xF4	; 244
    11e2:	f8 e0       	ldi	r31, 0x08	; 8
    11e4:	0c 94 3d 0d 	jmp	0x1a7a	; 0x1a7a <__prologue_saves__+0x10>
    11e8:	69 83       	std	Y+1, r22	; 0x01
    11ea:	7a 83       	std	Y+2, r23	; 0x02
    11ec:	8b 83       	std	Y+3, r24	; 0x03
    11ee:	9c 83       	std	Y+4, r25	; 0x04
    11f0:	2d 83       	std	Y+5, r18	; 0x05
    11f2:	3e 83       	std	Y+6, r19	; 0x06
    11f4:	4f 83       	std	Y+7, r20	; 0x07
    11f6:	58 87       	std	Y+8, r21	; 0x08
    11f8:	b9 e0       	ldi	r27, 0x09	; 9
    11fa:	eb 2e       	mov	r14, r27
    11fc:	f1 2c       	mov	r15, r1
    11fe:	ec 0e       	add	r14, r28
    1200:	fd 1e       	adc	r15, r29
    1202:	ce 01       	movw	r24, r28
    1204:	01 96       	adiw	r24, 0x01	; 1
    1206:	b7 01       	movw	r22, r14
    1208:	0e 94 00 0c 	call	0x1800	; 0x1800 <__unpack_f>
    120c:	8e 01       	movw	r16, r28
    120e:	0f 5e       	subi	r16, 0xEF	; 239
    1210:	1f 4f       	sbci	r17, 0xFF	; 255
    1212:	ce 01       	movw	r24, r28
    1214:	05 96       	adiw	r24, 0x05	; 5
    1216:	b8 01       	movw	r22, r16
    1218:	0e 94 00 0c 	call	0x1800	; 0x1800 <__unpack_f>
    121c:	29 85       	ldd	r18, Y+9	; 0x09
    121e:	22 30       	cpi	r18, 0x02	; 2
    1220:	08 f4       	brcc	.+2      	; 0x1224 <__divsf3+0x48>
    1222:	7e c0       	rjmp	.+252    	; 0x1320 <__divsf3+0x144>
    1224:	39 89       	ldd	r19, Y+17	; 0x11
    1226:	32 30       	cpi	r19, 0x02	; 2
    1228:	10 f4       	brcc	.+4      	; 0x122e <__divsf3+0x52>
    122a:	b8 01       	movw	r22, r16
    122c:	7c c0       	rjmp	.+248    	; 0x1326 <__divsf3+0x14a>
    122e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1230:	9a 89       	ldd	r25, Y+18	; 0x12
    1232:	89 27       	eor	r24, r25
    1234:	8a 87       	std	Y+10, r24	; 0x0a
    1236:	24 30       	cpi	r18, 0x04	; 4
    1238:	11 f0       	breq	.+4      	; 0x123e <__divsf3+0x62>
    123a:	22 30       	cpi	r18, 0x02	; 2
    123c:	31 f4       	brne	.+12     	; 0x124a <__divsf3+0x6e>
    123e:	23 17       	cp	r18, r19
    1240:	09 f0       	breq	.+2      	; 0x1244 <__divsf3+0x68>
    1242:	6e c0       	rjmp	.+220    	; 0x1320 <__divsf3+0x144>
    1244:	66 e8       	ldi	r22, 0x86	; 134
    1246:	71 e0       	ldi	r23, 0x01	; 1
    1248:	6e c0       	rjmp	.+220    	; 0x1326 <__divsf3+0x14a>
    124a:	34 30       	cpi	r19, 0x04	; 4
    124c:	39 f4       	brne	.+14     	; 0x125c <__divsf3+0x80>
    124e:	1d 86       	std	Y+13, r1	; 0x0d
    1250:	1e 86       	std	Y+14, r1	; 0x0e
    1252:	1f 86       	std	Y+15, r1	; 0x0f
    1254:	18 8a       	std	Y+16, r1	; 0x10
    1256:	1c 86       	std	Y+12, r1	; 0x0c
    1258:	1b 86       	std	Y+11, r1	; 0x0b
    125a:	04 c0       	rjmp	.+8      	; 0x1264 <__divsf3+0x88>
    125c:	32 30       	cpi	r19, 0x02	; 2
    125e:	21 f4       	brne	.+8      	; 0x1268 <__divsf3+0x8c>
    1260:	84 e0       	ldi	r24, 0x04	; 4
    1262:	89 87       	std	Y+9, r24	; 0x09
    1264:	b7 01       	movw	r22, r14
    1266:	5f c0       	rjmp	.+190    	; 0x1326 <__divsf3+0x14a>
    1268:	2b 85       	ldd	r18, Y+11	; 0x0b
    126a:	3c 85       	ldd	r19, Y+12	; 0x0c
    126c:	8b 89       	ldd	r24, Y+19	; 0x13
    126e:	9c 89       	ldd	r25, Y+20	; 0x14
    1270:	28 1b       	sub	r18, r24
    1272:	39 0b       	sbc	r19, r25
    1274:	3c 87       	std	Y+12, r19	; 0x0c
    1276:	2b 87       	std	Y+11, r18	; 0x0b
    1278:	ed 84       	ldd	r14, Y+13	; 0x0d
    127a:	fe 84       	ldd	r15, Y+14	; 0x0e
    127c:	0f 85       	ldd	r16, Y+15	; 0x0f
    127e:	18 89       	ldd	r17, Y+16	; 0x10
    1280:	ad 88       	ldd	r10, Y+21	; 0x15
    1282:	be 88       	ldd	r11, Y+22	; 0x16
    1284:	cf 88       	ldd	r12, Y+23	; 0x17
    1286:	d8 8c       	ldd	r13, Y+24	; 0x18
    1288:	ea 14       	cp	r14, r10
    128a:	fb 04       	cpc	r15, r11
    128c:	0c 05       	cpc	r16, r12
    128e:	1d 05       	cpc	r17, r13
    1290:	40 f4       	brcc	.+16     	; 0x12a2 <__divsf3+0xc6>
    1292:	ee 0c       	add	r14, r14
    1294:	ff 1c       	adc	r15, r15
    1296:	00 1f       	adc	r16, r16
    1298:	11 1f       	adc	r17, r17
    129a:	21 50       	subi	r18, 0x01	; 1
    129c:	30 40       	sbci	r19, 0x00	; 0
    129e:	3c 87       	std	Y+12, r19	; 0x0c
    12a0:	2b 87       	std	Y+11, r18	; 0x0b
    12a2:	20 e0       	ldi	r18, 0x00	; 0
    12a4:	30 e0       	ldi	r19, 0x00	; 0
    12a6:	40 e0       	ldi	r20, 0x00	; 0
    12a8:	50 e0       	ldi	r21, 0x00	; 0
    12aa:	80 e0       	ldi	r24, 0x00	; 0
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	a0 e0       	ldi	r26, 0x00	; 0
    12b0:	b0 e4       	ldi	r27, 0x40	; 64
    12b2:	60 e0       	ldi	r22, 0x00	; 0
    12b4:	70 e0       	ldi	r23, 0x00	; 0
    12b6:	ea 14       	cp	r14, r10
    12b8:	fb 04       	cpc	r15, r11
    12ba:	0c 05       	cpc	r16, r12
    12bc:	1d 05       	cpc	r17, r13
    12be:	40 f0       	brcs	.+16     	; 0x12d0 <__divsf3+0xf4>
    12c0:	28 2b       	or	r18, r24
    12c2:	39 2b       	or	r19, r25
    12c4:	4a 2b       	or	r20, r26
    12c6:	5b 2b       	or	r21, r27
    12c8:	ea 18       	sub	r14, r10
    12ca:	fb 08       	sbc	r15, r11
    12cc:	0c 09       	sbc	r16, r12
    12ce:	1d 09       	sbc	r17, r13
    12d0:	b6 95       	lsr	r27
    12d2:	a7 95       	ror	r26
    12d4:	97 95       	ror	r25
    12d6:	87 95       	ror	r24
    12d8:	ee 0c       	add	r14, r14
    12da:	ff 1c       	adc	r15, r15
    12dc:	00 1f       	adc	r16, r16
    12de:	11 1f       	adc	r17, r17
    12e0:	6f 5f       	subi	r22, 0xFF	; 255
    12e2:	7f 4f       	sbci	r23, 0xFF	; 255
    12e4:	6f 31       	cpi	r22, 0x1F	; 31
    12e6:	71 05       	cpc	r23, r1
    12e8:	31 f7       	brne	.-52     	; 0x12b6 <__divsf3+0xda>
    12ea:	da 01       	movw	r26, r20
    12ec:	c9 01       	movw	r24, r18
    12ee:	8f 77       	andi	r24, 0x7F	; 127
    12f0:	90 70       	andi	r25, 0x00	; 0
    12f2:	a0 70       	andi	r26, 0x00	; 0
    12f4:	b0 70       	andi	r27, 0x00	; 0
    12f6:	80 34       	cpi	r24, 0x40	; 64
    12f8:	91 05       	cpc	r25, r1
    12fa:	a1 05       	cpc	r26, r1
    12fc:	b1 05       	cpc	r27, r1
    12fe:	61 f4       	brne	.+24     	; 0x1318 <__divsf3+0x13c>
    1300:	27 fd       	sbrc	r18, 7
    1302:	0a c0       	rjmp	.+20     	; 0x1318 <__divsf3+0x13c>
    1304:	e1 14       	cp	r14, r1
    1306:	f1 04       	cpc	r15, r1
    1308:	01 05       	cpc	r16, r1
    130a:	11 05       	cpc	r17, r1
    130c:	29 f0       	breq	.+10     	; 0x1318 <__divsf3+0x13c>
    130e:	20 5c       	subi	r18, 0xC0	; 192
    1310:	3f 4f       	sbci	r19, 0xFF	; 255
    1312:	4f 4f       	sbci	r20, 0xFF	; 255
    1314:	5f 4f       	sbci	r21, 0xFF	; 255
    1316:	20 78       	andi	r18, 0x80	; 128
    1318:	2d 87       	std	Y+13, r18	; 0x0d
    131a:	3e 87       	std	Y+14, r19	; 0x0e
    131c:	4f 87       	std	Y+15, r20	; 0x0f
    131e:	58 8b       	std	Y+16, r21	; 0x10
    1320:	be 01       	movw	r22, r28
    1322:	67 5f       	subi	r22, 0xF7	; 247
    1324:	7f 4f       	sbci	r23, 0xFF	; 255
    1326:	cb 01       	movw	r24, r22
    1328:	0e 94 2b 0b 	call	0x1656	; 0x1656 <__pack_f>
    132c:	68 96       	adiw	r28, 0x18	; 24
    132e:	ea e0       	ldi	r30, 0x0A	; 10
    1330:	0c 94 59 0d 	jmp	0x1ab2	; 0x1ab2 <__epilogue_restores__+0x10>

00001334 <__gtsf2>:
    1334:	a8 e1       	ldi	r26, 0x18	; 24
    1336:	b0 e0       	ldi	r27, 0x00	; 0
    1338:	e0 ea       	ldi	r30, 0xA0	; 160
    133a:	f9 e0       	ldi	r31, 0x09	; 9
    133c:	0c 94 41 0d 	jmp	0x1a82	; 0x1a82 <__prologue_saves__+0x18>
    1340:	69 83       	std	Y+1, r22	; 0x01
    1342:	7a 83       	std	Y+2, r23	; 0x02
    1344:	8b 83       	std	Y+3, r24	; 0x03
    1346:	9c 83       	std	Y+4, r25	; 0x04
    1348:	2d 83       	std	Y+5, r18	; 0x05
    134a:	3e 83       	std	Y+6, r19	; 0x06
    134c:	4f 83       	std	Y+7, r20	; 0x07
    134e:	58 87       	std	Y+8, r21	; 0x08
    1350:	89 e0       	ldi	r24, 0x09	; 9
    1352:	e8 2e       	mov	r14, r24
    1354:	f1 2c       	mov	r15, r1
    1356:	ec 0e       	add	r14, r28
    1358:	fd 1e       	adc	r15, r29
    135a:	ce 01       	movw	r24, r28
    135c:	01 96       	adiw	r24, 0x01	; 1
    135e:	b7 01       	movw	r22, r14
    1360:	0e 94 00 0c 	call	0x1800	; 0x1800 <__unpack_f>
    1364:	8e 01       	movw	r16, r28
    1366:	0f 5e       	subi	r16, 0xEF	; 239
    1368:	1f 4f       	sbci	r17, 0xFF	; 255
    136a:	ce 01       	movw	r24, r28
    136c:	05 96       	adiw	r24, 0x05	; 5
    136e:	b8 01       	movw	r22, r16
    1370:	0e 94 00 0c 	call	0x1800	; 0x1800 <__unpack_f>
    1374:	89 85       	ldd	r24, Y+9	; 0x09
    1376:	82 30       	cpi	r24, 0x02	; 2
    1378:	40 f0       	brcs	.+16     	; 0x138a <__gtsf2+0x56>
    137a:	89 89       	ldd	r24, Y+17	; 0x11
    137c:	82 30       	cpi	r24, 0x02	; 2
    137e:	28 f0       	brcs	.+10     	; 0x138a <__gtsf2+0x56>
    1380:	c7 01       	movw	r24, r14
    1382:	b8 01       	movw	r22, r16
    1384:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <__fpcmp_parts_f>
    1388:	01 c0       	rjmp	.+2      	; 0x138c <__gtsf2+0x58>
    138a:	8f ef       	ldi	r24, 0xFF	; 255
    138c:	68 96       	adiw	r28, 0x18	; 24
    138e:	e6 e0       	ldi	r30, 0x06	; 6
    1390:	0c 94 5d 0d 	jmp	0x1aba	; 0x1aba <__epilogue_restores__+0x18>

00001394 <__gesf2>:
    1394:	a8 e1       	ldi	r26, 0x18	; 24
    1396:	b0 e0       	ldi	r27, 0x00	; 0
    1398:	e0 ed       	ldi	r30, 0xD0	; 208
    139a:	f9 e0       	ldi	r31, 0x09	; 9
    139c:	0c 94 41 0d 	jmp	0x1a82	; 0x1a82 <__prologue_saves__+0x18>
    13a0:	69 83       	std	Y+1, r22	; 0x01
    13a2:	7a 83       	std	Y+2, r23	; 0x02
    13a4:	8b 83       	std	Y+3, r24	; 0x03
    13a6:	9c 83       	std	Y+4, r25	; 0x04
    13a8:	2d 83       	std	Y+5, r18	; 0x05
    13aa:	3e 83       	std	Y+6, r19	; 0x06
    13ac:	4f 83       	std	Y+7, r20	; 0x07
    13ae:	58 87       	std	Y+8, r21	; 0x08
    13b0:	89 e0       	ldi	r24, 0x09	; 9
    13b2:	e8 2e       	mov	r14, r24
    13b4:	f1 2c       	mov	r15, r1
    13b6:	ec 0e       	add	r14, r28
    13b8:	fd 1e       	adc	r15, r29
    13ba:	ce 01       	movw	r24, r28
    13bc:	01 96       	adiw	r24, 0x01	; 1
    13be:	b7 01       	movw	r22, r14
    13c0:	0e 94 00 0c 	call	0x1800	; 0x1800 <__unpack_f>
    13c4:	8e 01       	movw	r16, r28
    13c6:	0f 5e       	subi	r16, 0xEF	; 239
    13c8:	1f 4f       	sbci	r17, 0xFF	; 255
    13ca:	ce 01       	movw	r24, r28
    13cc:	05 96       	adiw	r24, 0x05	; 5
    13ce:	b8 01       	movw	r22, r16
    13d0:	0e 94 00 0c 	call	0x1800	; 0x1800 <__unpack_f>
    13d4:	89 85       	ldd	r24, Y+9	; 0x09
    13d6:	82 30       	cpi	r24, 0x02	; 2
    13d8:	40 f0       	brcs	.+16     	; 0x13ea <__gesf2+0x56>
    13da:	89 89       	ldd	r24, Y+17	; 0x11
    13dc:	82 30       	cpi	r24, 0x02	; 2
    13de:	28 f0       	brcs	.+10     	; 0x13ea <__gesf2+0x56>
    13e0:	c7 01       	movw	r24, r14
    13e2:	b8 01       	movw	r22, r16
    13e4:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <__fpcmp_parts_f>
    13e8:	01 c0       	rjmp	.+2      	; 0x13ec <__gesf2+0x58>
    13ea:	8f ef       	ldi	r24, 0xFF	; 255
    13ec:	68 96       	adiw	r28, 0x18	; 24
    13ee:	e6 e0       	ldi	r30, 0x06	; 6
    13f0:	0c 94 5d 0d 	jmp	0x1aba	; 0x1aba <__epilogue_restores__+0x18>

000013f4 <__ltsf2>:
    13f4:	a8 e1       	ldi	r26, 0x18	; 24
    13f6:	b0 e0       	ldi	r27, 0x00	; 0
    13f8:	e0 e0       	ldi	r30, 0x00	; 0
    13fa:	fa e0       	ldi	r31, 0x0A	; 10
    13fc:	0c 94 41 0d 	jmp	0x1a82	; 0x1a82 <__prologue_saves__+0x18>
    1400:	69 83       	std	Y+1, r22	; 0x01
    1402:	7a 83       	std	Y+2, r23	; 0x02
    1404:	8b 83       	std	Y+3, r24	; 0x03
    1406:	9c 83       	std	Y+4, r25	; 0x04
    1408:	2d 83       	std	Y+5, r18	; 0x05
    140a:	3e 83       	std	Y+6, r19	; 0x06
    140c:	4f 83       	std	Y+7, r20	; 0x07
    140e:	58 87       	std	Y+8, r21	; 0x08
    1410:	89 e0       	ldi	r24, 0x09	; 9
    1412:	e8 2e       	mov	r14, r24
    1414:	f1 2c       	mov	r15, r1
    1416:	ec 0e       	add	r14, r28
    1418:	fd 1e       	adc	r15, r29
    141a:	ce 01       	movw	r24, r28
    141c:	01 96       	adiw	r24, 0x01	; 1
    141e:	b7 01       	movw	r22, r14
    1420:	0e 94 00 0c 	call	0x1800	; 0x1800 <__unpack_f>
    1424:	8e 01       	movw	r16, r28
    1426:	0f 5e       	subi	r16, 0xEF	; 239
    1428:	1f 4f       	sbci	r17, 0xFF	; 255
    142a:	ce 01       	movw	r24, r28
    142c:	05 96       	adiw	r24, 0x05	; 5
    142e:	b8 01       	movw	r22, r16
    1430:	0e 94 00 0c 	call	0x1800	; 0x1800 <__unpack_f>
    1434:	89 85       	ldd	r24, Y+9	; 0x09
    1436:	82 30       	cpi	r24, 0x02	; 2
    1438:	40 f0       	brcs	.+16     	; 0x144a <__ltsf2+0x56>
    143a:	89 89       	ldd	r24, Y+17	; 0x11
    143c:	82 30       	cpi	r24, 0x02	; 2
    143e:	28 f0       	brcs	.+10     	; 0x144a <__ltsf2+0x56>
    1440:	c7 01       	movw	r24, r14
    1442:	b8 01       	movw	r22, r16
    1444:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <__fpcmp_parts_f>
    1448:	01 c0       	rjmp	.+2      	; 0x144c <__ltsf2+0x58>
    144a:	81 e0       	ldi	r24, 0x01	; 1
    144c:	68 96       	adiw	r28, 0x18	; 24
    144e:	e6 e0       	ldi	r30, 0x06	; 6
    1450:	0c 94 5d 0d 	jmp	0x1aba	; 0x1aba <__epilogue_restores__+0x18>

00001454 <__floatsisf>:
    1454:	a8 e0       	ldi	r26, 0x08	; 8
    1456:	b0 e0       	ldi	r27, 0x00	; 0
    1458:	e0 e3       	ldi	r30, 0x30	; 48
    145a:	fa e0       	ldi	r31, 0x0A	; 10
    145c:	0c 94 3e 0d 	jmp	0x1a7c	; 0x1a7c <__prologue_saves__+0x12>
    1460:	9b 01       	movw	r18, r22
    1462:	ac 01       	movw	r20, r24
    1464:	83 e0       	ldi	r24, 0x03	; 3
    1466:	89 83       	std	Y+1, r24	; 0x01
    1468:	da 01       	movw	r26, r20
    146a:	c9 01       	movw	r24, r18
    146c:	88 27       	eor	r24, r24
    146e:	b7 fd       	sbrc	r27, 7
    1470:	83 95       	inc	r24
    1472:	99 27       	eor	r25, r25
    1474:	aa 27       	eor	r26, r26
    1476:	bb 27       	eor	r27, r27
    1478:	b8 2e       	mov	r11, r24
    147a:	21 15       	cp	r18, r1
    147c:	31 05       	cpc	r19, r1
    147e:	41 05       	cpc	r20, r1
    1480:	51 05       	cpc	r21, r1
    1482:	19 f4       	brne	.+6      	; 0x148a <__floatsisf+0x36>
    1484:	82 e0       	ldi	r24, 0x02	; 2
    1486:	89 83       	std	Y+1, r24	; 0x01
    1488:	3a c0       	rjmp	.+116    	; 0x14fe <__floatsisf+0xaa>
    148a:	88 23       	and	r24, r24
    148c:	a9 f0       	breq	.+42     	; 0x14b8 <__floatsisf+0x64>
    148e:	20 30       	cpi	r18, 0x00	; 0
    1490:	80 e0       	ldi	r24, 0x00	; 0
    1492:	38 07       	cpc	r19, r24
    1494:	80 e0       	ldi	r24, 0x00	; 0
    1496:	48 07       	cpc	r20, r24
    1498:	80 e8       	ldi	r24, 0x80	; 128
    149a:	58 07       	cpc	r21, r24
    149c:	29 f4       	brne	.+10     	; 0x14a8 <__floatsisf+0x54>
    149e:	60 e0       	ldi	r22, 0x00	; 0
    14a0:	70 e0       	ldi	r23, 0x00	; 0
    14a2:	80 e0       	ldi	r24, 0x00	; 0
    14a4:	9f ec       	ldi	r25, 0xCF	; 207
    14a6:	30 c0       	rjmp	.+96     	; 0x1508 <__floatsisf+0xb4>
    14a8:	ee 24       	eor	r14, r14
    14aa:	ff 24       	eor	r15, r15
    14ac:	87 01       	movw	r16, r14
    14ae:	e2 1a       	sub	r14, r18
    14b0:	f3 0a       	sbc	r15, r19
    14b2:	04 0b       	sbc	r16, r20
    14b4:	15 0b       	sbc	r17, r21
    14b6:	02 c0       	rjmp	.+4      	; 0x14bc <__floatsisf+0x68>
    14b8:	79 01       	movw	r14, r18
    14ba:	8a 01       	movw	r16, r20
    14bc:	8e e1       	ldi	r24, 0x1E	; 30
    14be:	c8 2e       	mov	r12, r24
    14c0:	d1 2c       	mov	r13, r1
    14c2:	dc 82       	std	Y+4, r13	; 0x04
    14c4:	cb 82       	std	Y+3, r12	; 0x03
    14c6:	ed 82       	std	Y+5, r14	; 0x05
    14c8:	fe 82       	std	Y+6, r15	; 0x06
    14ca:	0f 83       	std	Y+7, r16	; 0x07
    14cc:	18 87       	std	Y+8, r17	; 0x08
    14ce:	c8 01       	movw	r24, r16
    14d0:	b7 01       	movw	r22, r14
    14d2:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <__clzsi2>
    14d6:	01 97       	sbiw	r24, 0x01	; 1
    14d8:	18 16       	cp	r1, r24
    14da:	19 06       	cpc	r1, r25
    14dc:	84 f4       	brge	.+32     	; 0x14fe <__floatsisf+0xaa>
    14de:	08 2e       	mov	r0, r24
    14e0:	04 c0       	rjmp	.+8      	; 0x14ea <__floatsisf+0x96>
    14e2:	ee 0c       	add	r14, r14
    14e4:	ff 1c       	adc	r15, r15
    14e6:	00 1f       	adc	r16, r16
    14e8:	11 1f       	adc	r17, r17
    14ea:	0a 94       	dec	r0
    14ec:	d2 f7       	brpl	.-12     	; 0x14e2 <__floatsisf+0x8e>
    14ee:	ed 82       	std	Y+5, r14	; 0x05
    14f0:	fe 82       	std	Y+6, r15	; 0x06
    14f2:	0f 83       	std	Y+7, r16	; 0x07
    14f4:	18 87       	std	Y+8, r17	; 0x08
    14f6:	c8 1a       	sub	r12, r24
    14f8:	d9 0a       	sbc	r13, r25
    14fa:	dc 82       	std	Y+4, r13	; 0x04
    14fc:	cb 82       	std	Y+3, r12	; 0x03
    14fe:	ba 82       	std	Y+2, r11	; 0x02
    1500:	ce 01       	movw	r24, r28
    1502:	01 96       	adiw	r24, 0x01	; 1
    1504:	0e 94 2b 0b 	call	0x1656	; 0x1656 <__pack_f>
    1508:	28 96       	adiw	r28, 0x08	; 8
    150a:	e9 e0       	ldi	r30, 0x09	; 9
    150c:	0c 94 5a 0d 	jmp	0x1ab4	; 0x1ab4 <__epilogue_restores__+0x12>

00001510 <__fixsfsi>:
    1510:	ac e0       	ldi	r26, 0x0C	; 12
    1512:	b0 e0       	ldi	r27, 0x00	; 0
    1514:	ee e8       	ldi	r30, 0x8E	; 142
    1516:	fa e0       	ldi	r31, 0x0A	; 10
    1518:	0c 94 45 0d 	jmp	0x1a8a	; 0x1a8a <__prologue_saves__+0x20>
    151c:	69 83       	std	Y+1, r22	; 0x01
    151e:	7a 83       	std	Y+2, r23	; 0x02
    1520:	8b 83       	std	Y+3, r24	; 0x03
    1522:	9c 83       	std	Y+4, r25	; 0x04
    1524:	ce 01       	movw	r24, r28
    1526:	01 96       	adiw	r24, 0x01	; 1
    1528:	be 01       	movw	r22, r28
    152a:	6b 5f       	subi	r22, 0xFB	; 251
    152c:	7f 4f       	sbci	r23, 0xFF	; 255
    152e:	0e 94 00 0c 	call	0x1800	; 0x1800 <__unpack_f>
    1532:	8d 81       	ldd	r24, Y+5	; 0x05
    1534:	82 30       	cpi	r24, 0x02	; 2
    1536:	61 f1       	breq	.+88     	; 0x1590 <__fixsfsi+0x80>
    1538:	82 30       	cpi	r24, 0x02	; 2
    153a:	50 f1       	brcs	.+84     	; 0x1590 <__fixsfsi+0x80>
    153c:	84 30       	cpi	r24, 0x04	; 4
    153e:	21 f4       	brne	.+8      	; 0x1548 <__fixsfsi+0x38>
    1540:	8e 81       	ldd	r24, Y+6	; 0x06
    1542:	88 23       	and	r24, r24
    1544:	51 f1       	breq	.+84     	; 0x159a <__fixsfsi+0x8a>
    1546:	2e c0       	rjmp	.+92     	; 0x15a4 <__fixsfsi+0x94>
    1548:	2f 81       	ldd	r18, Y+7	; 0x07
    154a:	38 85       	ldd	r19, Y+8	; 0x08
    154c:	37 fd       	sbrc	r19, 7
    154e:	20 c0       	rjmp	.+64     	; 0x1590 <__fixsfsi+0x80>
    1550:	6e 81       	ldd	r22, Y+6	; 0x06
    1552:	2f 31       	cpi	r18, 0x1F	; 31
    1554:	31 05       	cpc	r19, r1
    1556:	1c f0       	brlt	.+6      	; 0x155e <__fixsfsi+0x4e>
    1558:	66 23       	and	r22, r22
    155a:	f9 f0       	breq	.+62     	; 0x159a <__fixsfsi+0x8a>
    155c:	23 c0       	rjmp	.+70     	; 0x15a4 <__fixsfsi+0x94>
    155e:	8e e1       	ldi	r24, 0x1E	; 30
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	82 1b       	sub	r24, r18
    1564:	93 0b       	sbc	r25, r19
    1566:	29 85       	ldd	r18, Y+9	; 0x09
    1568:	3a 85       	ldd	r19, Y+10	; 0x0a
    156a:	4b 85       	ldd	r20, Y+11	; 0x0b
    156c:	5c 85       	ldd	r21, Y+12	; 0x0c
    156e:	04 c0       	rjmp	.+8      	; 0x1578 <__fixsfsi+0x68>
    1570:	56 95       	lsr	r21
    1572:	47 95       	ror	r20
    1574:	37 95       	ror	r19
    1576:	27 95       	ror	r18
    1578:	8a 95       	dec	r24
    157a:	d2 f7       	brpl	.-12     	; 0x1570 <__fixsfsi+0x60>
    157c:	66 23       	and	r22, r22
    157e:	b1 f0       	breq	.+44     	; 0x15ac <__fixsfsi+0x9c>
    1580:	50 95       	com	r21
    1582:	40 95       	com	r20
    1584:	30 95       	com	r19
    1586:	21 95       	neg	r18
    1588:	3f 4f       	sbci	r19, 0xFF	; 255
    158a:	4f 4f       	sbci	r20, 0xFF	; 255
    158c:	5f 4f       	sbci	r21, 0xFF	; 255
    158e:	0e c0       	rjmp	.+28     	; 0x15ac <__fixsfsi+0x9c>
    1590:	20 e0       	ldi	r18, 0x00	; 0
    1592:	30 e0       	ldi	r19, 0x00	; 0
    1594:	40 e0       	ldi	r20, 0x00	; 0
    1596:	50 e0       	ldi	r21, 0x00	; 0
    1598:	09 c0       	rjmp	.+18     	; 0x15ac <__fixsfsi+0x9c>
    159a:	2f ef       	ldi	r18, 0xFF	; 255
    159c:	3f ef       	ldi	r19, 0xFF	; 255
    159e:	4f ef       	ldi	r20, 0xFF	; 255
    15a0:	5f e7       	ldi	r21, 0x7F	; 127
    15a2:	04 c0       	rjmp	.+8      	; 0x15ac <__fixsfsi+0x9c>
    15a4:	20 e0       	ldi	r18, 0x00	; 0
    15a6:	30 e0       	ldi	r19, 0x00	; 0
    15a8:	40 e0       	ldi	r20, 0x00	; 0
    15aa:	50 e8       	ldi	r21, 0x80	; 128
    15ac:	b9 01       	movw	r22, r18
    15ae:	ca 01       	movw	r24, r20
    15b0:	2c 96       	adiw	r28, 0x0c	; 12
    15b2:	e2 e0       	ldi	r30, 0x02	; 2
    15b4:	0c 94 61 0d 	jmp	0x1ac2	; 0x1ac2 <__epilogue_restores__+0x20>

000015b8 <__clzsi2>:
    15b8:	ef 92       	push	r14
    15ba:	ff 92       	push	r15
    15bc:	0f 93       	push	r16
    15be:	1f 93       	push	r17
    15c0:	7b 01       	movw	r14, r22
    15c2:	8c 01       	movw	r16, r24
    15c4:	80 e0       	ldi	r24, 0x00	; 0
    15c6:	e8 16       	cp	r14, r24
    15c8:	80 e0       	ldi	r24, 0x00	; 0
    15ca:	f8 06       	cpc	r15, r24
    15cc:	81 e0       	ldi	r24, 0x01	; 1
    15ce:	08 07       	cpc	r16, r24
    15d0:	80 e0       	ldi	r24, 0x00	; 0
    15d2:	18 07       	cpc	r17, r24
    15d4:	88 f4       	brcc	.+34     	; 0x15f8 <__clzsi2+0x40>
    15d6:	8f ef       	ldi	r24, 0xFF	; 255
    15d8:	e8 16       	cp	r14, r24
    15da:	f1 04       	cpc	r15, r1
    15dc:	01 05       	cpc	r16, r1
    15de:	11 05       	cpc	r17, r1
    15e0:	31 f0       	breq	.+12     	; 0x15ee <__clzsi2+0x36>
    15e2:	28 f0       	brcs	.+10     	; 0x15ee <__clzsi2+0x36>
    15e4:	88 e0       	ldi	r24, 0x08	; 8
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	a0 e0       	ldi	r26, 0x00	; 0
    15ea:	b0 e0       	ldi	r27, 0x00	; 0
    15ec:	17 c0       	rjmp	.+46     	; 0x161c <__clzsi2+0x64>
    15ee:	80 e0       	ldi	r24, 0x00	; 0
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	a0 e0       	ldi	r26, 0x00	; 0
    15f4:	b0 e0       	ldi	r27, 0x00	; 0
    15f6:	12 c0       	rjmp	.+36     	; 0x161c <__clzsi2+0x64>
    15f8:	80 e0       	ldi	r24, 0x00	; 0
    15fa:	e8 16       	cp	r14, r24
    15fc:	80 e0       	ldi	r24, 0x00	; 0
    15fe:	f8 06       	cpc	r15, r24
    1600:	80 e0       	ldi	r24, 0x00	; 0
    1602:	08 07       	cpc	r16, r24
    1604:	81 e0       	ldi	r24, 0x01	; 1
    1606:	18 07       	cpc	r17, r24
    1608:	28 f0       	brcs	.+10     	; 0x1614 <__clzsi2+0x5c>
    160a:	88 e1       	ldi	r24, 0x18	; 24
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	a0 e0       	ldi	r26, 0x00	; 0
    1610:	b0 e0       	ldi	r27, 0x00	; 0
    1612:	04 c0       	rjmp	.+8      	; 0x161c <__clzsi2+0x64>
    1614:	80 e1       	ldi	r24, 0x10	; 16
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	a0 e0       	ldi	r26, 0x00	; 0
    161a:	b0 e0       	ldi	r27, 0x00	; 0
    161c:	20 e2       	ldi	r18, 0x20	; 32
    161e:	30 e0       	ldi	r19, 0x00	; 0
    1620:	40 e0       	ldi	r20, 0x00	; 0
    1622:	50 e0       	ldi	r21, 0x00	; 0
    1624:	28 1b       	sub	r18, r24
    1626:	39 0b       	sbc	r19, r25
    1628:	4a 0b       	sbc	r20, r26
    162a:	5b 0b       	sbc	r21, r27
    162c:	04 c0       	rjmp	.+8      	; 0x1636 <__clzsi2+0x7e>
    162e:	16 95       	lsr	r17
    1630:	07 95       	ror	r16
    1632:	f7 94       	ror	r15
    1634:	e7 94       	ror	r14
    1636:	8a 95       	dec	r24
    1638:	d2 f7       	brpl	.-12     	; 0x162e <__clzsi2+0x76>
    163a:	f7 01       	movw	r30, r14
    163c:	e2 57       	subi	r30, 0x72	; 114
    163e:	fe 4f       	sbci	r31, 0xFE	; 254
    1640:	80 81       	ld	r24, Z
    1642:	28 1b       	sub	r18, r24
    1644:	31 09       	sbc	r19, r1
    1646:	41 09       	sbc	r20, r1
    1648:	51 09       	sbc	r21, r1
    164a:	c9 01       	movw	r24, r18
    164c:	1f 91       	pop	r17
    164e:	0f 91       	pop	r16
    1650:	ff 90       	pop	r15
    1652:	ef 90       	pop	r14
    1654:	08 95       	ret

00001656 <__pack_f>:
    1656:	df 92       	push	r13
    1658:	ef 92       	push	r14
    165a:	ff 92       	push	r15
    165c:	0f 93       	push	r16
    165e:	1f 93       	push	r17
    1660:	fc 01       	movw	r30, r24
    1662:	e4 80       	ldd	r14, Z+4	; 0x04
    1664:	f5 80       	ldd	r15, Z+5	; 0x05
    1666:	06 81       	ldd	r16, Z+6	; 0x06
    1668:	17 81       	ldd	r17, Z+7	; 0x07
    166a:	d1 80       	ldd	r13, Z+1	; 0x01
    166c:	80 81       	ld	r24, Z
    166e:	82 30       	cpi	r24, 0x02	; 2
    1670:	48 f4       	brcc	.+18     	; 0x1684 <__pack_f+0x2e>
    1672:	80 e0       	ldi	r24, 0x00	; 0
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	a0 e1       	ldi	r26, 0x10	; 16
    1678:	b0 e0       	ldi	r27, 0x00	; 0
    167a:	e8 2a       	or	r14, r24
    167c:	f9 2a       	or	r15, r25
    167e:	0a 2b       	or	r16, r26
    1680:	1b 2b       	or	r17, r27
    1682:	a5 c0       	rjmp	.+330    	; 0x17ce <__pack_f+0x178>
    1684:	84 30       	cpi	r24, 0x04	; 4
    1686:	09 f4       	brne	.+2      	; 0x168a <__pack_f+0x34>
    1688:	9f c0       	rjmp	.+318    	; 0x17c8 <__pack_f+0x172>
    168a:	82 30       	cpi	r24, 0x02	; 2
    168c:	21 f4       	brne	.+8      	; 0x1696 <__pack_f+0x40>
    168e:	ee 24       	eor	r14, r14
    1690:	ff 24       	eor	r15, r15
    1692:	87 01       	movw	r16, r14
    1694:	05 c0       	rjmp	.+10     	; 0x16a0 <__pack_f+0x4a>
    1696:	e1 14       	cp	r14, r1
    1698:	f1 04       	cpc	r15, r1
    169a:	01 05       	cpc	r16, r1
    169c:	11 05       	cpc	r17, r1
    169e:	19 f4       	brne	.+6      	; 0x16a6 <__pack_f+0x50>
    16a0:	e0 e0       	ldi	r30, 0x00	; 0
    16a2:	f0 e0       	ldi	r31, 0x00	; 0
    16a4:	96 c0       	rjmp	.+300    	; 0x17d2 <__pack_f+0x17c>
    16a6:	62 81       	ldd	r22, Z+2	; 0x02
    16a8:	73 81       	ldd	r23, Z+3	; 0x03
    16aa:	9f ef       	ldi	r25, 0xFF	; 255
    16ac:	62 38       	cpi	r22, 0x82	; 130
    16ae:	79 07       	cpc	r23, r25
    16b0:	0c f0       	brlt	.+2      	; 0x16b4 <__pack_f+0x5e>
    16b2:	5b c0       	rjmp	.+182    	; 0x176a <__pack_f+0x114>
    16b4:	22 e8       	ldi	r18, 0x82	; 130
    16b6:	3f ef       	ldi	r19, 0xFF	; 255
    16b8:	26 1b       	sub	r18, r22
    16ba:	37 0b       	sbc	r19, r23
    16bc:	2a 31       	cpi	r18, 0x1A	; 26
    16be:	31 05       	cpc	r19, r1
    16c0:	2c f0       	brlt	.+10     	; 0x16cc <__pack_f+0x76>
    16c2:	20 e0       	ldi	r18, 0x00	; 0
    16c4:	30 e0       	ldi	r19, 0x00	; 0
    16c6:	40 e0       	ldi	r20, 0x00	; 0
    16c8:	50 e0       	ldi	r21, 0x00	; 0
    16ca:	2a c0       	rjmp	.+84     	; 0x1720 <__pack_f+0xca>
    16cc:	b8 01       	movw	r22, r16
    16ce:	a7 01       	movw	r20, r14
    16d0:	02 2e       	mov	r0, r18
    16d2:	04 c0       	rjmp	.+8      	; 0x16dc <__pack_f+0x86>
    16d4:	76 95       	lsr	r23
    16d6:	67 95       	ror	r22
    16d8:	57 95       	ror	r21
    16da:	47 95       	ror	r20
    16dc:	0a 94       	dec	r0
    16de:	d2 f7       	brpl	.-12     	; 0x16d4 <__pack_f+0x7e>
    16e0:	81 e0       	ldi	r24, 0x01	; 1
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	a0 e0       	ldi	r26, 0x00	; 0
    16e6:	b0 e0       	ldi	r27, 0x00	; 0
    16e8:	04 c0       	rjmp	.+8      	; 0x16f2 <__pack_f+0x9c>
    16ea:	88 0f       	add	r24, r24
    16ec:	99 1f       	adc	r25, r25
    16ee:	aa 1f       	adc	r26, r26
    16f0:	bb 1f       	adc	r27, r27
    16f2:	2a 95       	dec	r18
    16f4:	d2 f7       	brpl	.-12     	; 0x16ea <__pack_f+0x94>
    16f6:	01 97       	sbiw	r24, 0x01	; 1
    16f8:	a1 09       	sbc	r26, r1
    16fa:	b1 09       	sbc	r27, r1
    16fc:	8e 21       	and	r24, r14
    16fe:	9f 21       	and	r25, r15
    1700:	a0 23       	and	r26, r16
    1702:	b1 23       	and	r27, r17
    1704:	00 97       	sbiw	r24, 0x00	; 0
    1706:	a1 05       	cpc	r26, r1
    1708:	b1 05       	cpc	r27, r1
    170a:	21 f0       	breq	.+8      	; 0x1714 <__pack_f+0xbe>
    170c:	81 e0       	ldi	r24, 0x01	; 1
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	a0 e0       	ldi	r26, 0x00	; 0
    1712:	b0 e0       	ldi	r27, 0x00	; 0
    1714:	9a 01       	movw	r18, r20
    1716:	ab 01       	movw	r20, r22
    1718:	28 2b       	or	r18, r24
    171a:	39 2b       	or	r19, r25
    171c:	4a 2b       	or	r20, r26
    171e:	5b 2b       	or	r21, r27
    1720:	da 01       	movw	r26, r20
    1722:	c9 01       	movw	r24, r18
    1724:	8f 77       	andi	r24, 0x7F	; 127
    1726:	90 70       	andi	r25, 0x00	; 0
    1728:	a0 70       	andi	r26, 0x00	; 0
    172a:	b0 70       	andi	r27, 0x00	; 0
    172c:	80 34       	cpi	r24, 0x40	; 64
    172e:	91 05       	cpc	r25, r1
    1730:	a1 05       	cpc	r26, r1
    1732:	b1 05       	cpc	r27, r1
    1734:	39 f4       	brne	.+14     	; 0x1744 <__pack_f+0xee>
    1736:	27 ff       	sbrs	r18, 7
    1738:	09 c0       	rjmp	.+18     	; 0x174c <__pack_f+0xf6>
    173a:	20 5c       	subi	r18, 0xC0	; 192
    173c:	3f 4f       	sbci	r19, 0xFF	; 255
    173e:	4f 4f       	sbci	r20, 0xFF	; 255
    1740:	5f 4f       	sbci	r21, 0xFF	; 255
    1742:	04 c0       	rjmp	.+8      	; 0x174c <__pack_f+0xf6>
    1744:	21 5c       	subi	r18, 0xC1	; 193
    1746:	3f 4f       	sbci	r19, 0xFF	; 255
    1748:	4f 4f       	sbci	r20, 0xFF	; 255
    174a:	5f 4f       	sbci	r21, 0xFF	; 255
    174c:	e0 e0       	ldi	r30, 0x00	; 0
    174e:	f0 e0       	ldi	r31, 0x00	; 0
    1750:	20 30       	cpi	r18, 0x00	; 0
    1752:	a0 e0       	ldi	r26, 0x00	; 0
    1754:	3a 07       	cpc	r19, r26
    1756:	a0 e0       	ldi	r26, 0x00	; 0
    1758:	4a 07       	cpc	r20, r26
    175a:	a0 e4       	ldi	r26, 0x40	; 64
    175c:	5a 07       	cpc	r21, r26
    175e:	10 f0       	brcs	.+4      	; 0x1764 <__pack_f+0x10e>
    1760:	e1 e0       	ldi	r30, 0x01	; 1
    1762:	f0 e0       	ldi	r31, 0x00	; 0
    1764:	79 01       	movw	r14, r18
    1766:	8a 01       	movw	r16, r20
    1768:	27 c0       	rjmp	.+78     	; 0x17b8 <__pack_f+0x162>
    176a:	60 38       	cpi	r22, 0x80	; 128
    176c:	71 05       	cpc	r23, r1
    176e:	64 f5       	brge	.+88     	; 0x17c8 <__pack_f+0x172>
    1770:	fb 01       	movw	r30, r22
    1772:	e1 58       	subi	r30, 0x81	; 129
    1774:	ff 4f       	sbci	r31, 0xFF	; 255
    1776:	d8 01       	movw	r26, r16
    1778:	c7 01       	movw	r24, r14
    177a:	8f 77       	andi	r24, 0x7F	; 127
    177c:	90 70       	andi	r25, 0x00	; 0
    177e:	a0 70       	andi	r26, 0x00	; 0
    1780:	b0 70       	andi	r27, 0x00	; 0
    1782:	80 34       	cpi	r24, 0x40	; 64
    1784:	91 05       	cpc	r25, r1
    1786:	a1 05       	cpc	r26, r1
    1788:	b1 05       	cpc	r27, r1
    178a:	39 f4       	brne	.+14     	; 0x179a <__pack_f+0x144>
    178c:	e7 fe       	sbrs	r14, 7
    178e:	0d c0       	rjmp	.+26     	; 0x17aa <__pack_f+0x154>
    1790:	80 e4       	ldi	r24, 0x40	; 64
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	a0 e0       	ldi	r26, 0x00	; 0
    1796:	b0 e0       	ldi	r27, 0x00	; 0
    1798:	04 c0       	rjmp	.+8      	; 0x17a2 <__pack_f+0x14c>
    179a:	8f e3       	ldi	r24, 0x3F	; 63
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	a0 e0       	ldi	r26, 0x00	; 0
    17a0:	b0 e0       	ldi	r27, 0x00	; 0
    17a2:	e8 0e       	add	r14, r24
    17a4:	f9 1e       	adc	r15, r25
    17a6:	0a 1f       	adc	r16, r26
    17a8:	1b 1f       	adc	r17, r27
    17aa:	17 ff       	sbrs	r17, 7
    17ac:	05 c0       	rjmp	.+10     	; 0x17b8 <__pack_f+0x162>
    17ae:	16 95       	lsr	r17
    17b0:	07 95       	ror	r16
    17b2:	f7 94       	ror	r15
    17b4:	e7 94       	ror	r14
    17b6:	31 96       	adiw	r30, 0x01	; 1
    17b8:	87 e0       	ldi	r24, 0x07	; 7
    17ba:	16 95       	lsr	r17
    17bc:	07 95       	ror	r16
    17be:	f7 94       	ror	r15
    17c0:	e7 94       	ror	r14
    17c2:	8a 95       	dec	r24
    17c4:	d1 f7       	brne	.-12     	; 0x17ba <__pack_f+0x164>
    17c6:	05 c0       	rjmp	.+10     	; 0x17d2 <__pack_f+0x17c>
    17c8:	ee 24       	eor	r14, r14
    17ca:	ff 24       	eor	r15, r15
    17cc:	87 01       	movw	r16, r14
    17ce:	ef ef       	ldi	r30, 0xFF	; 255
    17d0:	f0 e0       	ldi	r31, 0x00	; 0
    17d2:	6e 2f       	mov	r22, r30
    17d4:	67 95       	ror	r22
    17d6:	66 27       	eor	r22, r22
    17d8:	67 95       	ror	r22
    17da:	90 2f       	mov	r25, r16
    17dc:	9f 77       	andi	r25, 0x7F	; 127
    17de:	d7 94       	ror	r13
    17e0:	dd 24       	eor	r13, r13
    17e2:	d7 94       	ror	r13
    17e4:	8e 2f       	mov	r24, r30
    17e6:	86 95       	lsr	r24
    17e8:	49 2f       	mov	r20, r25
    17ea:	46 2b       	or	r20, r22
    17ec:	58 2f       	mov	r21, r24
    17ee:	5d 29       	or	r21, r13
    17f0:	b7 01       	movw	r22, r14
    17f2:	ca 01       	movw	r24, r20
    17f4:	1f 91       	pop	r17
    17f6:	0f 91       	pop	r16
    17f8:	ff 90       	pop	r15
    17fa:	ef 90       	pop	r14
    17fc:	df 90       	pop	r13
    17fe:	08 95       	ret

00001800 <__unpack_f>:
    1800:	fc 01       	movw	r30, r24
    1802:	db 01       	movw	r26, r22
    1804:	40 81       	ld	r20, Z
    1806:	51 81       	ldd	r21, Z+1	; 0x01
    1808:	22 81       	ldd	r18, Z+2	; 0x02
    180a:	62 2f       	mov	r22, r18
    180c:	6f 77       	andi	r22, 0x7F	; 127
    180e:	70 e0       	ldi	r23, 0x00	; 0
    1810:	22 1f       	adc	r18, r18
    1812:	22 27       	eor	r18, r18
    1814:	22 1f       	adc	r18, r18
    1816:	93 81       	ldd	r25, Z+3	; 0x03
    1818:	89 2f       	mov	r24, r25
    181a:	88 0f       	add	r24, r24
    181c:	82 2b       	or	r24, r18
    181e:	28 2f       	mov	r18, r24
    1820:	30 e0       	ldi	r19, 0x00	; 0
    1822:	99 1f       	adc	r25, r25
    1824:	99 27       	eor	r25, r25
    1826:	99 1f       	adc	r25, r25
    1828:	11 96       	adiw	r26, 0x01	; 1
    182a:	9c 93       	st	X, r25
    182c:	11 97       	sbiw	r26, 0x01	; 1
    182e:	21 15       	cp	r18, r1
    1830:	31 05       	cpc	r19, r1
    1832:	a9 f5       	brne	.+106    	; 0x189e <__unpack_f+0x9e>
    1834:	41 15       	cp	r20, r1
    1836:	51 05       	cpc	r21, r1
    1838:	61 05       	cpc	r22, r1
    183a:	71 05       	cpc	r23, r1
    183c:	11 f4       	brne	.+4      	; 0x1842 <__unpack_f+0x42>
    183e:	82 e0       	ldi	r24, 0x02	; 2
    1840:	37 c0       	rjmp	.+110    	; 0x18b0 <__unpack_f+0xb0>
    1842:	82 e8       	ldi	r24, 0x82	; 130
    1844:	9f ef       	ldi	r25, 0xFF	; 255
    1846:	13 96       	adiw	r26, 0x03	; 3
    1848:	9c 93       	st	X, r25
    184a:	8e 93       	st	-X, r24
    184c:	12 97       	sbiw	r26, 0x02	; 2
    184e:	9a 01       	movw	r18, r20
    1850:	ab 01       	movw	r20, r22
    1852:	67 e0       	ldi	r22, 0x07	; 7
    1854:	22 0f       	add	r18, r18
    1856:	33 1f       	adc	r19, r19
    1858:	44 1f       	adc	r20, r20
    185a:	55 1f       	adc	r21, r21
    185c:	6a 95       	dec	r22
    185e:	d1 f7       	brne	.-12     	; 0x1854 <__unpack_f+0x54>
    1860:	83 e0       	ldi	r24, 0x03	; 3
    1862:	8c 93       	st	X, r24
    1864:	0d c0       	rjmp	.+26     	; 0x1880 <__unpack_f+0x80>
    1866:	22 0f       	add	r18, r18
    1868:	33 1f       	adc	r19, r19
    186a:	44 1f       	adc	r20, r20
    186c:	55 1f       	adc	r21, r21
    186e:	12 96       	adiw	r26, 0x02	; 2
    1870:	8d 91       	ld	r24, X+
    1872:	9c 91       	ld	r25, X
    1874:	13 97       	sbiw	r26, 0x03	; 3
    1876:	01 97       	sbiw	r24, 0x01	; 1
    1878:	13 96       	adiw	r26, 0x03	; 3
    187a:	9c 93       	st	X, r25
    187c:	8e 93       	st	-X, r24
    187e:	12 97       	sbiw	r26, 0x02	; 2
    1880:	20 30       	cpi	r18, 0x00	; 0
    1882:	80 e0       	ldi	r24, 0x00	; 0
    1884:	38 07       	cpc	r19, r24
    1886:	80 e0       	ldi	r24, 0x00	; 0
    1888:	48 07       	cpc	r20, r24
    188a:	80 e4       	ldi	r24, 0x40	; 64
    188c:	58 07       	cpc	r21, r24
    188e:	58 f3       	brcs	.-42     	; 0x1866 <__unpack_f+0x66>
    1890:	14 96       	adiw	r26, 0x04	; 4
    1892:	2d 93       	st	X+, r18
    1894:	3d 93       	st	X+, r19
    1896:	4d 93       	st	X+, r20
    1898:	5c 93       	st	X, r21
    189a:	17 97       	sbiw	r26, 0x07	; 7
    189c:	08 95       	ret
    189e:	2f 3f       	cpi	r18, 0xFF	; 255
    18a0:	31 05       	cpc	r19, r1
    18a2:	79 f4       	brne	.+30     	; 0x18c2 <__unpack_f+0xc2>
    18a4:	41 15       	cp	r20, r1
    18a6:	51 05       	cpc	r21, r1
    18a8:	61 05       	cpc	r22, r1
    18aa:	71 05       	cpc	r23, r1
    18ac:	19 f4       	brne	.+6      	; 0x18b4 <__unpack_f+0xb4>
    18ae:	84 e0       	ldi	r24, 0x04	; 4
    18b0:	8c 93       	st	X, r24
    18b2:	08 95       	ret
    18b4:	64 ff       	sbrs	r22, 4
    18b6:	03 c0       	rjmp	.+6      	; 0x18be <__unpack_f+0xbe>
    18b8:	81 e0       	ldi	r24, 0x01	; 1
    18ba:	8c 93       	st	X, r24
    18bc:	12 c0       	rjmp	.+36     	; 0x18e2 <__unpack_f+0xe2>
    18be:	1c 92       	st	X, r1
    18c0:	10 c0       	rjmp	.+32     	; 0x18e2 <__unpack_f+0xe2>
    18c2:	2f 57       	subi	r18, 0x7F	; 127
    18c4:	30 40       	sbci	r19, 0x00	; 0
    18c6:	13 96       	adiw	r26, 0x03	; 3
    18c8:	3c 93       	st	X, r19
    18ca:	2e 93       	st	-X, r18
    18cc:	12 97       	sbiw	r26, 0x02	; 2
    18ce:	83 e0       	ldi	r24, 0x03	; 3
    18d0:	8c 93       	st	X, r24
    18d2:	87 e0       	ldi	r24, 0x07	; 7
    18d4:	44 0f       	add	r20, r20
    18d6:	55 1f       	adc	r21, r21
    18d8:	66 1f       	adc	r22, r22
    18da:	77 1f       	adc	r23, r23
    18dc:	8a 95       	dec	r24
    18de:	d1 f7       	brne	.-12     	; 0x18d4 <__unpack_f+0xd4>
    18e0:	70 64       	ori	r23, 0x40	; 64
    18e2:	14 96       	adiw	r26, 0x04	; 4
    18e4:	4d 93       	st	X+, r20
    18e6:	5d 93       	st	X+, r21
    18e8:	6d 93       	st	X+, r22
    18ea:	7c 93       	st	X, r23
    18ec:	17 97       	sbiw	r26, 0x07	; 7
    18ee:	08 95       	ret

000018f0 <__fpcmp_parts_f>:
    18f0:	1f 93       	push	r17
    18f2:	dc 01       	movw	r26, r24
    18f4:	fb 01       	movw	r30, r22
    18f6:	9c 91       	ld	r25, X
    18f8:	92 30       	cpi	r25, 0x02	; 2
    18fa:	08 f4       	brcc	.+2      	; 0x18fe <__fpcmp_parts_f+0xe>
    18fc:	47 c0       	rjmp	.+142    	; 0x198c <__fpcmp_parts_f+0x9c>
    18fe:	80 81       	ld	r24, Z
    1900:	82 30       	cpi	r24, 0x02	; 2
    1902:	08 f4       	brcc	.+2      	; 0x1906 <__fpcmp_parts_f+0x16>
    1904:	43 c0       	rjmp	.+134    	; 0x198c <__fpcmp_parts_f+0x9c>
    1906:	94 30       	cpi	r25, 0x04	; 4
    1908:	51 f4       	brne	.+20     	; 0x191e <__fpcmp_parts_f+0x2e>
    190a:	11 96       	adiw	r26, 0x01	; 1
    190c:	1c 91       	ld	r17, X
    190e:	84 30       	cpi	r24, 0x04	; 4
    1910:	99 f5       	brne	.+102    	; 0x1978 <__fpcmp_parts_f+0x88>
    1912:	81 81       	ldd	r24, Z+1	; 0x01
    1914:	68 2f       	mov	r22, r24
    1916:	70 e0       	ldi	r23, 0x00	; 0
    1918:	61 1b       	sub	r22, r17
    191a:	71 09       	sbc	r23, r1
    191c:	3f c0       	rjmp	.+126    	; 0x199c <__fpcmp_parts_f+0xac>
    191e:	84 30       	cpi	r24, 0x04	; 4
    1920:	21 f0       	breq	.+8      	; 0x192a <__fpcmp_parts_f+0x3a>
    1922:	92 30       	cpi	r25, 0x02	; 2
    1924:	31 f4       	brne	.+12     	; 0x1932 <__fpcmp_parts_f+0x42>
    1926:	82 30       	cpi	r24, 0x02	; 2
    1928:	b9 f1       	breq	.+110    	; 0x1998 <__fpcmp_parts_f+0xa8>
    192a:	81 81       	ldd	r24, Z+1	; 0x01
    192c:	88 23       	and	r24, r24
    192e:	89 f1       	breq	.+98     	; 0x1992 <__fpcmp_parts_f+0xa2>
    1930:	2d c0       	rjmp	.+90     	; 0x198c <__fpcmp_parts_f+0x9c>
    1932:	11 96       	adiw	r26, 0x01	; 1
    1934:	1c 91       	ld	r17, X
    1936:	11 97       	sbiw	r26, 0x01	; 1
    1938:	82 30       	cpi	r24, 0x02	; 2
    193a:	f1 f0       	breq	.+60     	; 0x1978 <__fpcmp_parts_f+0x88>
    193c:	81 81       	ldd	r24, Z+1	; 0x01
    193e:	18 17       	cp	r17, r24
    1940:	d9 f4       	brne	.+54     	; 0x1978 <__fpcmp_parts_f+0x88>
    1942:	12 96       	adiw	r26, 0x02	; 2
    1944:	2d 91       	ld	r18, X+
    1946:	3c 91       	ld	r19, X
    1948:	13 97       	sbiw	r26, 0x03	; 3
    194a:	82 81       	ldd	r24, Z+2	; 0x02
    194c:	93 81       	ldd	r25, Z+3	; 0x03
    194e:	82 17       	cp	r24, r18
    1950:	93 07       	cpc	r25, r19
    1952:	94 f0       	brlt	.+36     	; 0x1978 <__fpcmp_parts_f+0x88>
    1954:	28 17       	cp	r18, r24
    1956:	39 07       	cpc	r19, r25
    1958:	bc f0       	brlt	.+46     	; 0x1988 <__fpcmp_parts_f+0x98>
    195a:	14 96       	adiw	r26, 0x04	; 4
    195c:	8d 91       	ld	r24, X+
    195e:	9d 91       	ld	r25, X+
    1960:	0d 90       	ld	r0, X+
    1962:	bc 91       	ld	r27, X
    1964:	a0 2d       	mov	r26, r0
    1966:	24 81       	ldd	r18, Z+4	; 0x04
    1968:	35 81       	ldd	r19, Z+5	; 0x05
    196a:	46 81       	ldd	r20, Z+6	; 0x06
    196c:	57 81       	ldd	r21, Z+7	; 0x07
    196e:	28 17       	cp	r18, r24
    1970:	39 07       	cpc	r19, r25
    1972:	4a 07       	cpc	r20, r26
    1974:	5b 07       	cpc	r21, r27
    1976:	18 f4       	brcc	.+6      	; 0x197e <__fpcmp_parts_f+0x8e>
    1978:	11 23       	and	r17, r17
    197a:	41 f0       	breq	.+16     	; 0x198c <__fpcmp_parts_f+0x9c>
    197c:	0a c0       	rjmp	.+20     	; 0x1992 <__fpcmp_parts_f+0xa2>
    197e:	82 17       	cp	r24, r18
    1980:	93 07       	cpc	r25, r19
    1982:	a4 07       	cpc	r26, r20
    1984:	b5 07       	cpc	r27, r21
    1986:	40 f4       	brcc	.+16     	; 0x1998 <__fpcmp_parts_f+0xa8>
    1988:	11 23       	and	r17, r17
    198a:	19 f0       	breq	.+6      	; 0x1992 <__fpcmp_parts_f+0xa2>
    198c:	61 e0       	ldi	r22, 0x01	; 1
    198e:	70 e0       	ldi	r23, 0x00	; 0
    1990:	05 c0       	rjmp	.+10     	; 0x199c <__fpcmp_parts_f+0xac>
    1992:	6f ef       	ldi	r22, 0xFF	; 255
    1994:	7f ef       	ldi	r23, 0xFF	; 255
    1996:	02 c0       	rjmp	.+4      	; 0x199c <__fpcmp_parts_f+0xac>
    1998:	60 e0       	ldi	r22, 0x00	; 0
    199a:	70 e0       	ldi	r23, 0x00	; 0
    199c:	cb 01       	movw	r24, r22
    199e:	1f 91       	pop	r17
    19a0:	08 95       	ret

000019a2 <__divmodhi4>:
    19a2:	97 fb       	bst	r25, 7
    19a4:	09 2e       	mov	r0, r25
    19a6:	07 26       	eor	r0, r23
    19a8:	0a d0       	rcall	.+20     	; 0x19be <__divmodhi4_neg1>
    19aa:	77 fd       	sbrc	r23, 7
    19ac:	04 d0       	rcall	.+8      	; 0x19b6 <__divmodhi4_neg2>
    19ae:	27 d0       	rcall	.+78     	; 0x19fe <__udivmodhi4>
    19b0:	06 d0       	rcall	.+12     	; 0x19be <__divmodhi4_neg1>
    19b2:	00 20       	and	r0, r0
    19b4:	1a f4       	brpl	.+6      	; 0x19bc <__divmodhi4_exit>

000019b6 <__divmodhi4_neg2>:
    19b6:	70 95       	com	r23
    19b8:	61 95       	neg	r22
    19ba:	7f 4f       	sbci	r23, 0xFF	; 255

000019bc <__divmodhi4_exit>:
    19bc:	08 95       	ret

000019be <__divmodhi4_neg1>:
    19be:	f6 f7       	brtc	.-4      	; 0x19bc <__divmodhi4_exit>
    19c0:	90 95       	com	r25
    19c2:	81 95       	neg	r24
    19c4:	9f 4f       	sbci	r25, 0xFF	; 255
    19c6:	08 95       	ret

000019c8 <__divmodsi4>:
    19c8:	97 fb       	bst	r25, 7
    19ca:	09 2e       	mov	r0, r25
    19cc:	05 26       	eor	r0, r21
    19ce:	0e d0       	rcall	.+28     	; 0x19ec <__divmodsi4_neg1>
    19d0:	57 fd       	sbrc	r21, 7
    19d2:	04 d0       	rcall	.+8      	; 0x19dc <__divmodsi4_neg2>
    19d4:	28 d0       	rcall	.+80     	; 0x1a26 <__udivmodsi4>
    19d6:	0a d0       	rcall	.+20     	; 0x19ec <__divmodsi4_neg1>
    19d8:	00 1c       	adc	r0, r0
    19da:	38 f4       	brcc	.+14     	; 0x19ea <__divmodsi4_exit>

000019dc <__divmodsi4_neg2>:
    19dc:	50 95       	com	r21
    19de:	40 95       	com	r20
    19e0:	30 95       	com	r19
    19e2:	21 95       	neg	r18
    19e4:	3f 4f       	sbci	r19, 0xFF	; 255
    19e6:	4f 4f       	sbci	r20, 0xFF	; 255
    19e8:	5f 4f       	sbci	r21, 0xFF	; 255

000019ea <__divmodsi4_exit>:
    19ea:	08 95       	ret

000019ec <__divmodsi4_neg1>:
    19ec:	f6 f7       	brtc	.-4      	; 0x19ea <__divmodsi4_exit>
    19ee:	90 95       	com	r25
    19f0:	80 95       	com	r24
    19f2:	70 95       	com	r23
    19f4:	61 95       	neg	r22
    19f6:	7f 4f       	sbci	r23, 0xFF	; 255
    19f8:	8f 4f       	sbci	r24, 0xFF	; 255
    19fa:	9f 4f       	sbci	r25, 0xFF	; 255
    19fc:	08 95       	ret

000019fe <__udivmodhi4>:
    19fe:	aa 1b       	sub	r26, r26
    1a00:	bb 1b       	sub	r27, r27
    1a02:	51 e1       	ldi	r21, 0x11	; 17
    1a04:	07 c0       	rjmp	.+14     	; 0x1a14 <__udivmodhi4_ep>

00001a06 <__udivmodhi4_loop>:
    1a06:	aa 1f       	adc	r26, r26
    1a08:	bb 1f       	adc	r27, r27
    1a0a:	a6 17       	cp	r26, r22
    1a0c:	b7 07       	cpc	r27, r23
    1a0e:	10 f0       	brcs	.+4      	; 0x1a14 <__udivmodhi4_ep>
    1a10:	a6 1b       	sub	r26, r22
    1a12:	b7 0b       	sbc	r27, r23

00001a14 <__udivmodhi4_ep>:
    1a14:	88 1f       	adc	r24, r24
    1a16:	99 1f       	adc	r25, r25
    1a18:	5a 95       	dec	r21
    1a1a:	a9 f7       	brne	.-22     	; 0x1a06 <__udivmodhi4_loop>
    1a1c:	80 95       	com	r24
    1a1e:	90 95       	com	r25
    1a20:	bc 01       	movw	r22, r24
    1a22:	cd 01       	movw	r24, r26
    1a24:	08 95       	ret

00001a26 <__udivmodsi4>:
    1a26:	a1 e2       	ldi	r26, 0x21	; 33
    1a28:	1a 2e       	mov	r1, r26
    1a2a:	aa 1b       	sub	r26, r26
    1a2c:	bb 1b       	sub	r27, r27
    1a2e:	fd 01       	movw	r30, r26
    1a30:	0d c0       	rjmp	.+26     	; 0x1a4c <__udivmodsi4_ep>

00001a32 <__udivmodsi4_loop>:
    1a32:	aa 1f       	adc	r26, r26
    1a34:	bb 1f       	adc	r27, r27
    1a36:	ee 1f       	adc	r30, r30
    1a38:	ff 1f       	adc	r31, r31
    1a3a:	a2 17       	cp	r26, r18
    1a3c:	b3 07       	cpc	r27, r19
    1a3e:	e4 07       	cpc	r30, r20
    1a40:	f5 07       	cpc	r31, r21
    1a42:	20 f0       	brcs	.+8      	; 0x1a4c <__udivmodsi4_ep>
    1a44:	a2 1b       	sub	r26, r18
    1a46:	b3 0b       	sbc	r27, r19
    1a48:	e4 0b       	sbc	r30, r20
    1a4a:	f5 0b       	sbc	r31, r21

00001a4c <__udivmodsi4_ep>:
    1a4c:	66 1f       	adc	r22, r22
    1a4e:	77 1f       	adc	r23, r23
    1a50:	88 1f       	adc	r24, r24
    1a52:	99 1f       	adc	r25, r25
    1a54:	1a 94       	dec	r1
    1a56:	69 f7       	brne	.-38     	; 0x1a32 <__udivmodsi4_loop>
    1a58:	60 95       	com	r22
    1a5a:	70 95       	com	r23
    1a5c:	80 95       	com	r24
    1a5e:	90 95       	com	r25
    1a60:	9b 01       	movw	r18, r22
    1a62:	ac 01       	movw	r20, r24
    1a64:	bd 01       	movw	r22, r26
    1a66:	cf 01       	movw	r24, r30
    1a68:	08 95       	ret

00001a6a <__prologue_saves__>:
    1a6a:	2f 92       	push	r2
    1a6c:	3f 92       	push	r3
    1a6e:	4f 92       	push	r4
    1a70:	5f 92       	push	r5
    1a72:	6f 92       	push	r6
    1a74:	7f 92       	push	r7
    1a76:	8f 92       	push	r8
    1a78:	9f 92       	push	r9
    1a7a:	af 92       	push	r10
    1a7c:	bf 92       	push	r11
    1a7e:	cf 92       	push	r12
    1a80:	df 92       	push	r13
    1a82:	ef 92       	push	r14
    1a84:	ff 92       	push	r15
    1a86:	0f 93       	push	r16
    1a88:	1f 93       	push	r17
    1a8a:	cf 93       	push	r28
    1a8c:	df 93       	push	r29
    1a8e:	cd b7       	in	r28, 0x3d	; 61
    1a90:	de b7       	in	r29, 0x3e	; 62
    1a92:	ca 1b       	sub	r28, r26
    1a94:	db 0b       	sbc	r29, r27
    1a96:	0f b6       	in	r0, 0x3f	; 63
    1a98:	f8 94       	cli
    1a9a:	de bf       	out	0x3e, r29	; 62
    1a9c:	0f be       	out	0x3f, r0	; 63
    1a9e:	cd bf       	out	0x3d, r28	; 61
    1aa0:	09 94       	ijmp

00001aa2 <__epilogue_restores__>:
    1aa2:	2a 88       	ldd	r2, Y+18	; 0x12
    1aa4:	39 88       	ldd	r3, Y+17	; 0x11
    1aa6:	48 88       	ldd	r4, Y+16	; 0x10
    1aa8:	5f 84       	ldd	r5, Y+15	; 0x0f
    1aaa:	6e 84       	ldd	r6, Y+14	; 0x0e
    1aac:	7d 84       	ldd	r7, Y+13	; 0x0d
    1aae:	8c 84       	ldd	r8, Y+12	; 0x0c
    1ab0:	9b 84       	ldd	r9, Y+11	; 0x0b
    1ab2:	aa 84       	ldd	r10, Y+10	; 0x0a
    1ab4:	b9 84       	ldd	r11, Y+9	; 0x09
    1ab6:	c8 84       	ldd	r12, Y+8	; 0x08
    1ab8:	df 80       	ldd	r13, Y+7	; 0x07
    1aba:	ee 80       	ldd	r14, Y+6	; 0x06
    1abc:	fd 80       	ldd	r15, Y+5	; 0x05
    1abe:	0c 81       	ldd	r16, Y+4	; 0x04
    1ac0:	1b 81       	ldd	r17, Y+3	; 0x03
    1ac2:	aa 81       	ldd	r26, Y+2	; 0x02
    1ac4:	b9 81       	ldd	r27, Y+1	; 0x01
    1ac6:	ce 0f       	add	r28, r30
    1ac8:	d1 1d       	adc	r29, r1
    1aca:	0f b6       	in	r0, 0x3f	; 63
    1acc:	f8 94       	cli
    1ace:	de bf       	out	0x3e, r29	; 62
    1ad0:	0f be       	out	0x3f, r0	; 63
    1ad2:	cd bf       	out	0x3d, r28	; 61
    1ad4:	ed 01       	movw	r28, r26
    1ad6:	08 95       	ret

00001ad8 <do_rand>:
    1ad8:	af 92       	push	r10
    1ada:	bf 92       	push	r11
    1adc:	cf 92       	push	r12
    1ade:	df 92       	push	r13
    1ae0:	ef 92       	push	r14
    1ae2:	ff 92       	push	r15
    1ae4:	0f 93       	push	r16
    1ae6:	1f 93       	push	r17
    1ae8:	cf 93       	push	r28
    1aea:	df 93       	push	r29
    1aec:	ec 01       	movw	r28, r24
    1aee:	a8 80       	ld	r10, Y
    1af0:	b9 80       	ldd	r11, Y+1	; 0x01
    1af2:	ca 80       	ldd	r12, Y+2	; 0x02
    1af4:	db 80       	ldd	r13, Y+3	; 0x03
    1af6:	a1 14       	cp	r10, r1
    1af8:	b1 04       	cpc	r11, r1
    1afa:	c1 04       	cpc	r12, r1
    1afc:	d1 04       	cpc	r13, r1
    1afe:	41 f4       	brne	.+16     	; 0x1b10 <do_rand+0x38>
    1b00:	84 e2       	ldi	r24, 0x24	; 36
    1b02:	a8 2e       	mov	r10, r24
    1b04:	89 ed       	ldi	r24, 0xD9	; 217
    1b06:	b8 2e       	mov	r11, r24
    1b08:	8b e5       	ldi	r24, 0x5B	; 91
    1b0a:	c8 2e       	mov	r12, r24
    1b0c:	87 e0       	ldi	r24, 0x07	; 7
    1b0e:	d8 2e       	mov	r13, r24
    1b10:	c6 01       	movw	r24, r12
    1b12:	b5 01       	movw	r22, r10
    1b14:	2d e1       	ldi	r18, 0x1D	; 29
    1b16:	33 ef       	ldi	r19, 0xF3	; 243
    1b18:	41 e0       	ldi	r20, 0x01	; 1
    1b1a:	50 e0       	ldi	r21, 0x00	; 0
    1b1c:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <__divmodsi4>
    1b20:	27 ea       	ldi	r18, 0xA7	; 167
    1b22:	31 e4       	ldi	r19, 0x41	; 65
    1b24:	40 e0       	ldi	r20, 0x00	; 0
    1b26:	50 e0       	ldi	r21, 0x00	; 0
    1b28:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <__mulsi3>
    1b2c:	7b 01       	movw	r14, r22
    1b2e:	8c 01       	movw	r16, r24
    1b30:	c6 01       	movw	r24, r12
    1b32:	b5 01       	movw	r22, r10
    1b34:	2d e1       	ldi	r18, 0x1D	; 29
    1b36:	33 ef       	ldi	r19, 0xF3	; 243
    1b38:	41 e0       	ldi	r20, 0x01	; 1
    1b3a:	50 e0       	ldi	r21, 0x00	; 0
    1b3c:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <__divmodsi4>
    1b40:	ca 01       	movw	r24, r20
    1b42:	b9 01       	movw	r22, r18
    1b44:	2c ee       	ldi	r18, 0xEC	; 236
    1b46:	34 ef       	ldi	r19, 0xF4	; 244
    1b48:	4f ef       	ldi	r20, 0xFF	; 255
    1b4a:	5f ef       	ldi	r21, 0xFF	; 255
    1b4c:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <__mulsi3>
    1b50:	6e 0d       	add	r22, r14
    1b52:	7f 1d       	adc	r23, r15
    1b54:	80 1f       	adc	r24, r16
    1b56:	91 1f       	adc	r25, r17
    1b58:	97 ff       	sbrs	r25, 7
    1b5a:	04 c0       	rjmp	.+8      	; 0x1b64 <do_rand+0x8c>
    1b5c:	61 50       	subi	r22, 0x01	; 1
    1b5e:	70 40       	sbci	r23, 0x00	; 0
    1b60:	80 40       	sbci	r24, 0x00	; 0
    1b62:	90 48       	sbci	r25, 0x80	; 128
    1b64:	68 83       	st	Y, r22
    1b66:	79 83       	std	Y+1, r23	; 0x01
    1b68:	8a 83       	std	Y+2, r24	; 0x02
    1b6a:	9b 83       	std	Y+3, r25	; 0x03
    1b6c:	9b 01       	movw	r18, r22
    1b6e:	3f 77       	andi	r19, 0x7F	; 127
    1b70:	c9 01       	movw	r24, r18
    1b72:	df 91       	pop	r29
    1b74:	cf 91       	pop	r28
    1b76:	1f 91       	pop	r17
    1b78:	0f 91       	pop	r16
    1b7a:	ff 90       	pop	r15
    1b7c:	ef 90       	pop	r14
    1b7e:	df 90       	pop	r13
    1b80:	cf 90       	pop	r12
    1b82:	bf 90       	pop	r11
    1b84:	af 90       	pop	r10
    1b86:	08 95       	ret

00001b88 <rand_r>:
    1b88:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <do_rand>
    1b8c:	08 95       	ret

00001b8e <rand>:
    1b8e:	8e e8       	ldi	r24, 0x8E	; 142
    1b90:	92 e0       	ldi	r25, 0x02	; 2
    1b92:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <do_rand>
    1b96:	08 95       	ret

00001b98 <srand>:
    1b98:	a0 e0       	ldi	r26, 0x00	; 0
    1b9a:	b0 e0       	ldi	r27, 0x00	; 0
    1b9c:	80 93 8e 02 	sts	0x028E, r24
    1ba0:	90 93 8f 02 	sts	0x028F, r25
    1ba4:	a0 93 90 02 	sts	0x0290, r26
    1ba8:	b0 93 91 02 	sts	0x0291, r27
    1bac:	08 95       	ret

00001bae <__eerd_dword_m128>:
    1bae:	a6 e1       	ldi	r26, 0x16	; 22
    1bb0:	b0 e0       	ldi	r27, 0x00	; 0
    1bb2:	44 e0       	ldi	r20, 0x04	; 4
    1bb4:	50 e0       	ldi	r21, 0x00	; 0
    1bb6:	0c 94 ec 0d 	jmp	0x1bd8	; 0x1bd8 <__eerd_blraw_m128>

00001bba <__eewr_dword_m128>:
    1bba:	24 2f       	mov	r18, r20
    1bbc:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <__eewr_r18_m128>
    1bc0:	25 2f       	mov	r18, r21
    1bc2:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <__eewr_r18_m128>
    1bc6:	0c 94 e5 0d 	jmp	0x1bca	; 0x1bca <__eewr_word_m128>

00001bca <__eewr_word_m128>:
    1bca:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <__eewr_byte_m128>
    1bce:	27 2f       	mov	r18, r23
    1bd0:	0c 94 fb 0d 	jmp	0x1bf6	; 0x1bf6 <__eewr_r18_m128>

00001bd4 <__eerd_block_m128>:
    1bd4:	dc 01       	movw	r26, r24
    1bd6:	cb 01       	movw	r24, r22

00001bd8 <__eerd_blraw_m128>:
    1bd8:	fc 01       	movw	r30, r24
    1bda:	e1 99       	sbic	0x1c, 1	; 28
    1bdc:	fe cf       	rjmp	.-4      	; 0x1bda <__eerd_blraw_m128+0x2>
    1bde:	06 c0       	rjmp	.+12     	; 0x1bec <__eerd_blraw_m128+0x14>
    1be0:	ff bb       	out	0x1f, r31	; 31
    1be2:	ee bb       	out	0x1e, r30	; 30
    1be4:	e0 9a       	sbi	0x1c, 0	; 28
    1be6:	31 96       	adiw	r30, 0x01	; 1
    1be8:	0d b2       	in	r0, 0x1d	; 29
    1bea:	0d 92       	st	X+, r0
    1bec:	41 50       	subi	r20, 0x01	; 1
    1bee:	50 40       	sbci	r21, 0x00	; 0
    1bf0:	b8 f7       	brcc	.-18     	; 0x1be0 <__eerd_blraw_m128+0x8>
    1bf2:	08 95       	ret

00001bf4 <__eewr_byte_m128>:
    1bf4:	26 2f       	mov	r18, r22

00001bf6 <__eewr_r18_m128>:
    1bf6:	e1 99       	sbic	0x1c, 1	; 28
    1bf8:	fe cf       	rjmp	.-4      	; 0x1bf6 <__eewr_r18_m128>
    1bfa:	9f bb       	out	0x1f, r25	; 31
    1bfc:	8e bb       	out	0x1e, r24	; 30
    1bfe:	2d bb       	out	0x1d, r18	; 29
    1c00:	0f b6       	in	r0, 0x3f	; 63
    1c02:	f8 94       	cli
    1c04:	e2 9a       	sbi	0x1c, 2	; 28
    1c06:	e1 9a       	sbi	0x1c, 1	; 28
    1c08:	0f be       	out	0x3f, r0	; 63
    1c0a:	01 96       	adiw	r24, 0x01	; 1
    1c0c:	08 95       	ret

00001c0e <__mulsi3>:
    1c0e:	62 9f       	mul	r22, r18
    1c10:	d0 01       	movw	r26, r0
    1c12:	73 9f       	mul	r23, r19
    1c14:	f0 01       	movw	r30, r0
    1c16:	82 9f       	mul	r24, r18
    1c18:	e0 0d       	add	r30, r0
    1c1a:	f1 1d       	adc	r31, r1
    1c1c:	64 9f       	mul	r22, r20
    1c1e:	e0 0d       	add	r30, r0
    1c20:	f1 1d       	adc	r31, r1
    1c22:	92 9f       	mul	r25, r18
    1c24:	f0 0d       	add	r31, r0
    1c26:	83 9f       	mul	r24, r19
    1c28:	f0 0d       	add	r31, r0
    1c2a:	74 9f       	mul	r23, r20
    1c2c:	f0 0d       	add	r31, r0
    1c2e:	65 9f       	mul	r22, r21
    1c30:	f0 0d       	add	r31, r0
    1c32:	99 27       	eor	r25, r25
    1c34:	72 9f       	mul	r23, r18
    1c36:	b0 0d       	add	r27, r0
    1c38:	e1 1d       	adc	r30, r1
    1c3a:	f9 1f       	adc	r31, r25
    1c3c:	63 9f       	mul	r22, r19
    1c3e:	b0 0d       	add	r27, r0
    1c40:	e1 1d       	adc	r30, r1
    1c42:	f9 1f       	adc	r31, r25
    1c44:	bd 01       	movw	r22, r26
    1c46:	cf 01       	movw	r24, r30
    1c48:	11 24       	eor	r1, r1
    1c4a:	08 95       	ret

00001c4c <_exit>:
    1c4c:	f8 94       	cli

00001c4e <__stop_program>:
    1c4e:	ff cf       	rjmp	.-2      	; 0x1c4e <__stop_program>
