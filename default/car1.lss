
car1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000036  00800100  00000428  000004bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000428  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  00800136  00800136  000004f2  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  000004f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000f4  00000000  00000000  00000552  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000575  00000000  00000000  00000646  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002ab  00000000  00000000  00000bbb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000049c  00000000  00000000  00000e66  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000100  00000000  00000000  00001304  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000018a  00000000  00000000  00001404  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000260  00000000  00000000  0000158e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 67 00 	jmp	0xce	; 0xce <__vector_12>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e2       	ldi	r30, 0x28	; 40
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 33       	cpi	r26, 0x36	; 54
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a6 e3       	ldi	r26, 0x36	; 54
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a8 34       	cpi	r26, 0x48	; 72
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 18 01 	call	0x230	; 0x230 <main>
  c6:	0c 94 12 02 	jmp	0x424	; 0x424 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <__vector_12>:
        while (1) {

		}
}

ISR(TIMER1_COMPA_vect) {
  ce:	1f 92       	push	r1
  d0:	0f 92       	push	r0
  d2:	0f b6       	in	r0, 0x3f	; 63
  d4:	0f 92       	push	r0
  d6:	0b b6       	in	r0, 0x3b	; 59
  d8:	0f 92       	push	r0
  da:	11 24       	eor	r1, r1
  dc:	8f 93       	push	r24
  de:	9f 93       	push	r25
  e0:	ef 93       	push	r30
  e2:	ff 93       	push	r31

	/* vaihdetaan kaiutin pinnien tilat XOR operaatiolla */
 	PORTE ^= (1 << PE4) | (1 << PE5); 
  e4:	e3 e2       	ldi	r30, 0x23	; 35
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
  ea:	90 e3       	ldi	r25, 0x30	; 48
  ec:	89 27       	eor	r24, r25
  ee:	80 83       	st	Z, r24
}
  f0:	ff 91       	pop	r31
  f2:	ef 91       	pop	r30
  f4:	9f 91       	pop	r25
  f6:	8f 91       	pop	r24
  f8:	0f 90       	pop	r0
  fa:	0b be       	out	0x3b, r0	; 59
  fc:	0f 90       	pop	r0
  fe:	0f be       	out	0x3f, r0	; 63
 100:	0f 90       	pop	r0
 102:	1f 90       	pop	r1
 104:	18 95       	reti

00000106 <init>:
/* State Variables*/
char car_pos = 0;   // 0: 1st line of the LCD, 1: 2nd line
char road[15];      // 
int road_index;

void init(void) {
 106:	0f 93       	push	r16
 108:	1f 93       	push	r17
 10a:	cf 93       	push	r28
 10c:	df 93       	push	r29

   		/* estet‰‰n kaikki keskeytykset */
		cli();
 10e:	f8 94       	cli

        /* kaiutin pinnit ulostuloksi */
        DDRE  |=  (1 << PE4) | (1 << PE5);
 110:	e2 e2       	ldi	r30, 0x22	; 34
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	80 81       	ld	r24, Z
 116:	80 63       	ori	r24, 0x30	; 48
 118:	80 83       	st	Z, r24
        /* pinni PE4 nollataan */
        PORTE &= ~(1 << PE4);
 11a:	e3 e2       	ldi	r30, 0x23	; 35
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	80 81       	ld	r24, Z
 120:	8f 7e       	andi	r24, 0xEF	; 239
 122:	80 83       	st	Z, r24
        /* pinni PE5 asetetaan */
        PORTE |=  (1 << PE5);   
 124:	80 81       	ld	r24, Z
 126:	80 62       	ori	r24, 0x20	; 32
 128:	80 83       	st	Z, r24
        
        /* ajastin nollautuu, kun sen ja OCR1A rekisterin arvot ovat samat */
		/* set the timer to CTC mode */
        TCCR1A &= ~( (1 << WGM11) | (1 << WGM10) );
 12a:	ef e4       	ldi	r30, 0x4F	; 79
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 81       	ld	r24, Z
 130:	8c 7f       	andi	r24, 0xFC	; 252
 132:	80 83       	st	Z, r24
        TCCR1B |=    (1 << WGM12);
 134:	ae e4       	ldi	r26, 0x4E	; 78
 136:	b0 e0       	ldi	r27, 0x00	; 0
 138:	8c 91       	ld	r24, X
 13a:	88 60       	ori	r24, 0x08	; 8
 13c:	8c 93       	st	X, r24
        TCCR1B &=   ~(1 << WGM13);
 13e:	8c 91       	ld	r24, X
 140:	8f 7e       	andi	r24, 0xEF	; 239
 142:	8c 93       	st	X, r24

        /* salli keskeytys, jos ajastimen ja OCR1A rekisterin arvot ovat samat */
		/* enable Output Compare A Match Interrupt */
        //TIMSK |= (1 << OCIE1A);
        TIMSK &= ~(1 << OCIE1A);
 144:	e7 e5       	ldi	r30, 0x57	; 87
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	80 81       	ld	r24, Z
 14a:	8f 7e       	andi	r24, 0xEF	; 239
 14c:	80 83       	st	Z, r24
        /* set OCR1A register value to 0x003e (corresponds to ~250hz) */
        /* OCR1AH = 0x00; */
        /* OCR1AL = 0x3e; */

		/* set OCR1A register value to 0x0013 (corresponds to ~800hz) */
        OCR1AH = 0x00;
 14e:	1b bc       	out	0x2b, r1	; 43
        OCR1AL = 0x13;
 150:	83 e1       	ldi	r24, 0x13	; 19
 152:	8a bd       	out	0x2a, r24	; 42

        /* k‰ynnist‰ ajastin ja k‰yt‰ kellotaajuutena (16 000 000 / 1024) Hz */
		/* start the counter (16 000 000 / 1024) Hz */
        TCCR1B |= (1 << CS12) | (1 << CS10);
 154:	8c 91       	ld	r24, X
 156:	85 60       	ori	r24, 0x05	; 5
 158:	8c 93       	st	X, r24

		/* n‰pp‰in pinnit sis‰‰ntuloksi */
		DDRA &= ~(1 << PA0);
 15a:	ea e3       	ldi	r30, 0x3A	; 58
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	80 81       	ld	r24, Z
 160:	8e 7f       	andi	r24, 0xFE	; 254
 162:	80 83       	st	Z, r24
		DDRA &= ~(1 << PA2);
 164:	80 81       	ld	r24, Z
 166:	8b 7f       	andi	r24, 0xFB	; 251
 168:	80 83       	st	Z, r24
		DDRA &= ~(1 << PA4);
 16a:	80 81       	ld	r24, Z
 16c:	8f 7e       	andi	r24, 0xEF	; 239
 16e:	80 83       	st	Z, r24

		/* rele/led pinni ulostuloksi */
		DDRA |= (1 << PA6);
 170:	80 81       	ld	r24, Z
 172:	80 64       	ori	r24, 0x40	; 64
 174:	80 83       	st	Z, r24

		/* lcd-n‰ytˆn alustaminen */
		lcd_init();
 176:	0e 94 8a 01 	call	0x314	; 0x314 <lcd_init>
 17a:	05 e0       	ldi	r16, 0x05	; 5
 17c:	11 e0       	ldi	r17, 0x01	; 1
 17e:	c0 e0       	ldi	r28, 0x00	; 0
 180:	d0 e0       	ldi	r29, 0x00	; 0
        
        for (int i = 0; i < NGLYPHS; i++) {
            lcd_create_glyph(i + 1, glyphs[i]);	// create glyphs
 182:	21 96       	adiw	r28, 0x01	; 1
 184:	ce 01       	movw	r24, r28
 186:	b8 01       	movw	r22, r16
 188:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <lcd_create_glyph>
 18c:	08 5f       	subi	r16, 0xF8	; 248
 18e:	1f 4f       	sbci	r17, 0xFF	; 255
		DDRA |= (1 << PA6);

		/* lcd-n‰ytˆn alustaminen */
		lcd_init();
        
        for (int i = 0; i < NGLYPHS; i++) {
 190:	c6 30       	cpi	r28, 0x06	; 6
 192:	d1 05       	cpc	r29, r1
 194:	b1 f7       	brne	.-20     	; 0x182 <init+0x7c>
            lcd_create_glyph(i + 1, glyphs[i]);	// create glyphs
        }
		
        lcd_write_ctrl(LCD_ON);
 196:	8c e0       	ldi	r24, 0x0C	; 12
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	60 e0       	ldi	r22, 0x00	; 0
 19c:	70 e0       	ldi	r23, 0x00	; 0
 19e:	0e 94 6f 01 	call	0x2de	; 0x2de <lcd_write>
		lcd_write_ctrl(LCD_CLEAR);
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	60 e0       	ldi	r22, 0x00	; 0
 1a8:	70 e0       	ldi	r23, 0x00	; 0
 1aa:	0e 94 6f 01 	call	0x2de	; 0x2de <lcd_write>
        lcd_write_data('<');
 1ae:	8c e3       	ldi	r24, 0x3C	; 60
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	61 e0       	ldi	r22, 0x01	; 1
 1b4:	70 e0       	ldi	r23, 0x00	; 0
 1b6:	0e 94 6f 01 	call	0x2de	; 0x2de <lcd_write>
        lcd_write_data(BLANK);
 1ba:	80 e2       	ldi	r24, 0x20	; 32
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	61 e0       	ldi	r22, 0x01	; 1
 1c0:	70 e0       	ldi	r23, 0x00	; 0
 1c2:	0e 94 6f 01 	call	0x2de	; 0x2de <lcd_write>
        lcd_write_data(1);
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	61 e0       	ldi	r22, 0x01	; 1
 1cc:	70 e0       	ldi	r23, 0x00	; 0
 1ce:	0e 94 6f 01 	call	0x2de	; 0x2de <lcd_write>
        lcd_write_data(2);
 1d2:	82 e0       	ldi	r24, 0x02	; 2
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	61 e0       	ldi	r22, 0x01	; 1
 1d8:	70 e0       	ldi	r23, 0x00	; 0
 1da:	0e 94 6f 01 	call	0x2de	; 0x2de <lcd_write>
        lcd_write_data(3);
 1de:	83 e0       	ldi	r24, 0x03	; 3
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	61 e0       	ldi	r22, 0x01	; 1
 1e4:	70 e0       	ldi	r23, 0x00	; 0
 1e6:	0e 94 6f 01 	call	0x2de	; 0x2de <lcd_write>
        lcd_write_data(4);
 1ea:	84 e0       	ldi	r24, 0x04	; 4
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	61 e0       	ldi	r22, 0x01	; 1
 1f0:	70 e0       	ldi	r23, 0x00	; 0
 1f2:	0e 94 6f 01 	call	0x2de	; 0x2de <lcd_write>
        lcd_write_data(5);
 1f6:	85 e0       	ldi	r24, 0x05	; 5
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	61 e0       	ldi	r22, 0x01	; 1
 1fc:	70 e0       	ldi	r23, 0x00	; 0
 1fe:	0e 94 6f 01 	call	0x2de	; 0x2de <lcd_write>
        lcd_write_data(6);
 202:	86 e0       	ldi	r24, 0x06	; 6
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	61 e0       	ldi	r22, 0x01	; 1
 208:	70 e0       	ldi	r23, 0x00	; 0
 20a:	0e 94 6f 01 	call	0x2de	; 0x2de <lcd_write>
        lcd_write_data(BLANK);
 20e:	80 e2       	ldi	r24, 0x20	; 32
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	61 e0       	ldi	r22, 0x01	; 1
 214:	70 e0       	ldi	r23, 0x00	; 0
 216:	0e 94 6f 01 	call	0x2de	; 0x2de <lcd_write>
        lcd_write_data('>');
 21a:	8e e3       	ldi	r24, 0x3E	; 62
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	61 e0       	ldi	r22, 0x01	; 1
 220:	70 e0       	ldi	r23, 0x00	; 0
 222:	0e 94 6f 01 	call	0x2de	; 0x2de <lcd_write>
}
 226:	df 91       	pop	r29
 228:	cf 91       	pop	r28
 22a:	1f 91       	pop	r17
 22c:	0f 91       	pop	r16
 22e:	08 95       	ret

00000230 <main>:
int main(void) 
{


		/* alusta laitteen komponentit */
		init();
 230:	0e 94 83 00 	call	0x106	; 0x106 <init>
		sei();
 234:	78 94       	sei
 236:	ff cf       	rjmp	.-2      	; 0x236 <main+0x6>

00000238 <pulse>:
static int
pulse(void)
{
  int v;

  PORTC |= 4;                /* EN = 1 */
 238:	e5 e3       	ldi	r30, 0x35	; 53
 23a:	f0 e0       	ldi	r31, 0x00	; 0
 23c:	80 81       	ld	r24, Z
 23e:	84 60       	ori	r24, 0x04	; 4
 240:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 242:	80 e9       	ldi	r24, 0x90	; 144
 244:	91 e0       	ldi	r25, 0x01	; 1
 246:	01 97       	sbiw	r24, 0x01	; 1
 248:	f1 f7       	brne	.-4      	; 0x246 <pulse+0xe>
  _delay_ms(0.1);            /* short delay */
  v = PINC>>4;               /* read data bus */
 24a:	83 b3       	in	r24, 0x13	; 19
  PORTC &= ~4;               /* EN = 0 */
 24c:	90 81       	ld	r25, Z
 24e:	9b 7f       	andi	r25, 0xFB	; 251
 250:	90 83       	st	Z, r25

  return v;
}
 252:	82 95       	swap	r24
 254:	8f 70       	andi	r24, 0x0F	; 15
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	08 95       	ret

0000025a <read_nibble>:
}

static int
read_nibble(int rs)
{
  DDRC = 0x0F;               /* set data pins to input */
 25a:	9f e0       	ldi	r25, 0x0F	; 15
 25c:	94 bb       	out	0x14, r25	; 20
  PORTC = rs|2;              /* set register */
 25e:	82 60       	ori	r24, 0x02	; 2
 260:	85 bb       	out	0x15, r24	; 21
  return pulse();            /* read pulse */
 262:	0e 94 1c 01 	call	0x238	; 0x238 <pulse>
}
 266:	08 95       	ret

00000268 <read_byte>:
}

/* read a byte without waiting for the busy flag. */
static int
read_byte(int rs)
{
 268:	ef 92       	push	r14
 26a:	ff 92       	push	r15
 26c:	0f 93       	push	r16
 26e:	1f 93       	push	r17
 270:	7c 01       	movw	r14, r24
  int v;
  
  v = read_nibble(rs)<<4;
 272:	0e 94 2d 01 	call	0x25a	; 0x25a <read_nibble>
 276:	8c 01       	movw	r16, r24
 278:	02 95       	swap	r16
 27a:	12 95       	swap	r17
 27c:	10 7f       	andi	r17, 0xF0	; 240
 27e:	10 27       	eor	r17, r16
 280:	00 7f       	andi	r16, 0xF0	; 240
 282:	10 27       	eor	r17, r16
  v|= read_nibble(rs);
 284:	c7 01       	movw	r24, r14
 286:	0e 94 2d 01 	call	0x25a	; 0x25a <read_nibble>
 28a:	08 2b       	or	r16, r24
 28c:	19 2b       	or	r17, r25

  return v;
}
 28e:	80 2f       	mov	r24, r16
 290:	91 2f       	mov	r25, r17
 292:	1f 91       	pop	r17
 294:	0f 91       	pop	r16
 296:	ff 90       	pop	r15
 298:	ef 90       	pop	r14
 29a:	08 95       	ret

0000029c <write_nibble>:
}

static void
write_nibble(int v, int rs)
{
  DDRC = 0xFF;               /* set data pins to output */
 29c:	2f ef       	ldi	r18, 0xFF	; 255
 29e:	24 bb       	out	0x14, r18	; 20
  PORTC = rs|((v&0xF)<<4);   /* set register and data */
 2a0:	82 95       	swap	r24
 2a2:	92 95       	swap	r25
 2a4:	90 7f       	andi	r25, 0xF0	; 240
 2a6:	98 27       	eor	r25, r24
 2a8:	80 7f       	andi	r24, 0xF0	; 240
 2aa:	98 27       	eor	r25, r24
 2ac:	68 2b       	or	r22, r24
 2ae:	65 bb       	out	0x15, r22	; 21
  pulse();                   /* write pulse */
 2b0:	0e 94 1c 01 	call	0x238	; 0x238 <pulse>
}
 2b4:	08 95       	ret

000002b6 <wait>:

/* wait until the busy flag is clear. */
void
wait(void)
{
  while (read_byte(0)&0x80)
 2b6:	80 e0       	ldi	r24, 0x00	; 0
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	0e 94 34 01 	call	0x268	; 0x268 <read_byte>
 2be:	88 23       	and	r24, r24
 2c0:	d4 f3       	brlt	.-12     	; 0x2b6 <wait>
    ;
}
 2c2:	08 95       	ret

000002c4 <lcd_read>:
}

/* read a byte from lcd register rs. */
int
lcd_read(int rs)
{
 2c4:	0f 93       	push	r16
 2c6:	1f 93       	push	r17
  int v;
  
  v = read_byte(rs);
 2c8:	0e 94 34 01 	call	0x268	; 0x268 <read_byte>
 2cc:	18 2f       	mov	r17, r24
 2ce:	09 2f       	mov	r16, r25
  wait();
 2d0:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <wait>

  return v;
}
 2d4:	81 2f       	mov	r24, r17
 2d6:	90 2f       	mov	r25, r16
 2d8:	1f 91       	pop	r17
 2da:	0f 91       	pop	r16
 2dc:	08 95       	ret

000002de <lcd_write>:
}

/* write a byte into register rs (0 = control, 1 = data). */
void
lcd_write(int v, int rs)
{
 2de:	ef 92       	push	r14
 2e0:	ff 92       	push	r15
 2e2:	0f 93       	push	r16
 2e4:	1f 93       	push	r17
 2e6:	8c 01       	movw	r16, r24
 2e8:	7b 01       	movw	r14, r22
  write_nibble(v>>4,rs);     /* first the high nibble */
 2ea:	95 95       	asr	r25
 2ec:	87 95       	ror	r24
 2ee:	95 95       	asr	r25
 2f0:	87 95       	ror	r24
 2f2:	95 95       	asr	r25
 2f4:	87 95       	ror	r24
 2f6:	95 95       	asr	r25
 2f8:	87 95       	ror	r24
 2fa:	0e 94 4e 01 	call	0x29c	; 0x29c <write_nibble>
  write_nibble(v,rs);        /* and then the low */
 2fe:	c8 01       	movw	r24, r16
 300:	b7 01       	movw	r22, r14
 302:	0e 94 4e 01 	call	0x29c	; 0x29c <write_nibble>
  wait();
 306:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <wait>
}
 30a:	1f 91       	pop	r17
 30c:	0f 91       	pop	r16
 30e:	ff 90       	pop	r15
 310:	ef 90       	pop	r14
 312:	08 95       	ret

00000314 <lcd_init>:


/* initialize lcd (see HD44780 datasheet) */
void
lcd_init(void)
{
 314:	0f 93       	push	r16
 316:	1f 93       	push	r17
	/* set interface to be 4 bits long */
  write_nibble(3,0); _delay_ms(5);
 318:	83 e0       	ldi	r24, 0x03	; 3
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	60 e0       	ldi	r22, 0x00	; 0
 31e:	70 e0       	ldi	r23, 0x00	; 0
 320:	0e 94 4e 01 	call	0x29c	; 0x29c <write_nibble>
 324:	00 e2       	ldi	r16, 0x20	; 32
 326:	1e e4       	ldi	r17, 0x4E	; 78
 328:	c8 01       	movw	r24, r16
 32a:	01 97       	sbiw	r24, 0x01	; 1
 32c:	f1 f7       	brne	.-4      	; 0x32a <lcd_init+0x16>
  write_nibble(3,0); _delay_ms(5);
 32e:	83 e0       	ldi	r24, 0x03	; 3
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	60 e0       	ldi	r22, 0x00	; 0
 334:	70 e0       	ldi	r23, 0x00	; 0
 336:	0e 94 4e 01 	call	0x29c	; 0x29c <write_nibble>
 33a:	c8 01       	movw	r24, r16
 33c:	01 97       	sbiw	r24, 0x01	; 1
 33e:	f1 f7       	brne	.-4      	; 0x33c <lcd_init+0x28>
  write_nibble(3,0); _delay_ms(5);
 340:	83 e0       	ldi	r24, 0x03	; 3
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	60 e0       	ldi	r22, 0x00	; 0
 346:	70 e0       	ldi	r23, 0x00	; 0
 348:	0e 94 4e 01 	call	0x29c	; 0x29c <write_nibble>
 34c:	c8 01       	movw	r24, r16
 34e:	01 97       	sbiw	r24, 0x01	; 1
 350:	f1 f7       	brne	.-4      	; 0x34e <lcd_init+0x3a>
  write_nibble(2,0); _delay_ms(5);
 352:	82 e0       	ldi	r24, 0x02	; 2
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	60 e0       	ldi	r22, 0x00	; 0
 358:	70 e0       	ldi	r23, 0x00	; 0
 35a:	0e 94 4e 01 	call	0x29c	; 0x29c <write_nibble>
 35e:	c8 01       	movw	r24, r16
 360:	01 97       	sbiw	r24, 0x01	; 1
 362:	f1 f7       	brne	.-4      	; 0x360 <lcd_init+0x4c>

	/* function set: set number of lines (bit 3) and font (bit 2) */
  lcd_write_ctrl(LCD_FUNCTION|0x0C);
 364:	8c e2       	ldi	r24, 0x2C	; 44
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	60 e0       	ldi	r22, 0x00	; 0
 36a:	70 e0       	ldi	r23, 0x00	; 0
 36c:	0e 94 6f 01 	call	0x2de	; 0x2de <lcd_write>
  lcd_write_ctrl(LCD_OFF);
 370:	88 e0       	ldi	r24, 0x08	; 8
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	60 e0       	ldi	r22, 0x00	; 0
 376:	70 e0       	ldi	r23, 0x00	; 0
 378:	0e 94 6f 01 	call	0x2de	; 0x2de <lcd_write>
  lcd_write_ctrl(LCD_CLEAR);
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	60 e0       	ldi	r22, 0x00	; 0
 382:	70 e0       	ldi	r23, 0x00	; 0
 384:	0e 94 6f 01 	call	0x2de	; 0x2de <lcd_write>
	/* entry mode set: increment DDRAM pointer when a character is written */
  lcd_write_ctrl(LCD_MODE|0x02);
 388:	86 e0       	ldi	r24, 0x06	; 6
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	60 e0       	ldi	r22, 0x00	; 0
 38e:	70 e0       	ldi	r23, 0x00	; 0
 390:	0e 94 6f 01 	call	0x2de	; 0x2de <lcd_write>
}
 394:	1f 91       	pop	r17
 396:	0f 91       	pop	r16
 398:	08 95       	ret

0000039a <lcd_print>:
        lcd_write_data( charmap[i] );
    }
}

void
lcd_print(const char* buffer){
 39a:	0f 93       	push	r16
 39c:	1f 93       	push	r17
 39e:	cf 93       	push	r28
 3a0:	df 93       	push	r29
 3a2:	8c 01       	movw	r16, r24
    unsigned int size = strlen(buffer);
 3a4:	a8 2f       	mov	r26, r24
 3a6:	b1 2f       	mov	r27, r17
 3a8:	fd 01       	movw	r30, r26
 3aa:	01 90       	ld	r0, Z+
 3ac:	00 20       	and	r0, r0
 3ae:	e9 f7       	brne	.-6      	; 0x3aa <lcd_print+0x10>
 3b0:	31 97       	sbiw	r30, 0x01	; 1
 3b2:	ef 01       	movw	r28, r30
 3b4:	ca 1b       	sub	r28, r26
 3b6:	db 0b       	sbc	r29, r27
    while(size--){
 3b8:	51 f0       	breq	.+20     	; 0x3ce <lcd_print+0x34>
        lcd_write_data( *buffer++ );
 3ba:	f8 01       	movw	r30, r16
 3bc:	81 91       	ld	r24, Z+
 3be:	8f 01       	movw	r16, r30
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	61 e0       	ldi	r22, 0x01	; 1
 3c4:	70 e0       	ldi	r23, 0x00	; 0
 3c6:	0e 94 6f 01 	call	0x2de	; 0x2de <lcd_write>
 3ca:	21 97       	sbiw	r28, 0x01	; 1
}

void
lcd_print(const char* buffer){
    unsigned int size = strlen(buffer);
    while(size--){
 3cc:	b1 f7       	brne	.-20     	; 0x3ba <lcd_print+0x20>
        lcd_write_data( *buffer++ );
    }
}
 3ce:	df 91       	pop	r29
 3d0:	cf 91       	pop	r28
 3d2:	1f 91       	pop	r17
 3d4:	0f 91       	pop	r16
 3d6:	08 95       	ret

000003d8 <lcd_create_glyph>:

#include "lcd.h"
#include "lcd2.h"

/* Write new character to CGRAM */
void lcd_create_glyph(int loc, const char* charmap){
 3d8:	0f 93       	push	r16
 3da:	1f 93       	push	r17
 3dc:	cf 93       	push	r28
 3de:	df 93       	push	r29
 3e0:	8b 01       	movw	r16, r22
    // Using 5 x 8 character maps, then only 8 characters allowed
    loc &=  0x07;
    
    // Send Set CGRAM address instruction
    lcd_write_ctrl( LCD_CGRAM | (loc<<3) );
 3e2:	87 70       	andi	r24, 0x07	; 7
 3e4:	90 70       	andi	r25, 0x00	; 0
 3e6:	88 0f       	add	r24, r24
 3e8:	99 1f       	adc	r25, r25
 3ea:	88 0f       	add	r24, r24
 3ec:	99 1f       	adc	r25, r25
 3ee:	88 0f       	add	r24, r24
 3f0:	99 1f       	adc	r25, r25
 3f2:	80 64       	ori	r24, 0x40	; 64
 3f4:	60 e0       	ldi	r22, 0x00	; 0
 3f6:	70 e0       	ldi	r23, 0x00	; 0
 3f8:	0e 94 6f 01 	call	0x2de	; 0x2de <lcd_write>
 3fc:	c0 e0       	ldi	r28, 0x00	; 0
 3fe:	d0 e0       	ldi	r29, 0x00	; 0
    
    // Address Counter automatically increment, 
    // so we start sending the character row by row
    for(int i=0; i<8; i++){
        lcd_write_data( charmap[i] );
 400:	f8 01       	movw	r30, r16
 402:	ec 0f       	add	r30, r28
 404:	fd 1f       	adc	r31, r29
 406:	80 81       	ld	r24, Z
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	61 e0       	ldi	r22, 0x01	; 1
 40c:	70 e0       	ldi	r23, 0x00	; 0
 40e:	0e 94 6f 01 	call	0x2de	; 0x2de <lcd_write>
    // Send Set CGRAM address instruction
    lcd_write_ctrl( LCD_CGRAM | (loc<<3) );
    
    // Address Counter automatically increment, 
    // so we start sending the character row by row
    for(int i=0; i<8; i++){
 412:	21 96       	adiw	r28, 0x01	; 1
 414:	c8 30       	cpi	r28, 0x08	; 8
 416:	d1 05       	cpc	r29, r1
 418:	99 f7       	brne	.-26     	; 0x400 <lcd_create_glyph+0x28>
        lcd_write_data( charmap[i] );
    }
}
 41a:	df 91       	pop	r29
 41c:	cf 91       	pop	r28
 41e:	1f 91       	pop	r17
 420:	0f 91       	pop	r16
 422:	08 95       	ret

00000424 <_exit>:
 424:	f8 94       	cli

00000426 <__stop_program>:
 426:	ff cf       	rjmp	.-2      	; 0x426 <__stop_program>
